
# get graph names
1) "ConfiguredGraphFactory.getGraphNames()"
   If success, name(s) of the pre-configured graph(s) will be returned:
   ==>airroutes

2) if (1) failed or return nothing, try:
  "JanusGraphFactory.getGraphNames()"
   If success, graph name(s) will be returned like this:
   ==>graph                           # the graph object opened by default, 'g' is traversal method of 'graph' and generated by 'g = graph.traversal()'
   ==>ConfigurationManagementGraph    # The management object of Janusgraph system, this item will not exist if (1) failed.

3) if both (1) and (2) return no graph object, it would be safe to say that there is no graph on blabla port of blabla url.

4) if any graph object is available, then try 'g.V().count()', the graph is an empty one if count of vertex is zero.


# count nodes
g.V().count()

# retrieve first 10 nodes
g.V().range(1,10)

# label(name) of node with index=1024
g.V(1024).label()

# properties of node with index=1024
g.V(1024).valueMap(true)

# print values of node with index=100
g.V(100).values()

# count edges
g.E().count()

# list edges
g.E().range(1,10)




=========================================================================================
# gremPrefix allows a prefix to be appended to all gremlin queries
# Can be used to, say, connect to a different graph using
#.gremPrefix <<- graph=JanusGraphFactory.open('/home/USERNAME/janusgraph-hbase.properties.graph3');g = graph.traversal();
r = dynCurlReader()
str = paste0('{\"gremlin\":\"',paste0(.gremPrefix,queryTxt),"\"",bindGroup,"}")
.params = list()
y = curlPerform(postFields=str,
		url=.janusURL,
		post=1L,
		userpwd=paste0(uid,":",pwd),
		httpauth=1L,
		writefunction=r$update)




=========================================================================================

# random sample
g.V().sample(10)
g.V().sample(10).id()
g.V().sample(10).label()
g.V().sample(10).values('code')
g.V().sample(10).values().fold()
g.V().sample(10).values('code')
g.V().coin(0.2).count()
g.V().coin(0.2).limit(100)


# macth/search - range
g.V().has('code', eq('SYD'))
g.V().has('code', eq('SYD')).dedup()  #remove duplicate result
g.V().has('code', eq('SYD')).count()
g.V().has('code', eq('SYD')).id()
g.V().has('code', eq('SYD')).label()
g.V().has('code', eq('SYD')).values()
g.V().has('code', eq('SYD')).values().limit(10)
g.V().has('code', eq('SYD')).values().fold()
g.V().has('code', eq('SYD')).values('code','city')
g.V().has('code', between('S','W')).count()

g.V().hasId(within(5000..10000))
g.V().hasId(within(5000..10000)).count()
==>15
gremlin> g.V().has(id,within(5000..10000)).count()
==>15
g.V().hasId(between(5000,10000)).count()
==>14
g.V().hasId(within(4096,8192))
==>v[4096]
==>v[8192]
gremlin> g.V(4096).in().count()
==>57
gremlin> g.V(4096).in().hasId(neq(8192)).count()
==>56

# sort
g.V().hasLabel('airport').limit(20).values('code').order().fold()
==>[AUA, BEG, CDG, DEL, EMA, GUM, GVA, HRL, IBZ, ICN, JAX, JED, KIX, LIH, MCY, MDT, OMA, PVR, SJU, YYZ]
g.V().hasLabel('airport').limit(20).values('code').order().by(shuffle).fold()
==>[PVR, JED, MCY, GVA, MDT, HRL, EMA, CDG, KIX, BEG, ICN, SJU, YYZ, LIH, JAX, DEL, GUM, IBZ, OMA, AUA]


# boolean
g.V().or(has('code','SYD'),has('code','CBR'),has('code','MEL'))
g.V().and(has('code','SYD'),has('country','AU'))


# where
g.V().where(values('code').is(eq('SYD')))


# connection
g.V().has('code','SYD').out().count()
g.V().has('code','SYD').outE()
g.V().has('code','SYD').in().count()
g.V().has('code','SYD').inE()

# edges
 g.E().range(0,10)
==>e[22l0jk-35s-2kgl-38w][4096-route->4208]
==>e[22l2ww-35s-2kgl-3bk][4096-route->4304]
==>e[22l05c-35s-2kgl-3bs][4096-route->4312]
==>e[22l6v4-35s-2kgl-6bk][4096-route->8192]
==>e[22l3pc-35s-2kgl-6eo][4096-route->8304]
==>e[22l0xs-35s-2kgl-6hs][4096-route->8416]
==>e[22l62o-35s-2kgl-9hk][4096-route->12296]
==>e[22l43k-35s-2kgl-9kg][4096-route->12400]
==>e[22l3b4-35s-2kgl-9nc][4096-route->12504]
==>e[22l1c0-35s-2kgl-9nk][4096-route->12512]
g.V().has('code','SYD').outE().limit(2).valueMap(true)
==>{label=route, id=n3yf7-5cys8-2kgl-1oxg8, dist=8574}
==>{label=route, id=n40sj-5cys8-2kgl-1p6xk, dist=3908}




