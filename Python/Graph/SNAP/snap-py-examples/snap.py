# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _snap
else:
    import _snap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _snap.SWIG_PyInstanceMethod_New
_swig_new_static_method = _snap.SWIG_PyStaticMethod_New

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SNAP_ALL = _snap.SNAP_ALL

Version = "4.1.0"

print_array = _snap.print_array
PyTFltV = _snap.PyTFltV
PyToTIntV = _snap.PyToTIntV
count = _snap.count
TIntVToPy = _snap.TIntVToPy
lUndef = _snap.lUndef

lUs = _snap.lUs

lSi = _snap.lSi

WrNotify = _snap.WrNotify
SaveToErrLog = _snap.SaveToErrLog
ExeStop = _snap.ExeStop
loUndef = _snap.loUndef

loNot = _snap.loNot

loAnd = _snap.loAnd

loOr = _snap.loOr

roUndef = _snap.roUndef

roLs = _snap.roLs

roLEq = _snap.roLEq

roEq = _snap.roEq

roNEq = _snap.roNEq

roGEq = _snap.roGEq

roGt = _snap.roGt

class TCRef(object):
    r"""Proxy of C++ TCRef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TCRef self) -> TCRef"""
        _snap.TCRef_swiginit(self, _snap.new_TCRef())
    __swig_destroy__ = _snap.delete_TCRef
    MkRef = _swig_new_instance_method(_snap.TCRef_MkRef)
    UnRef = _swig_new_instance_method(_snap.TCRef_UnRef)
    NoRef = _swig_new_instance_method(_snap.TCRef_NoRef)
    GetRefs = _swig_new_instance_method(_snap.TCRef_GetRefs)

# Register TCRef in _snap:
_snap.TCRef_swigregister(TCRef)

class TSStr(object):
    r"""Proxy of C++ TSStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TSStr self) -> TSStr
        __init__(TSStr self, TSStr SStr) -> TSStr

        Parameters
        ----------
        SStr: TSStr const &

        __init__(TSStr self, char const * _Bf) -> TSStr

        Parameters
        ----------
        _Bf: char const *

        """
        _snap.TSStr_swiginit(self, _snap.new_TSStr(*args))
    __swig_destroy__ = _snap.delete_TSStr
    CStr = _swig_new_instance_method(_snap.TSStr_CStr)
    Empty = _swig_new_instance_method(_snap.TSStr_Empty)
    Len = _swig_new_instance_method(_snap.TSStr_Len)

# Register TSStr in _snap:
_snap.TSStr_swigregister(TSStr)

class TConv_Pt64Ints32(object):
    r"""Proxy of C++ TConv_Pt64Ints32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TConv_Pt64Ints32 self) -> TConv_Pt64Ints32
        __init__(TConv_Pt64Ints32 self, void * Pt) -> TConv_Pt64Ints32

        Parameters
        ----------
        Pt: void *

        __init__(TConv_Pt64Ints32 self, uint const & Ms, uint const & Ls) -> TConv_Pt64Ints32

        Parameters
        ----------
        Ms: uint const &
        Ls: uint const &

        """
        _snap.TConv_Pt64Ints32_swiginit(self, _snap.new_TConv_Pt64Ints32(*args))
    PutPt = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutPt)
    GetPt = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetPt)
    PutUInt64 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutUInt64)
    GetUInt64 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetUInt64)
    PutMsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutMsUInt32)
    GetMsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetMsUInt32)
    PutLsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_PutLsUInt32)
    GetLsUInt32 = _swig_new_instance_method(_snap.TConv_Pt64Ints32_GetLsUInt32)
    __swig_destroy__ = _snap.delete_TConv_Pt64Ints32

# Register TConv_Pt64Ints32 in _snap:
_snap.TConv_Pt64Ints32_swigregister(TConv_Pt64Ints32)

class TPairHashImpl1(object):
    r"""Proxy of C++ TPairHashImpl1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetHashCd = _swig_new_static_method(_snap.TPairHashImpl1_GetHashCd)

    def __init__(self):
        r"""__init__(TPairHashImpl1 self) -> TPairHashImpl1"""
        _snap.TPairHashImpl1_swiginit(self, _snap.new_TPairHashImpl1())
    __swig_destroy__ = _snap.delete_TPairHashImpl1

# Register TPairHashImpl1 in _snap:
_snap.TPairHashImpl1_swigregister(TPairHashImpl1)
TPairHashImpl1_GetHashCd = _snap.TPairHashImpl1_GetHashCd

class TPairHashImpl2(object):
    r"""Proxy of C++ TPairHashImpl2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetHashCd = _swig_new_static_method(_snap.TPairHashImpl2_GetHashCd)

    def __init__(self):
        r"""__init__(TPairHashImpl2 self) -> TPairHashImpl2"""
        _snap.TPairHashImpl2_swiginit(self, _snap.new_TPairHashImpl2())
    __swig_destroy__ = _snap.delete_TPairHashImpl2

# Register TPairHashImpl2 in _snap:
_snap.TPairHashImpl2_swigregister(TPairHashImpl2)
TPairHashImpl2_GetHashCd = _snap.TPairHashImpl2_GetHashCd

class TRnd(object):
    r"""Proxy of C++ TRnd class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TRnd self, int const & _Seed=1, int const & Steps=0) -> TRnd

        Parameters
        ----------
        _Seed: int const &
        Steps: int const &

        __init__(TRnd self, TSIn SIn) -> TRnd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TRnd_swiginit(self, _snap.new_TRnd(*args))
    Save = _swig_new_instance_method(_snap.TRnd_Save)
    __eq__ = _swig_new_instance_method(_snap.TRnd___eq__)
    GetUniDev = _swig_new_instance_method(_snap.TRnd_GetUniDev)
    GetUniDevInt = _swig_new_instance_method(_snap.TRnd_GetUniDevInt)
    GetUniDevUInt = _swig_new_instance_method(_snap.TRnd_GetUniDevUInt)
    GetUniDevInt64 = _swig_new_instance_method(_snap.TRnd_GetUniDevInt64)
    GetUniDevUInt64 = _swig_new_instance_method(_snap.TRnd_GetUniDevUInt64)
    GetNrmDev = _swig_new_instance_method(_snap.TRnd_GetNrmDev)
    GetExpDev = _swig_new_instance_method(_snap.TRnd_GetExpDev)
    GetGammaDev = _swig_new_instance_method(_snap.TRnd_GetGammaDev)
    GetPoissonDev = _swig_new_instance_method(_snap.TRnd_GetPoissonDev)
    GetBinomialDev = _swig_new_instance_method(_snap.TRnd_GetBinomialDev)
    GetGeoDev = _swig_new_instance_method(_snap.TRnd_GetGeoDev)
    GetPowerDev = _swig_new_instance_method(_snap.TRnd_GetPowerDev)
    GetRayleigh = _swig_new_instance_method(_snap.TRnd_GetRayleigh)
    GetWeibull = _swig_new_instance_method(_snap.TRnd_GetWeibull)
    PutSeed = _swig_new_instance_method(_snap.TRnd_PutSeed)
    GetSeed = _swig_new_instance_method(_snap.TRnd_GetSeed)
    Randomize = _swig_new_instance_method(_snap.TRnd_Randomize)
    Move = _swig_new_instance_method(_snap.TRnd_Move)
    Check = _swig_new_instance_method(_snap.TRnd_Check)
    GetUniDevStep = _swig_new_static_method(_snap.TRnd_GetUniDevStep)
    GetNrmDevStep = _swig_new_static_method(_snap.TRnd_GetNrmDevStep)
    GetExpDevStep = _swig_new_static_method(_snap.TRnd_GetExpDevStep)
    LoadTxt = _swig_new_static_method(_snap.TRnd_LoadTxt)
    SaveTxt = _swig_new_instance_method(_snap.TRnd_SaveTxt)
    __swig_destroy__ = _snap.delete_TRnd

# Register TRnd in _snap:
_snap.TRnd_swigregister(TRnd)
cvar = _snap.cvar
TRnd.RndSeed = _snap.cvar.TRnd_RndSeed
TRnd_GetUniDevStep = _snap.TRnd_GetUniDevStep
TRnd_GetNrmDevStep = _snap.TRnd_GetNrmDevStep
TRnd_GetExpDevStep = _snap.TRnd_GetExpDevStep
TRnd_LoadTxt = _snap.TRnd_LoadTxt

class TMem(object):
    r"""Proxy of C++ TMem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.TMem_New)
    __swig_destroy__ = _snap.delete_TMem

    def __init__(self, *args):
        r"""
        __init__(TMem self, int const & _MxBfL=0) -> TMem

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TMem self, void const * _Bf, int const & _BfL) -> TMem

        Parameters
        ----------
        _Bf: void const *
        _BfL: int const &

        __init__(TMem self, TMem Mem) -> TMem

        Parameters
        ----------
        Mem: TMem const &

        __init__(TMem self, TStr Str) -> TMem

        Parameters
        ----------
        Str: TStr const &

        __init__(TMem self, TSIn SIn) -> TMem

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TMem_swiginit(self, _snap.new_TMem(*args))
    Save = _swig_new_instance_method(_snap.TMem_Save)
    __call__ = _swig_new_instance_method(_snap.TMem___call__)
    __iadd__ = _swig_new_instance_method(_snap.TMem___iadd__)
    GetMemUsed = _swig_new_instance_method(_snap.TMem_GetMemUsed)
    Gen = _swig_new_instance_method(_snap.TMem_Gen)
    GenZeros = _swig_new_instance_method(_snap.TMem_GenZeros)
    Reserve = _swig_new_instance_method(_snap.TMem_Reserve)
    Del = _swig_new_instance_method(_snap.TMem_Del)
    Clr = _swig_new_instance_method(_snap.TMem_Clr)
    Len = _swig_new_instance_method(_snap.TMem_Len)
    Empty = _swig_new_instance_method(_snap.TMem_Empty)
    Trunc = _swig_new_instance_method(_snap.TMem_Trunc)
    Push = _swig_new_instance_method(_snap.TMem_Push)
    Pop = _swig_new_instance_method(_snap.TMem_Pop)
    DoFitStr = _swig_new_instance_method(_snap.TMem_DoFitStr)
    AddBf = _swig_new_instance_method(_snap.TMem_AddBf)
    GetBf = _swig_new_instance_method(_snap.TMem_GetBf)
    GetAsStr = _swig_new_instance_method(_snap.TMem_GetAsStr)
    GetSIn = _swig_new_instance_method(_snap.TMem_GetSIn)
    LoadMem = _swig_new_static_method(_snap.TMem_LoadMem)
    SaveMem = _swig_new_instance_method(_snap.TMem_SaveMem)

# Register TMem in _snap:
_snap.TMem_swigregister(TMem)
TMem_New = _snap.TMem_New
TMem_LoadMem = _snap.TMem_LoadMem

class TMemIn(object):
    r"""Proxy of C++ TMemIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Mem: 'TMem', _BfC: 'int const &'=0):
        r"""
        __init__(TMemIn self, TMem _Mem, int const & _BfC=0) -> TMemIn

        Parameters
        ----------
        _Mem: TMem const &
        _BfC: int const &

        """
        _snap.TMemIn_swiginit(self, _snap.new_TMemIn(_Mem, _BfC))
    New = _swig_new_static_method(_snap.TMemIn_New)
    __swig_destroy__ = _snap.delete_TMemIn
    Eof = _swig_new_instance_method(_snap.TMemIn_Eof)
    Len = _swig_new_instance_method(_snap.TMemIn_Len)
    GetCh = _swig_new_instance_method(_snap.TMemIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TMemIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TMemIn_GetBf)
    Reset = _swig_new_instance_method(_snap.TMemIn_Reset)
    GetNextLnBf = _swig_new_instance_method(_snap.TMemIn_GetNextLnBf)

# Register TMemIn in _snap:
_snap.TMemIn_swigregister(TMemIn)
TMemIn_New = _snap.TMemIn_New

class TMemOut(object):
    r"""Proxy of C++ TMemOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Mem: 'PMem const &'):
        r"""
        __init__(TMemOut self, PMem const & _Mem) -> TMemOut

        Parameters
        ----------
        _Mem: PMem const &

        """
        _snap.TMemOut_swiginit(self, _snap.new_TMemOut(_Mem))
    New = _swig_new_static_method(_snap.TMemOut_New)
    __swig_destroy__ = _snap.delete_TMemOut
    PutCh = _swig_new_instance_method(_snap.TMemOut_PutCh)
    PutBf = _swig_new_instance_method(_snap.TMemOut_PutBf)
    Flush = _swig_new_instance_method(_snap.TMemOut_Flush)

# Register TMemOut in _snap:
_snap.TMemOut_swigregister(TMemOut)
TMemOut_New = _snap.TMemOut_New

class TChA(object):
    r"""Proxy of C++ TChA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TChA

    def __init__(self, *args):
        r"""
        __init__(TChA self, int const & _MxBfL=256) -> TChA

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TChA self, char const * CStr) -> TChA

        Parameters
        ----------
        CStr: char const *

        __init__(TChA self, char const * CStr, int const & StrLen) -> TChA

        Parameters
        ----------
        CStr: char const *
        StrLen: int const &

        __init__(TChA self, TChA ChA) -> TChA

        Parameters
        ----------
        ChA: TChA const &

        __init__(TChA self, TStr Str) -> TChA

        Parameters
        ----------
        Str: TStr const &

        __init__(TChA self, TMem Mem) -> TChA

        Parameters
        ----------
        Mem: TMem const &

        __init__(TChA self, TSIn SIn) -> TChA

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TChA_swiginit(self, _snap.new_TChA(*args))
    Load = _swig_new_instance_method(_snap.TChA_Load)
    Save = _swig_new_instance_method(_snap.TChA_Save)
    __eq__ = _swig_new_instance_method(_snap.TChA___eq__)
    __ne__ = _swig_new_instance_method(_snap.TChA___ne__)
    __lt__ = _swig_new_instance_method(_snap.TChA___lt__)
    __iadd__ = _swig_new_instance_method(_snap.TChA___iadd__)
    GetMemUsed = _swig_new_instance_method(_snap.TChA_GetMemUsed)
    __call__ = _swig_new_instance_method(_snap.TChA___call__)
    CStr = _swig_new_instance_method(_snap.TChA_CStr)
    Clr = _swig_new_instance_method(_snap.TChA_Clr)
    Len = _swig_new_instance_method(_snap.TChA_Len)
    Empty = _swig_new_instance_method(_snap.TChA_Empty)
    Ins = _swig_new_instance_method(_snap.TChA_Ins)
    Del = _swig_new_instance_method(_snap.TChA_Del)
    DelLastCh = _swig_new_instance_method(_snap.TChA_DelLastCh)
    Push = _swig_new_instance_method(_snap.TChA_Push)
    Pop = _swig_new_instance_method(_snap.TChA_Pop)
    Trunc = _swig_new_instance_method(_snap.TChA_Trunc)
    Reverse = _swig_new_instance_method(_snap.TChA_Reverse)
    AddCh = _swig_new_instance_method(_snap.TChA_AddCh)
    AddChTo = _swig_new_instance_method(_snap.TChA_AddChTo)
    AddBf = _swig_new_instance_method(_snap.TChA_AddBf)
    PutCh = _swig_new_instance_method(_snap.TChA_PutCh)
    GetCh = _swig_new_instance_method(_snap.TChA_GetCh)
    LastCh = _swig_new_instance_method(_snap.TChA_LastCh)
    LastLastCh = _swig_new_instance_method(_snap.TChA_LastLastCh)
    GetSubStr = _swig_new_instance_method(_snap.TChA_GetSubStr)
    CountCh = _swig_new_instance_method(_snap.TChA_CountCh)
    SearchCh = _swig_new_instance_method(_snap.TChA_SearchCh)
    SearchChBack = _swig_new_instance_method(_snap.TChA_SearchChBack)
    SearchStr = _swig_new_instance_method(_snap.TChA_SearchStr)
    IsStrIn = _swig_new_instance_method(_snap.TChA_IsStrIn)
    IsPrefix = _swig_new_instance_method(_snap.TChA_IsPrefix)
    IsSuffix = _swig_new_instance_method(_snap.TChA_IsSuffix)
    IsChIn = _swig_new_instance_method(_snap.TChA_IsChIn)
    ChangeCh = _swig_new_instance_method(_snap.TChA_ChangeCh)
    ToUc = _swig_new_instance_method(_snap.TChA_ToUc)
    ToLc = _swig_new_instance_method(_snap.TChA_ToLc)
    ToTrunc = _swig_new_instance_method(_snap.TChA_ToTrunc)
    CompressWs = _swig_new_instance_method(_snap.TChA_CompressWs)
    Swap = _swig_new_instance_method(_snap.TChA_Swap)
    GetPrimHashCd = _swig_new_instance_method(_snap.TChA_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TChA_GetSecHashCd)
    LoadTxt = _swig_new_static_method(_snap.TChA_LoadTxt)
    SaveTxt = _swig_new_instance_method(_snap.TChA_SaveTxt)

# Register TChA in _snap:
_snap.TChA_swigregister(TChA)
TChA_LoadTxt = _snap.TChA_LoadTxt

class TChAIn(object):
    r"""Proxy of C++ TChAIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, ChA: 'TChA', _BfC: 'int const &'=0):
        r"""
        __init__(TChAIn self, TChA ChA, int const & _BfC=0) -> TChAIn

        Parameters
        ----------
        ChA: TChA const &
        _BfC: int const &

        """
        _snap.TChAIn_swiginit(self, _snap.new_TChAIn(ChA, _BfC))
    New = _swig_new_static_method(_snap.TChAIn_New)
    __swig_destroy__ = _snap.delete_TChAIn
    Eof = _swig_new_instance_method(_snap.TChAIn_Eof)
    Len = _swig_new_instance_method(_snap.TChAIn_Len)
    GetCh = _swig_new_instance_method(_snap.TChAIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TChAIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TChAIn_GetBf)
    Reset = _swig_new_instance_method(_snap.TChAIn_Reset)
    GetNextLnBf = _swig_new_instance_method(_snap.TChAIn_GetNextLnBf)

# Register TChAIn in _snap:
_snap.TChAIn_swigregister(TChAIn)
TChAIn_New = _snap.TChAIn_New

class TRStr(object):
    r"""Proxy of C++ TRStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Bf = property(_snap.TRStr_Bf_get, _snap.TRStr_Bf_set, doc=r"""Bf : p.char""")
    Refs = property(_snap.TRStr_Refs_get, _snap.TRStr_Refs_set, doc=r"""Refs : int""")
    __swig_destroy__ = _snap.delete_TRStr

    def __init__(self, *args):
        r"""
        __init__(TRStr self) -> TRStr
        __init__(TRStr self, int const & Len) -> TRStr

        Parameters
        ----------
        Len: int const &

        __init__(TRStr self, char const * CStr) -> TRStr

        Parameters
        ----------
        CStr: char const *

        __init__(TRStr self, char const * CStr, int const & MxLen) -> TRStr

        Parameters
        ----------
        CStr: char const *
        MxLen: int const &

        __init__(TRStr self, char const * CStr1, char const * CStr2) -> TRStr

        Parameters
        ----------
        CStr1: char const *
        CStr2: char const *

        __init__(TRStr self, char const & Ch) -> TRStr

        Parameters
        ----------
        Ch: char const &

        __init__(TRStr self, char const & Ch1, char const & Ch2) -> TRStr

        Parameters
        ----------
        Ch1: char const &
        Ch2: char const &

        __init__(TRStr self, TSIn SIn, bool const & IsSmall) -> TRStr

        Parameters
        ----------
        SIn: TSIn &
        IsSmall: bool const &

        """
        _snap.TRStr_swiginit(self, _snap.new_TRStr(*args))
    Save = _swig_new_instance_method(_snap.TRStr_Save)
    GetMemUsed = _swig_new_instance_method(_snap.TRStr_GetMemUsed)
    MkRef = _swig_new_instance_method(_snap.TRStr_MkRef)
    UnRef = _swig_new_instance_method(_snap.TRStr_UnRef)
    CStr = _swig_new_instance_method(_snap.TRStr_CStr)
    Empty = _swig_new_instance_method(_snap.TRStr_Empty)
    Len = _swig_new_instance_method(_snap.TRStr_Len)
    PutCh = _swig_new_instance_method(_snap.TRStr_PutCh)
    GetCh = _swig_new_instance_method(_snap.TRStr_GetCh)
    IsUc = _swig_new_instance_method(_snap.TRStr_IsUc)
    ToUc = _swig_new_instance_method(_snap.TRStr_ToUc)
    IsLc = _swig_new_instance_method(_snap.TRStr_IsLc)
    ToLc = _swig_new_instance_method(_snap.TRStr_ToLc)
    ToCap = _swig_new_instance_method(_snap.TRStr_ToCap)
    ConvUsFromYuAscii = _swig_new_instance_method(_snap.TRStr_ConvUsFromYuAscii)
    CmpI = _swig_new_static_method(_snap.TRStr_CmpI)
    GetPrimHashCd = _swig_new_instance_method(_snap.TRStr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TRStr_GetSecHashCd)
    GetNullRStr = _swig_new_static_method(_snap.TRStr_GetNullRStr)

# Register TRStr in _snap:
_snap.TRStr_swigregister(TRStr)
TRStr_CmpI = _snap.TRStr_CmpI
TRStr_GetNullRStr = _snap.TRStr_GetNullRStr

class TStr(object):
    r"""Proxy of C++ TStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStr

    def __init__(self, *args):
        r"""
        __init__(TStr self) -> TStr
        __init__(TStr self, TStr Str) -> TStr

        Parameters
        ----------
        Str: TStr const &

        __init__(TStr self, TChA ChA) -> TStr

        Parameters
        ----------
        ChA: TChA const &

        __init__(TStr self, TSStr SStr) -> TStr

        Parameters
        ----------
        SStr: TSStr const &

        __init__(TStr self, char const * CStr) -> TStr

        Parameters
        ----------
        CStr: char const *

        __init__(TStr self, char const & Ch) -> TStr

        Parameters
        ----------
        Ch: char const &

        __init__(TStr self, TMem Mem) -> TStr

        Parameters
        ----------
        Mem: TMem const &

        __init__(TStr self, PSIn const & SIn) -> TStr

        Parameters
        ----------
        SIn: PSIn const &

        __init__(TStr self, TSIn SIn, bool const & IsSmall=False) -> TStr

        Parameters
        ----------
        SIn: TSIn &
        IsSmall: bool const &

        """
        _snap.TStr_swiginit(self, _snap.new_TStr(*args))
    Load = _swig_new_instance_method(_snap.TStr_Load)
    Save = _swig_new_instance_method(_snap.TStr_Save)
    __iadd__ = _swig_new_instance_method(_snap.TStr___iadd__)
    __eq__ = _swig_new_instance_method(_snap.TStr___eq__)
    __ne__ = _swig_new_instance_method(_snap.TStr___ne__)
    __lt__ = _swig_new_instance_method(_snap.TStr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStr_GetMemUsed)
    CStr = _swig_new_instance_method(_snap.TStr_CStr)
    PutCh = _swig_new_instance_method(_snap.TStr_PutCh)
    GetCh = _swig_new_instance_method(_snap.TStr_GetCh)
    LastCh = _swig_new_instance_method(_snap.TStr_LastCh)
    Clr = _swig_new_instance_method(_snap.TStr_Clr)
    Len = _swig_new_instance_method(_snap.TStr_Len)
    Empty = _swig_new_instance_method(_snap.TStr_Empty)
    IsUc = _swig_new_instance_method(_snap.TStr_IsUc)
    ToUc = _swig_new_instance_method(_snap.TStr_ToUc)
    GetUc = _swig_new_instance_method(_snap.TStr_GetUc)
    CmpI = _swig_new_instance_method(_snap.TStr_CmpI)
    EqI = _swig_new_instance_method(_snap.TStr_EqI)
    IsLc = _swig_new_instance_method(_snap.TStr_IsLc)
    ToLc = _swig_new_instance_method(_snap.TStr_ToLc)
    GetLc = _swig_new_instance_method(_snap.TStr_GetLc)
    ToCap = _swig_new_instance_method(_snap.TStr_ToCap)
    GetCap = _swig_new_instance_method(_snap.TStr_GetCap)
    ToTrunc = _swig_new_instance_method(_snap.TStr_ToTrunc)
    GetTrunc = _swig_new_instance_method(_snap.TStr_GetTrunc)
    ConvUsFromYuAscii = _swig_new_instance_method(_snap.TStr_ConvUsFromYuAscii)
    GetUsFromYuAscii = _swig_new_instance_method(_snap.TStr_GetUsFromYuAscii)
    ToHex = _swig_new_instance_method(_snap.TStr_ToHex)
    GetHex = _swig_new_instance_method(_snap.TStr_GetHex)
    FromHex = _swig_new_instance_method(_snap.TStr_FromHex)
    GetFromHex = _swig_new_instance_method(_snap.TStr_GetFromHex)
    GetSubStr = _swig_new_instance_method(_snap.TStr_GetSubStr)
    InsStr = _swig_new_instance_method(_snap.TStr_InsStr)
    DelChAll = _swig_new_instance_method(_snap.TStr_DelChAll)
    DelSubStr = _swig_new_instance_method(_snap.TStr_DelSubStr)
    DelStr = _swig_new_instance_method(_snap.TStr_DelStr)
    LeftOf = _swig_new_instance_method(_snap.TStr_LeftOf)
    LeftOfLast = _swig_new_instance_method(_snap.TStr_LeftOfLast)
    RightOf = _swig_new_instance_method(_snap.TStr_RightOf)
    RightOfLast = _swig_new_instance_method(_snap.TStr_RightOfLast)
    SplitOnCh = _swig_new_instance_method(_snap.TStr_SplitOnCh)
    SplitOnLastCh = _swig_new_instance_method(_snap.TStr_SplitOnLastCh)
    SplitOnAllCh = _swig_new_instance_method(_snap.TStr_SplitOnAllCh)
    SplitOnAllAnyCh = _swig_new_instance_method(_snap.TStr_SplitOnAllAnyCh)
    SplitOnWs = _swig_new_instance_method(_snap.TStr_SplitOnWs)
    SplitOnNonAlNum = _swig_new_instance_method(_snap.TStr_SplitOnNonAlNum)
    SplitOnStr = _swig_new_instance_method(_snap.TStr_SplitOnStr)
    Mid = _swig_new_instance_method(_snap.TStr_Mid)
    Left = _swig_new_instance_method(_snap.TStr_Left)
    Right = _swig_new_instance_method(_snap.TStr_Right)
    Slice = _swig_new_instance_method(_snap.TStr_Slice)
    __call__ = _swig_new_instance_method(_snap.TStr___call__)
    CountCh = _swig_new_instance_method(_snap.TStr_CountCh)
    SearchCh = _swig_new_instance_method(_snap.TStr_SearchCh)
    SearchChBack = _swig_new_instance_method(_snap.TStr_SearchChBack)
    SearchStr = _swig_new_instance_method(_snap.TStr_SearchStr)
    IsChIn = _swig_new_instance_method(_snap.TStr_IsChIn)
    IsStrIn = _swig_new_instance_method(_snap.TStr_IsStrIn)
    IsPrefix = _swig_new_instance_method(_snap.TStr_IsPrefix)
    IsSuffix = _swig_new_instance_method(_snap.TStr_IsSuffix)
    ChangeCh = _swig_new_instance_method(_snap.TStr_ChangeCh)
    ChangeChAll = _swig_new_instance_method(_snap.TStr_ChangeChAll)
    ChangeStr = _swig_new_instance_method(_snap.TStr_ChangeStr)
    ChangeStrAll = _swig_new_instance_method(_snap.TStr_ChangeStrAll)
    Reverse = _swig_new_instance_method(_snap.TStr_Reverse)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStr_GetSecHashCd)
    IsBool = _swig_new_instance_method(_snap.TStr_IsBool)
    IsInt = _swig_new_instance_method(_snap.TStr_IsInt)
    GetInt = _swig_new_instance_method(_snap.TStr_GetInt)
    IsUInt = _swig_new_instance_method(_snap.TStr_IsUInt)
    GetUInt = _swig_new_instance_method(_snap.TStr_GetUInt)
    IsInt64 = _swig_new_instance_method(_snap.TStr_IsInt64)
    GetInt64 = _swig_new_instance_method(_snap.TStr_GetInt64)
    IsUInt64 = _swig_new_instance_method(_snap.TStr_IsUInt64)
    GetUInt64 = _swig_new_instance_method(_snap.TStr_GetUInt64)
    IsHexInt = _swig_new_instance_method(_snap.TStr_IsHexInt)
    GetHexInt = _swig_new_instance_method(_snap.TStr_GetHexInt)
    IsHexInt64 = _swig_new_instance_method(_snap.TStr_IsHexInt64)
    GetHexInt64 = _swig_new_instance_method(_snap.TStr_GetHexInt64)
    IsFlt = _swig_new_instance_method(_snap.TStr_IsFlt)
    GetFlt = _swig_new_instance_method(_snap.TStr_GetFlt)
    IsWord = _swig_new_instance_method(_snap.TStr_IsWord)
    IsWs = _swig_new_instance_method(_snap.TStr_IsWs)
    IsWcMatch = _swig_new_instance_method(_snap.TStr_IsWcMatch)
    GetWcMatch = _swig_new_instance_method(_snap.TStr_GetWcMatch)
    GetFPath = _swig_new_instance_method(_snap.TStr_GetFPath)
    GetFBase = _swig_new_instance_method(_snap.TStr_GetFBase)
    GetFMid = _swig_new_instance_method(_snap.TStr_GetFMid)
    GetFExt = _swig_new_instance_method(_snap.TStr_GetFExt)
    GetNrFPath = _swig_new_static_method(_snap.TStr_GetNrFPath)
    GetNrFMid = _swig_new_static_method(_snap.TStr_GetNrFMid)
    GetNrFExt = _swig_new_static_method(_snap.TStr_GetNrFExt)
    GetNrNumFExt = _swig_new_static_method(_snap.TStr_GetNrNumFExt)
    GetNrFNm = _swig_new_static_method(_snap.TStr_GetNrFNm)
    GetNrAbsFPath = _swig_new_static_method(_snap.TStr_GetNrAbsFPath)
    IsAbsFPath = _swig_new_static_method(_snap.TStr_IsAbsFPath)
    PutFExt = _swig_new_static_method(_snap.TStr_PutFExt)
    PutFExtIfEmpty = _swig_new_static_method(_snap.TStr_PutFExtIfEmpty)
    PutFBase = _swig_new_static_method(_snap.TStr_PutFBase)
    PutFBaseIfEmpty = _swig_new_static_method(_snap.TStr_PutFBaseIfEmpty)
    AddToFMid = _swig_new_static_method(_snap.TStr_AddToFMid)
    GetNumFNm = _swig_new_static_method(_snap.TStr_GetNumFNm)
    GetFNmStr = _swig_new_static_method(_snap.TStr_GetFNmStr)
    LoadTxt = _swig_new_static_method(_snap.TStr_LoadTxt)
    SaveTxt = _swig_new_instance_method(_snap.TStr_SaveTxt)
    GetChStr = _swig_new_static_method(_snap.TStr_GetChStr)
    GetDChStr = _swig_new_static_method(_snap.TStr_GetDChStr)
    GetStr = _swig_new_static_method(_snap.TStr_GetStr)
    Fmt = _swig_new_static_method(_snap.TStr_Fmt)
    GetSpaceStr = _swig_new_static_method(_snap.TStr_GetSpaceStr)
    GetCStr = _swig_new_instance_method(_snap.TStr_GetCStr)
    MkClone = _swig_new_static_method(_snap.TStr_MkClone)
    GetNullStr = _swig_new_static_method(_snap.TStr_GetNullStr)

# Register TStr in _snap:
_snap.TStr_swigregister(TStr)
TStr_GetNrFPath = _snap.TStr_GetNrFPath
TStr_GetNrFMid = _snap.TStr_GetNrFMid
TStr_GetNrFExt = _snap.TStr_GetNrFExt
TStr_GetNrNumFExt = _snap.TStr_GetNrNumFExt
TStr_GetNrFNm = _snap.TStr_GetNrFNm
TStr_GetNrAbsFPath = _snap.TStr_GetNrAbsFPath
TStr_IsAbsFPath = _snap.TStr_IsAbsFPath
TStr_PutFExt = _snap.TStr_PutFExt
TStr_PutFExtIfEmpty = _snap.TStr_PutFExtIfEmpty
TStr_PutFBase = _snap.TStr_PutFBase
TStr_PutFBaseIfEmpty = _snap.TStr_PutFBaseIfEmpty
TStr_AddToFMid = _snap.TStr_AddToFMid
TStr_GetNumFNm = _snap.TStr_GetNumFNm
TStr_GetFNmStr = _snap.TStr_GetFNmStr
TStr_LoadTxt = _snap.TStr_LoadTxt
TStr_GetChStr = _snap.TStr_GetChStr
TStr_GetDChStr = _snap.TStr_GetDChStr
TStr_GetStr = _snap.TStr_GetStr
TStr_Fmt = _snap.TStr_Fmt
TStr_GetSpaceStr = _snap.TStr_GetSpaceStr
TStr_MkClone = _snap.TStr_MkClone
TStr_GetNullStr = _snap.TStr_GetNullStr

class TStrIn(object):
    r"""Proxy of C++ TStrIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Str: 'TStr'):
        r"""
        __init__(TStrIn self, TStr _Str) -> TStrIn

        Parameters
        ----------
        _Str: TStr const &

        """
        _snap.TStrIn_swiginit(self, _snap.new_TStrIn(_Str))
    New = _swig_new_static_method(_snap.TStrIn_New)
    __swig_destroy__ = _snap.delete_TStrIn
    Eof = _swig_new_instance_method(_snap.TStrIn_Eof)
    Len = _swig_new_instance_method(_snap.TStrIn_Len)
    GetCh = _swig_new_instance_method(_snap.TStrIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TStrIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TStrIn_GetBf)
    Reset = _swig_new_instance_method(_snap.TStrIn_Reset)
    GetNextLnBf = _swig_new_instance_method(_snap.TStrIn_GetNextLnBf)

# Register TStrIn in _snap:
_snap.TStrIn_swigregister(TStrIn)
TStrIn_New = _snap.TStrIn_New

class TDbStr(object):
    r"""Proxy of C++ TDbStr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Str1 = property(_snap.TDbStr_Str1_get, _snap.TDbStr_Str1_set, doc=r"""Str1 : TStr""")
    Str2 = property(_snap.TDbStr_Str2_get, _snap.TDbStr_Str2_set, doc=r"""Str2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TDbStr self) -> TDbStr
        __init__(TDbStr self, TDbStr DbStr) -> TDbStr

        Parameters
        ----------
        DbStr: TDbStr const &

        __init__(TDbStr self, TStr _Str1) -> TDbStr

        Parameters
        ----------
        _Str1: TStr const &

        __init__(TDbStr self, TStr _Str1, TStr _Str2) -> TDbStr

        Parameters
        ----------
        _Str1: TStr const &
        _Str2: TStr const &

        __init__(TDbStr self, TSIn SIn) -> TDbStr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TDbStr_swiginit(self, _snap.new_TDbStr(*args))
    Save = _swig_new_instance_method(_snap.TDbStr_Save)
    __eq__ = _swig_new_instance_method(_snap.TDbStr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TDbStr___lt__)
    GetStr = _swig_new_instance_method(_snap.TDbStr_GetStr)
    GetPrimHashCd = _swig_new_instance_method(_snap.TDbStr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TDbStr_GetSecHashCd)
    Empty = _swig_new_instance_method(_snap.TDbStr_Empty)
    Filled = _swig_new_instance_method(_snap.TDbStr_Filled)
    __swig_destroy__ = _snap.delete_TDbStr

# Register TDbStr in _snap:
_snap.TDbStr_swigregister(TDbStr)

class TStrPool(object):
    r"""Proxy of C++ TStrPool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPool self, uint const & MxBfLen=0, uint const & _GrowBy=16*1024*1024) -> TStrPool

        Parameters
        ----------
        MxBfLen: uint const &
        _GrowBy: uint const &

        __init__(TStrPool self, TSIn SIn, bool LoadCompact=True) -> TStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        __init__(TStrPool self, TStrPool Pool) -> TStrPool

        Parameters
        ----------
        Pool: TStrPool const &

        """
        _snap.TStrPool_swiginit(self, _snap.new_TStrPool(*args))
    __swig_destroy__ = _snap.delete_TStrPool
    New = _swig_new_static_method(_snap.TStrPool_New)
    Load = _swig_new_static_method(_snap.TStrPool_Load)
    Save = _swig_new_instance_method(_snap.TStrPool_Save)
    Len = _swig_new_instance_method(_snap.TStrPool_Len)
    Size = _swig_new_instance_method(_snap.TStrPool_Size)
    Empty = _swig_new_instance_method(_snap.TStrPool_Empty)
    __call__ = _swig_new_instance_method(_snap.TStrPool___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPool_GetMemUsed)
    AddStr = _swig_new_instance_method(_snap.TStrPool_AddStr)
    GetStr = _swig_new_instance_method(_snap.TStrPool_GetStr)
    GetCStr = _swig_new_instance_method(_snap.TStrPool_GetCStr)
    Clr = _swig_new_instance_method(_snap.TStrPool_Clr)
    Cmp = _swig_new_instance_method(_snap.TStrPool_Cmp)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrPool_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrPool_GetSecHashCd)
    LoadShM = _swig_new_static_method(_snap.TStrPool_LoadShM)

# Register TStrPool in _snap:
_snap.TStrPool_swigregister(TStrPool)
TStrPool_New = _snap.TStrPool_New
TStrPool_Load = _snap.TStrPool_Load
TStrPool_LoadShM = _snap.TStrPool_LoadShM

class TStrPool64(object):
    r"""Proxy of C++ TStrPool64 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrPool64 self, ::TSize _MxBfL=0, ::TSize _GrowBy=16*1024*1024) -> TStrPool64

        Parameters
        ----------
        _MxBfL: ::TSize
        _GrowBy: ::TSize

        __init__(TStrPool64 self, TStrPool64 StrPool) -> TStrPool64

        Parameters
        ----------
        StrPool: TStrPool64 const &

        __init__(TStrPool64 self, TSIn SIn, bool LoadCompact=True) -> TStrPool64

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        """
        _snap.TStrPool64_swiginit(self, _snap.new_TStrPool64(*args))
    __swig_destroy__ = _snap.delete_TStrPool64
    Save = _swig_new_instance_method(_snap.TStrPool64_Save)
    New = _swig_new_static_method(_snap.TStrPool64_New)
    Load = _swig_new_static_method(_snap.TStrPool64_Load)
    GetMemUsed = _swig_new_instance_method(_snap.TStrPool64_GetMemUsed)
    Empty = _swig_new_instance_method(_snap.TStrPool64_Empty)
    Len = _swig_new_instance_method(_snap.TStrPool64_Len)
    Reserved = _swig_new_instance_method(_snap.TStrPool64_Reserved)
    Clr = _swig_new_instance_method(_snap.TStrPool64_Clr)
    Cmp = _swig_new_instance_method(_snap.TStrPool64_Cmp)
    AddStr = _swig_new_instance_method(_snap.TStrPool64_AddStr)
    GetStr = _swig_new_instance_method(_snap.TStrPool64_GetStr)

# Register TStrPool64 in _snap:
_snap.TStrPool64_swigregister(TStrPool64)
TStrPool64_New = _snap.TStrPool64_New
TStrPool64_Load = _snap.TStrPool64_Load

class TVoid(object):
    r"""Proxy of C++ TVoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TVoid self) -> TVoid
        __init__(TVoid self, TSIn arg2) -> TVoid

        Parameters
        ----------
        arg2: TSIn &

        """
        _snap.TVoid_swiginit(self, _snap.new_TVoid(*args))
    Save = _swig_new_instance_method(_snap.TVoid_Save)
    __eq__ = _swig_new_instance_method(_snap.TVoid___eq__)
    __lt__ = _swig_new_instance_method(_snap.TVoid___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TVoid_GetMemUsed)
    __swig_destroy__ = _snap.delete_TVoid

# Register TVoid in _snap:
_snap.TVoid_swigregister(TVoid)

class TBool(object):
    r"""Proxy of C++ TBool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TBool_Val_get, _snap.TBool_Val_set, doc=r"""Val : bool""")
    Rnd = property(_snap.TBool_Rnd_get, _snap.TBool_Rnd_set, doc=r"""Rnd : TRnd""")

    def __nonzero__(self):
        return _snap.TBool___nonzero__(self)
    __bool__ = __nonzero__



    def __init__(self, *args):
        r"""
        __init__(TBool self) -> TBool
        __init__(TBool self, bool const & _Val) -> TBool

        Parameters
        ----------
        _Val: bool const &

        __init__(TBool self, TSIn SIn) -> TBool

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBool_swiginit(self, _snap.new_TBool(*args))
    Load = _swig_new_instance_method(_snap.TBool_Load)
    Save = _swig_new_instance_method(_snap.TBool_Save)
    __eq__ = _swig_new_instance_method(_snap.TBool___eq__)
    __lt__ = _swig_new_instance_method(_snap.TBool___lt__)
    __call__ = _swig_new_instance_method(_snap.TBool___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TBool_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TBool_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TBool_GetSecHashCd)
    GetRnd = _swig_new_static_method(_snap.TBool_GetRnd)
    GetStr = _swig_new_static_method(_snap.TBool_GetStr)
    GetYNStr = _swig_new_static_method(_snap.TBool_GetYNStr)
    GetYesNoStr = _swig_new_static_method(_snap.TBool_GetYesNoStr)
    Get01Str = _swig_new_static_method(_snap.TBool_Get01Str)
    IsValStr = _swig_new_static_method(_snap.TBool_IsValStr)
    GetValFromStr = _swig_new_static_method(_snap.TBool_GetValFromStr)
    __swig_destroy__ = _snap.delete_TBool

# Register TBool in _snap:
_snap.TBool_swigregister(TBool)
TBool.Mn = _snap.cvar.TBool_Mn
TBool.Mx = _snap.cvar.TBool_Mx
TBool.Vals = _snap.cvar.TBool_Vals
TBool.FalseStr = _snap.cvar.TBool_FalseStr
TBool.TrueStr = _snap.cvar.TBool_TrueStr
TBool.NStr = _snap.cvar.TBool_NStr
TBool.YStr = _snap.cvar.TBool_YStr
TBool.NoStr = _snap.cvar.TBool_NoStr
TBool.YesStr = _snap.cvar.TBool_YesStr
TBool_GetRnd = _snap.TBool_GetRnd
TBool_GetStr = _snap.TBool_GetStr
TBool_GetYNStr = _snap.TBool_GetYNStr
TBool_GetYesNoStr = _snap.TBool_GetYesNoStr
TBool_Get01Str = _snap.TBool_Get01Str
TBool_IsValStr = _snap.TBool_IsValStr
TBool_GetValFromStr = _snap.TBool_GetValFromStr

class TCh(object):
    r"""Proxy of C++ TCh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TCh_Val_get, _snap.TCh_Val_set, doc=r"""Val : char""")

    def __init__(self, *args):
        r"""
        __init__(TCh self) -> TCh
        __init__(TCh self, char const & _Val) -> TCh

        Parameters
        ----------
        _Val: char const &

        __init__(TCh self, TSIn SIn) -> TCh

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TCh_swiginit(self, _snap.new_TCh(*args))
    Load = _swig_new_instance_method(_snap.TCh_Load)
    Save = _swig_new_instance_method(_snap.TCh_Save)
    __eq__ = _swig_new_instance_method(_snap.TCh___eq__)
    __lt__ = _swig_new_instance_method(_snap.TCh___lt__)
    __call__ = _swig_new_instance_method(_snap.TCh___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TCh_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TCh_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TCh_GetSecHashCd)
    IsHashCh = _swig_new_static_method(_snap.TCh_IsHashCh)
    IsWs = _swig_new_static_method(_snap.TCh_IsWs)
    IsAlpha = _swig_new_static_method(_snap.TCh_IsAlpha)
    IsNum = _swig_new_static_method(_snap.TCh_IsNum)
    IsAlNum = _swig_new_static_method(_snap.TCh_IsAlNum)
    GetNum = _swig_new_static_method(_snap.TCh_GetNum)
    IsHex = _swig_new_static_method(_snap.TCh_IsHex)
    GetHex = _swig_new_static_method(_snap.TCh_GetHex)
    GetHexCh = _swig_new_static_method(_snap.TCh_GetHexCh)
    IsUc = _swig_new_static_method(_snap.TCh_IsUc)
    GetUc = _swig_new_static_method(_snap.TCh_GetUc)
    GetUsFromYuAscii = _swig_new_static_method(_snap.TCh_GetUsFromYuAscii)
    GetStr = _swig_new_static_method(_snap.TCh_GetStr)
    __swig_destroy__ = _snap.delete_TCh

# Register TCh in _snap:
_snap.TCh_swigregister(TCh)
TCh.Mn = _snap.cvar.TCh_Mn
TCh.Mx = _snap.cvar.TCh_Mx
TCh.Vals = _snap.cvar.TCh_Vals
TCh.NullCh = _snap.cvar.TCh_NullCh
TCh.TabCh = _snap.cvar.TCh_TabCh
TCh.LfCh = _snap.cvar.TCh_LfCh
TCh.CrCh = _snap.cvar.TCh_CrCh
TCh.EofCh = _snap.cvar.TCh_EofCh
TCh.HashCh = _snap.cvar.TCh_HashCh
TCh_IsHashCh = _snap.TCh_IsHashCh
TCh_IsWs = _snap.TCh_IsWs
TCh_IsAlpha = _snap.TCh_IsAlpha
TCh_IsNum = _snap.TCh_IsNum
TCh_IsAlNum = _snap.TCh_IsAlNum
TCh_GetNum = _snap.TCh_GetNum
TCh_IsHex = _snap.TCh_IsHex
TCh_GetHex = _snap.TCh_GetHex
TCh_GetHexCh = _snap.TCh_GetHexCh
TCh_IsUc = _snap.TCh_IsUc
TCh_GetUc = _snap.TCh_GetUc
TCh_GetUsFromYuAscii = _snap.TCh_GetUsFromYuAscii
TCh_GetStr = _snap.TCh_GetStr

class TUCh(object):
    r"""Proxy of C++ TUCh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TUCh_Val_get, _snap.TUCh_Val_set, doc=r"""Val : uchar""")

    def __init__(self, *args):
        r"""
        __init__(TUCh self) -> TUCh
        __init__(TUCh self, uchar const & _Val) -> TUCh

        Parameters
        ----------
        _Val: uchar const &

        __init__(TUCh self, TSIn SIn) -> TUCh

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUCh_swiginit(self, _snap.new_TUCh(*args))
    Save = _swig_new_instance_method(_snap.TUCh_Save)
    __eq__ = _swig_new_instance_method(_snap.TUCh___eq__)
    __lt__ = _swig_new_instance_method(_snap.TUCh___lt__)
    __call__ = _swig_new_instance_method(_snap.TUCh___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TUCh_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUCh_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUCh_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TUCh

# Register TUCh in _snap:
_snap.TUCh_swigregister(TUCh)
TUCh.Mn = _snap.cvar.TUCh_Mn
TUCh.Mx = _snap.cvar.TUCh_Mx
TUCh.Vals = _snap.cvar.TUCh_Vals

class TSInt(object):
    r"""Proxy of C++ TSInt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TSInt_Val_get, _snap.TSInt_Val_set, doc=r"""Val : int16""")

    def __init__(self, *args):
        r"""
        __init__(TSInt self) -> TSInt
        __init__(TSInt self, int16 const & _Val) -> TSInt

        Parameters
        ----------
        _Val: int16 const &

        __init__(TSInt self, TSIn SIn) -> TSInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TSInt_swiginit(self, _snap.new_TSInt(*args))
    Load = _swig_new_instance_method(_snap.TSInt_Load)
    Save = _swig_new_instance_method(_snap.TSInt_Save)
    GetPrimHashCd = _swig_new_instance_method(_snap.TSInt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TSInt_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TSInt

# Register TSInt in _snap:
_snap.TSInt_swigregister(TSInt)

class TInt(object):
    r"""Proxy of C++ TInt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TInt_Val_get, _snap.TInt_Val_set, doc=r"""Val : int""")
    Rnd = property(_snap.TInt_Rnd_get, _snap.TInt_Rnd_set, doc=r"""Rnd : TRnd""")

    def __init__(self, *args):
        r"""
        __init__(TInt self) -> TInt
        __init__(TInt self, int const & _Val) -> TInt

        Parameters
        ----------
        _Val: int const &

        __init__(TInt self, TSIn SIn) -> TInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TInt_swiginit(self, _snap.new_TInt(*args))
    Load = _swig_new_instance_method(_snap.TInt_Load)
    Save = _swig_new_instance_method(_snap.TInt_Save)
    __eq__ = _swig_new_instance_method(_snap.TInt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TInt___ne__)
    __lt__ = _swig_new_instance_method(_snap.TInt___lt__)
    __call__ = _swig_new_instance_method(_snap.TInt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TInt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TInt___isub__)
    GetMemUsed = _swig_new_instance_method(_snap.TInt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TInt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TInt_GetSecHashCd)
    Abs = _swig_new_static_method(_snap.TInt_Abs)
    Sign = _swig_new_static_method(_snap.TInt_Sign)
    Swap = _swig_new_static_method(_snap.TInt_Swap)
    GetRnd = _swig_new_static_method(_snap.TInt_GetRnd)
    IsOdd = _swig_new_static_method(_snap.TInt_IsOdd)
    IsEven = _swig_new_static_method(_snap.TInt_IsEven)
    GetMn = _swig_new_static_method(_snap.TInt_GetMn)
    GetMx = _swig_new_static_method(_snap.TInt_GetMx)
    GetInRng = _swig_new_static_method(_snap.TInt_GetInRng)
    GetHexStr = _swig_new_static_method(_snap.TInt_GetHexStr)
    GetKiloStr = _swig_new_static_method(_snap.TInt_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TInt_GetMegaStr)
    SaveFrugalInt = _swig_new_static_method(_snap.TInt_SaveFrugalInt)
    LoadFrugalInt = _swig_new_static_method(_snap.TInt_LoadFrugalInt)
    TestFrugalInt = _swig_new_static_method(_snap.TInt_TestFrugalInt)
    SaveFrugalIntV = _swig_new_static_method(_snap.TInt_SaveFrugalIntV)
    LoadFrugalIntV = _swig_new_static_method(_snap.TInt_LoadFrugalIntV)
    __swig_destroy__ = _snap.delete_TInt

# Register TInt in _snap:
_snap.TInt_swigregister(TInt)
TInt.Mn = _snap.cvar.TInt_Mn
TInt.Mx = _snap.cvar.TInt_Mx
TInt.Kilo = _snap.cvar.TInt_Kilo
TInt.Mega = _snap.cvar.TInt_Mega
TInt.Giga = _snap.cvar.TInt_Giga
TInt_Abs = _snap.TInt_Abs
TInt_Sign = _snap.TInt_Sign
TInt_Swap = _snap.TInt_Swap
TInt_GetRnd = _snap.TInt_GetRnd
TInt_IsOdd = _snap.TInt_IsOdd
TInt_IsEven = _snap.TInt_IsEven
TInt_GetMn = _snap.TInt_GetMn
TInt_GetMx = _snap.TInt_GetMx
TInt_GetInRng = _snap.TInt_GetInRng
TInt_GetHexStr = _snap.TInt_GetHexStr
TInt_GetKiloStr = _snap.TInt_GetKiloStr
TInt_GetMegaStr = _snap.TInt_GetMegaStr
TInt_SaveFrugalInt = _snap.TInt_SaveFrugalInt
TInt_LoadFrugalInt = _snap.TInt_LoadFrugalInt
TInt_TestFrugalInt = _snap.TInt_TestFrugalInt
TInt_SaveFrugalIntV = _snap.TInt_SaveFrugalIntV
TInt_LoadFrugalIntV = _snap.TInt_LoadFrugalIntV

class TUInt(object):
    r"""Proxy of C++ TUInt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TUInt_Val_get, _snap.TUInt_Val_set, doc=r"""Val : uint""")
    Rnd = property(_snap.TUInt_Rnd_get, _snap.TUInt_Rnd_set, doc=r"""Rnd : TRnd""")

    def __init__(self, *args):
        r"""
        __init__(TUInt self) -> TUInt
        __init__(TUInt self, uint const & _Val) -> TUInt

        Parameters
        ----------
        _Val: uint const &

        __init__(TUInt self, TSIn SIn) -> TUInt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt_swiginit(self, _snap.new_TUInt(*args))
    Load = _swig_new_instance_method(_snap.TUInt_Load)
    Save = _swig_new_instance_method(_snap.TUInt_Save)
    __call__ = _swig_new_instance_method(_snap.TUInt___call__)
    __invert__ = _swig_new_instance_method(_snap.TUInt___invert__)
    __iand__ = _swig_new_instance_method(_snap.TUInt___iand__)
    __ior__ = _swig_new_instance_method(_snap.TUInt___ior__)
    __ixor__ = _swig_new_instance_method(_snap.TUInt___ixor__)
    __irshift__ = _swig_new_instance_method(_snap.TUInt___irshift__)
    __ilshift__ = _swig_new_instance_method(_snap.TUInt___ilshift__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt_GetSecHashCd)
    GetRnd = _swig_new_static_method(_snap.TUInt_GetRnd)
    GetStr = _swig_new_static_method(_snap.TUInt_GetStr)
    GetKiloStr = _swig_new_static_method(_snap.TUInt_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TUInt_GetMegaStr)
    JavaUIntToCppUInt = _swig_new_static_method(_snap.TUInt_JavaUIntToCppUInt)
    IsIpStr = _swig_new_static_method(_snap.TUInt_IsIpStr)
    GetUIntFromIpStr = _swig_new_static_method(_snap.TUInt_GetUIntFromIpStr)
    GetStrFromIpUInt = _swig_new_static_method(_snap.TUInt_GetStrFromIpUInt)
    IsIpv6Str = _swig_new_static_method(_snap.TUInt_IsIpv6Str)
    __swig_destroy__ = _snap.delete_TUInt

# Register TUInt in _snap:
_snap.TUInt_swigregister(TUInt)
TUInt.Mn = _snap.cvar.TUInt_Mn
TUInt.Mx = _snap.cvar.TUInt_Mx
TUInt_GetRnd = _snap.TUInt_GetRnd
TUInt_GetStr = _snap.TUInt_GetStr
TUInt_GetKiloStr = _snap.TUInt_GetKiloStr
TUInt_GetMegaStr = _snap.TUInt_GetMegaStr
TUInt_JavaUIntToCppUInt = _snap.TUInt_JavaUIntToCppUInt
TUInt_IsIpStr = _snap.TUInt_IsIpStr
TUInt_GetUIntFromIpStr = _snap.TUInt_GetUIntFromIpStr
TUInt_GetStrFromIpUInt = _snap.TUInt_GetStrFromIpUInt
TUInt_IsIpv6Str = _snap.TUInt_IsIpv6Str

class TUInt64(object):
    r"""Proxy of C++ TUInt64 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TUInt64_Val_get, _snap.TUInt64_Val_set, doc=r"""Val : uint64""")

    def __init__(self, *args):
        r"""
        __init__(TUInt64 self) -> TUInt64
        __init__(TUInt64 self, TUInt64 Int) -> TUInt64

        Parameters
        ----------
        Int: TUInt64 const &

        __init__(TUInt64 self, uint64 const & Int) -> TUInt64

        Parameters
        ----------
        Int: uint64 const &

        __init__(TUInt64 self, uint const & MsVal, uint const & LsVal) -> TUInt64

        Parameters
        ----------
        MsVal: uint const &
        LsVal: uint const &

        __init__(TUInt64 self, void * Pt) -> TUInt64

        Parameters
        ----------
        Pt: void *

        __init__(TUInt64 self, TSIn SIn) -> TUInt64

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUInt64_swiginit(self, _snap.new_TUInt64(*args))
    Load = _swig_new_instance_method(_snap.TUInt64_Load)
    Save = _swig_new_instance_method(_snap.TUInt64_Save)
    __iadd__ = _swig_new_instance_method(_snap.TUInt64___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TUInt64___isub__)
    __imul__ = _swig_new_instance_method(_snap.TUInt64___imul__)
    GetMemUsed = _swig_new_instance_method(_snap.TUInt64_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TUInt64_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TUInt64_GetSecHashCd)
    GetMsVal = _swig_new_instance_method(_snap.TUInt64_GetMsVal)
    GetLsVal = _swig_new_instance_method(_snap.TUInt64_GetLsVal)
    GetStr = _swig_new_static_method(_snap.TUInt64_GetStr)
    GetHexStr = _swig_new_static_method(_snap.TUInt64_GetHexStr)
    GetKiloStr = _swig_new_static_method(_snap.TUInt64_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TUInt64_GetMegaStr)
    __swig_destroy__ = _snap.delete_TUInt64

# Register TUInt64 in _snap:
_snap.TUInt64_swigregister(TUInt64)
TUInt64.Mn = _snap.cvar.TUInt64_Mn
TUInt64.Mx = _snap.cvar.TUInt64_Mx
TUInt64_GetStr = _snap.TUInt64_GetStr
TUInt64_GetHexStr = _snap.TUInt64_GetHexStr
TUInt64_GetKiloStr = _snap.TUInt64_GetKiloStr
TUInt64_GetMegaStr = _snap.TUInt64_GetMegaStr

class TFlt(object):
    r"""Proxy of C++ TFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TFlt_Val_get, _snap.TFlt_Val_set, doc=r"""Val : double""")
    Rnd = property(_snap.TFlt_Rnd_get, _snap.TFlt_Rnd_set, doc=r"""Rnd : TRnd""")

    def __init__(self, *args):
        r"""
        __init__(TFlt self) -> TFlt
        __init__(TFlt self, double const & _Val) -> TFlt

        Parameters
        ----------
        _Val: double const &

        __init__(TFlt self, TSIn SIn) -> TFlt

        Parameters
        ----------
        SIn: TSIn &

        __init__(TFlt self, TSIn SIn, bool const & IsTxt) -> TFlt

        Parameters
        ----------
        SIn: TSIn &
        IsTxt: bool const &

        """
        _snap.TFlt_swiginit(self, _snap.new_TFlt(*args))
    Load = _swig_new_instance_method(_snap.TFlt_Load)
    Save = _swig_new_instance_method(_snap.TFlt_Save)
    __eq__ = _swig_new_instance_method(_snap.TFlt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TFlt___ne__)
    __call__ = _swig_new_instance_method(_snap.TFlt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TFlt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TFlt___isub__)
    __imul__ = _swig_new_instance_method(_snap.TFlt___imul__)

    def __itruediv__(self, *args):
        return _snap.TFlt___itruediv__(self, *args)
    __idiv__ = __itruediv__


    GetMemUsed = _swig_new_instance_method(_snap.TFlt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFlt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFlt_GetSecHashCd)
    Abs = _swig_new_static_method(_snap.TFlt_Abs)
    Sign = _swig_new_static_method(_snap.TFlt_Sign)
    Round = _swig_new_static_method(_snap.TFlt_Round)
    GetRnd = _swig_new_static_method(_snap.TFlt_GetRnd)
    Eq6 = _swig_new_static_method(_snap.TFlt_Eq6)
    GetMn = _swig_new_static_method(_snap.TFlt_GetMn)
    GetMx = _swig_new_static_method(_snap.TFlt_GetMx)
    GetInRng = _swig_new_static_method(_snap.TFlt_GetInRng)
    IsNum = _swig_new_instance_method(_snap.TFlt_IsNum)
    IsNan = _swig_new_instance_method(_snap.TFlt_IsNan)
    GetStr = _swig_new_static_method(_snap.TFlt_GetStr)
    GetPrcStr = _swig_new_static_method(_snap.TFlt_GetPrcStr)
    GetKiloStr = _swig_new_static_method(_snap.TFlt_GetKiloStr)
    GetMegaStr = _swig_new_static_method(_snap.TFlt_GetMegaStr)
    GetGigaStr = _swig_new_static_method(_snap.TFlt_GetGigaStr)
    __swig_destroy__ = _snap.delete_TFlt

# Register TFlt in _snap:
_snap.TFlt_swigregister(TFlt)
TFlt.Mn = _snap.cvar.TFlt_Mn
TFlt.Mx = _snap.cvar.TFlt_Mx
TFlt.NInf = _snap.cvar.TFlt_NInf
TFlt.PInf = _snap.cvar.TFlt_PInf
TFlt.Eps = _snap.cvar.TFlt_Eps
TFlt.EpsHalf = _snap.cvar.TFlt_EpsHalf
TFlt_Abs = _snap.TFlt_Abs
TFlt_Sign = _snap.TFlt_Sign
TFlt_Round = _snap.TFlt_Round
TFlt_GetRnd = _snap.TFlt_GetRnd
TFlt_Eq6 = _snap.TFlt_Eq6
TFlt_GetMn = _snap.TFlt_GetMn
TFlt_GetMx = _snap.TFlt_GetMx
TFlt_GetInRng = _snap.TFlt_GetInRng
TFlt_GetStr = _snap.TFlt_GetStr
TFlt_GetPrcStr = _snap.TFlt_GetPrcStr
TFlt_GetKiloStr = _snap.TFlt_GetKiloStr
TFlt_GetMegaStr = _snap.TFlt_GetMegaStr
TFlt_GetGigaStr = _snap.TFlt_GetGigaStr

class TAscFlt(TFlt):
    r"""Proxy of C++ TAscFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAscFlt self) -> TAscFlt
        __init__(TAscFlt self, double const & Val) -> TAscFlt

        Parameters
        ----------
        Val: double const &

        __init__(TAscFlt self, TSIn SIn) -> TAscFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAscFlt_swiginit(self, _snap.new_TAscFlt(*args))
    Save = _swig_new_instance_method(_snap.TAscFlt_Save)
    __swig_destroy__ = _snap.delete_TAscFlt

# Register TAscFlt in _snap:
_snap.TAscFlt_swigregister(TAscFlt)

class TSFlt(object):
    r"""Proxy of C++ TSFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TSFlt_Val_get, _snap.TSFlt_Val_set, doc=r"""Val : sdouble""")

    def __init__(self, *args):
        r"""
        __init__(TSFlt self) -> TSFlt
        __init__(TSFlt self, sdouble const & _Val) -> TSFlt

        Parameters
        ----------
        _Val: sdouble const &

        __init__(TSFlt self, TSIn SIn) -> TSFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TSFlt_swiginit(self, _snap.new_TSFlt(*args))
    Save = _swig_new_instance_method(_snap.TSFlt_Save)
    __eq__ = _swig_new_instance_method(_snap.TSFlt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TSFlt___ne__)
    __lt__ = _swig_new_instance_method(_snap.TSFlt___lt__)
    __call__ = _swig_new_instance_method(_snap.TSFlt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TSFlt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TSFlt___isub__)
    __imul__ = _swig_new_instance_method(_snap.TSFlt___imul__)

    def __itruediv__(self, *args):
        return _snap.TSFlt___itruediv__(self, *args)
    __idiv__ = __itruediv__


    GetMemUsed = _swig_new_instance_method(_snap.TSFlt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TSFlt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TSFlt_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TSFlt

# Register TSFlt in _snap:
_snap.TSFlt_swigregister(TSFlt)
TSFlt.Mn = _snap.cvar.TSFlt_Mn
TSFlt.Mx = _snap.cvar.TSFlt_Mx

class TLFlt(object):
    r"""Proxy of C++ TLFlt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = property(_snap.TLFlt_Val_get, _snap.TLFlt_Val_set, doc=r"""Val : ldouble""")

    def __init__(self, *args):
        r"""
        __init__(TLFlt self) -> TLFlt
        __init__(TLFlt self, ldouble const & _Val) -> TLFlt

        Parameters
        ----------
        _Val: ldouble const &

        __init__(TLFlt self, TSIn SIn) -> TLFlt

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TLFlt_swiginit(self, _snap.new_TLFlt(*args))
    Save = _swig_new_instance_method(_snap.TLFlt_Save)
    __eq__ = _swig_new_instance_method(_snap.TLFlt___eq__)
    __ne__ = _swig_new_instance_method(_snap.TLFlt___ne__)
    __lt__ = _swig_new_instance_method(_snap.TLFlt___lt__)
    __call__ = _swig_new_instance_method(_snap.TLFlt___call__)
    __iadd__ = _swig_new_instance_method(_snap.TLFlt___iadd__)
    __isub__ = _swig_new_instance_method(_snap.TLFlt___isub__)
    GetMemUsed = _swig_new_instance_method(_snap.TLFlt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TLFlt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TLFlt_GetSecHashCd)
    GetStr = _swig_new_static_method(_snap.TLFlt_GetStr)
    __swig_destroy__ = _snap.delete_TLFlt

# Register TLFlt in _snap:
_snap.TLFlt_swigregister(TLFlt)
TLFlt.Mn = _snap.cvar.TLFlt_Mn
TLFlt.Mx = _snap.cvar.TLFlt_Mx
TLFlt_GetStr = _snap.TLFlt_GetStr

class TFltRect(object):
    r"""Proxy of C++ TFltRect class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MnX = property(_snap.TFltRect_MnX_get, _snap.TFltRect_MnX_set, doc=r"""MnX : TFlt""")
    MnY = property(_snap.TFltRect_MnY_get, _snap.TFltRect_MnY_set, doc=r"""MnY : TFlt""")
    MxX = property(_snap.TFltRect_MxX_get, _snap.TFltRect_MxX_set, doc=r"""MxX : TFlt""")
    MxY = property(_snap.TFltRect_MxY_get, _snap.TFltRect_MxY_set, doc=r"""MxY : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TFltRect self) -> TFltRect
        __init__(TFltRect self, TFltRect FltRect) -> TFltRect

        Parameters
        ----------
        FltRect: TFltRect const &

        __init__(TFltRect self, double const & _MnX, double const & _MnY, double const & _MxX, double const & _MxY) -> TFltRect

        Parameters
        ----------
        _MnX: double const &
        _MnY: double const &
        _MxX: double const &
        _MxY: double const &

        __init__(TFltRect self, TSIn SIn) -> TFltRect

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltRect_swiginit(self, _snap.new_TFltRect(*args))
    Save = _swig_new_instance_method(_snap.TFltRect_Save)
    GetMnX = _swig_new_instance_method(_snap.TFltRect_GetMnX)
    GetMnY = _swig_new_instance_method(_snap.TFltRect_GetMnY)
    GetMxX = _swig_new_instance_method(_snap.TFltRect_GetMxX)
    GetMxY = _swig_new_instance_method(_snap.TFltRect_GetMxY)
    GetXLen = _swig_new_instance_method(_snap.TFltRect_GetXLen)
    GetYLen = _swig_new_instance_method(_snap.TFltRect_GetYLen)
    GetXCenter = _swig_new_instance_method(_snap.TFltRect_GetXCenter)
    GetYCenter = _swig_new_instance_method(_snap.TFltRect_GetYCenter)
    IsXYIn = _swig_new_instance_method(_snap.TFltRect_IsXYIn)
    Intersection = _swig_new_static_method(_snap.TFltRect_Intersection)
    GetStr = _swig_new_instance_method(_snap.TFltRect_GetStr)
    __swig_destroy__ = _snap.delete_TFltRect

# Register TFltRect in _snap:
_snap.TFltRect_swigregister(TFltRect)
TFltRect_Intersection = _snap.TFltRect_Intersection

class TCs(object):
    r"""Proxy of C++ TCs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCs self) -> TCs
        __init__(TCs self, TCs Cs) -> TCs

        Parameters
        ----------
        Cs: TCs const &

        __init__(TCs self, int const & Int) -> TCs

        Parameters
        ----------
        Int: int const &

        """
        _snap.TCs_swiginit(self, _snap.new_TCs(*args))
    __eq__ = _swig_new_instance_method(_snap.TCs___eq__)
    __iadd__ = _swig_new_instance_method(_snap.TCs___iadd__)
    Get = _swig_new_instance_method(_snap.TCs_Get)
    GetCsFromBf = _swig_new_static_method(_snap.TCs_GetCsFromBf)
    __swig_destroy__ = _snap.delete_TCs

# Register TCs in _snap:
_snap.TCs_swigregister(TCs)
TCs_GetCsFromBf = _snap.TCs_GetCsFromBf

class TSOutMnp(object):
    r"""Proxy of C++ TSOutMnp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __call__ = _swig_new_instance_method(_snap.TSOutMnp___call__)
    __swig_destroy__ = _snap.delete_TSOutMnp

# Register TSOutMnp in _snap:
_snap.TSOutMnp_swigregister(TSOutMnp)

class TSBase(object):
    r"""Proxy of C++ TSBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Nm: 'TSStr'):
        r"""
        __init__(TSBase self, TSStr Nm) -> TSBase

        Parameters
        ----------
        Nm: TSStr const &

        """
        _snap.TSBase_swiginit(self, _snap.new_TSBase(Nm))
    __swig_destroy__ = _snap.delete_TSBase
    GetSNm = _swig_new_instance_method(_snap.TSBase_GetSNm)

# Register TSBase in _snap:
_snap.TSBase_swigregister(TSBase)

class TSIn(TSBase):
    r"""Proxy of C++ TSIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSIn
    Eof = _swig_new_instance_method(_snap.TSIn_Eof)
    Len = _swig_new_instance_method(_snap.TSIn_Len)
    GetCh = _swig_new_instance_method(_snap.TSIn_GetCh)
    PeekCh = _swig_new_instance_method(_snap.TSIn_PeekCh)
    GetBf = _swig_new_instance_method(_snap.TSIn_GetBf)
    GetNextLnBf = _swig_new_instance_method(_snap.TSIn_GetNextLnBf)
    Reset = _swig_new_instance_method(_snap.TSIn_Reset)
    IsFastMode = _swig_new_instance_method(_snap.TSIn_IsFastMode)
    SetFastMode = _swig_new_instance_method(_snap.TSIn_SetFastMode)
    LoadCs = _swig_new_instance_method(_snap.TSIn_LoadCs)
    LoadBf = _swig_new_instance_method(_snap.TSIn_LoadBf)
    LoadNewBf = _swig_new_instance_method(_snap.TSIn_LoadNewBf)
    Load = _swig_new_instance_method(_snap.TSIn_Load)
    __rshift__ = _swig_new_instance_method(_snap.TSIn___rshift__)
    GetNextLn = _swig_new_instance_method(_snap.TSIn_GetNextLn)

# Register TSIn in _snap:
_snap.TSIn_swigregister(TSIn)
TSIn.StdIn = _snap.cvar.TSIn_StdIn

class TSOut(TSBase):
    r"""Proxy of C++ TSOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSOut
    EnableLnTrunc = _swig_new_instance_method(_snap.TSOut_EnableLnTrunc)
    DisableLnTrunc = _swig_new_instance_method(_snap.TSOut_DisableLnTrunc)
    PutBf = _swig_new_instance_method(_snap.TSOut_PutBf)
    Flush = _swig_new_instance_method(_snap.TSOut_Flush)
    GetFileId = _swig_new_instance_method(_snap.TSOut_GetFileId)
    PutMem = _swig_new_instance_method(_snap.TSOut_PutMem)
    PutCh = _swig_new_instance_method(_snap.TSOut_PutCh)
    PutBool = _swig_new_instance_method(_snap.TSOut_PutBool)
    PutInt = _swig_new_instance_method(_snap.TSOut_PutInt)
    PutUInt = _swig_new_instance_method(_snap.TSOut_PutUInt)
    PutFlt = _swig_new_instance_method(_snap.TSOut_PutFlt)
    PutStr = _swig_new_instance_method(_snap.TSOut_PutStr)
    PutStrLn = _swig_new_instance_method(_snap.TSOut_PutStrLn)
    PutStrFmt = _swig_new_instance_method(_snap.TSOut_PutStrFmt)
    PutStrFmtLn = _swig_new_instance_method(_snap.TSOut_PutStrFmtLn)
    PutIndent = _swig_new_instance_method(_snap.TSOut_PutIndent)
    PutLn = _swig_new_instance_method(_snap.TSOut_PutLn)
    PutDosLn = _swig_new_instance_method(_snap.TSOut_PutDosLn)
    PutSep = _swig_new_instance_method(_snap.TSOut_PutSep)
    PutSepLn = _swig_new_instance_method(_snap.TSOut_PutSepLn)
    SaveCs = _swig_new_instance_method(_snap.TSOut_SaveCs)
    SaveBf = _swig_new_instance_method(_snap.TSOut_SaveBf)
    Save = _swig_new_instance_method(_snap.TSOut_Save)
    __lshift__ = _swig_new_instance_method(_snap.TSOut___lshift__)

# Register TSOut in _snap:
_snap.TSOut_swigregister(TSOut)
TSOut.StdOut = _snap.cvar.TSOut_StdOut

class TSInOut(TSIn, TSOut):
    r"""Proxy of C++ TSInOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSInOut
    SetPos = _swig_new_instance_method(_snap.TSInOut_SetPos)
    MovePos = _swig_new_instance_method(_snap.TSInOut_MovePos)
    GetPos = _swig_new_instance_method(_snap.TSInOut_GetPos)
    GetSize = _swig_new_instance_method(_snap.TSInOut_GetSize)
    Clr = _swig_new_instance_method(_snap.TSInOut_Clr)

# Register TSInOut in _snap:
_snap.TSInOut_swigregister(TSInOut)

class TStdIn(TSIn):
    r"""Proxy of C++ TStdIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdIn self) -> TStdIn"""
        _snap.TStdIn_swiginit(self, _snap.new_TStdIn())
    New = _swig_new_static_method(_snap.TStdIn_New)
    __swig_destroy__ = _snap.delete_TStdIn

# Register TStdIn in _snap:
_snap.TStdIn_swigregister(TStdIn)
TStdIn_New = _snap.TStdIn_New

class TStdOut(TSOut):
    r"""Proxy of C++ TStdOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdOut self) -> TStdOut"""
        _snap.TStdOut_swiginit(self, _snap.new_TStdOut())
    New = _swig_new_static_method(_snap.TStdOut_New)
    __swig_destroy__ = _snap.delete_TStdOut

# Register TStdOut in _snap:
_snap.TStdOut_swigregister(TStdOut)
TStdOut_New = _snap.TStdOut_New

class TFIn(TSIn):
    r"""Proxy of C++ TFIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFIn self, TStr FNm) -> TFIn

        Parameters
        ----------
        FNm: TStr const &

        __init__(TFIn self, TStr FNm, bool & OpenedP) -> TFIn

        Parameters
        ----------
        FNm: TStr const &
        OpenedP: bool &

        """
        _snap.TFIn_swiginit(self, _snap.new_TFIn(*args))
    New = _swig_new_static_method(_snap.TFIn_New)
    __swig_destroy__ = _snap.delete_TFIn

# Register TFIn in _snap:
_snap.TFIn_swigregister(TFIn)
TFIn_New = _snap.TFIn_New

class TFOut(TSOut):
    r"""Proxy of C++ TFOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TFOut self, TStr _FNm, bool const & Append=False) -> TFOut

        Parameters
        ----------
        _FNm: TStr const &
        Append: bool const &

        __init__(TFOut self, TStr _FNm, bool const & Append, bool & OpenedP) -> TFOut

        Parameters
        ----------
        _FNm: TStr const &
        Append: bool const &
        OpenedP: bool &

        """
        _snap.TFOut_swiginit(self, _snap.new_TFOut(*args))
    New = _swig_new_static_method(_snap.TFOut_New)
    __swig_destroy__ = _snap.delete_TFOut

# Register TFOut in _snap:
_snap.TFOut_swigregister(TFOut)
TFOut_New = _snap.TFOut_New

faUndef = _snap.faUndef

faCreate = _snap.faCreate

faUpdate = _snap.faUpdate

faAppend = _snap.faAppend

faRdOnly = _snap.faRdOnly

faRestore = _snap.faRestore

class TShMIn(TSIn):
    r"""Proxy of C++ TShMIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TShMIn self, TStr Str) -> TShMIn

        Parameters
        ----------
        Str: TStr const &

        __init__(TShMIn self, void * _Bf, TSize const & _BfL) -> TShMIn

        Parameters
        ----------
        _Bf: void *
        _BfL: TSize const &

        """
        _snap.TShMIn_swiginit(self, _snap.new_TShMIn(*args))
    __swig_destroy__ = _snap.delete_TShMIn
    getCursor = _swig_new_instance_method(_snap.TShMIn_getCursor)
    LoadAndAdvance = _swig_new_instance_method(_snap.TShMIn_LoadAndAdvance)
    AdvanceCursor = _swig_new_instance_method(_snap.TShMIn_AdvanceCursor)
    CloseMapping = _swig_new_instance_method(_snap.TShMIn_CloseMapping)

# Register TShMIn in _snap:
_snap.TShMIn_swigregister(TShMIn)

class TMIn(TSIn):
    r"""Proxy of C++ TMIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMIn self, void const * _Bf, uint64 const & _BfL, bool const & TakeBf=False) -> TMIn

        Parameters
        ----------
        _Bf: void const *
        _BfL: uint64 const &
        TakeBf: bool const &

        __init__(TMIn self, TSIn SIn) -> TMIn

        Parameters
        ----------
        SIn: TSIn &

        __init__(TMIn self, char const * CStr) -> TMIn

        Parameters
        ----------
        CStr: char const *

        __init__(TMIn self, TStr Str, bool FromFile) -> TMIn

        Parameters
        ----------
        Str: TStr const &
        FromFile: bool

        __init__(TMIn self, TChA ChA) -> TMIn

        Parameters
        ----------
        ChA: TChA const &

        """
        _snap.TMIn_swiginit(self, _snap.new_TMIn(*args))
    New = _swig_new_static_method(_snap.TMIn_New)
    __swig_destroy__ = _snap.delete_TMIn
    GetBfC = _swig_new_instance_method(_snap.TMIn_GetBfC)
    GetBfL = _swig_new_instance_method(_snap.TMIn_GetBfL)
    SetBfC = _swig_new_instance_method(_snap.TMIn_SetBfC)
    CountNewLinesInRange = _swig_new_instance_method(_snap.TMIn_CountNewLinesInRange)
    GetLineStartPos = _swig_new_instance_method(_snap.TMIn_GetLineStartPos)
    GetLineEndPos = _swig_new_instance_method(_snap.TMIn_GetLineEndPos)
    GetLine = _swig_new_instance_method(_snap.TMIn_GetLine)
    SkipCommentLines = _swig_new_instance_method(_snap.TMIn_SkipCommentLines)
    GetBfAddr = _swig_new_instance_method(_snap.TMIn_GetBfAddr)

# Register TMIn in _snap:
_snap.TMIn_swigregister(TMIn)
TMIn_New = _snap.TMIn_New

class TMOut(TSOut):
    r"""Proxy of C++ TMOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.TMOut_New)

    def __init__(self, *args):
        r"""
        __init__(TMOut self, int const & _MxBfL=1024) -> TMOut

        Parameters
        ----------
        _MxBfL: int const &

        __init__(TMOut self, char * _Bf, int const & _MxBfL) -> TMOut

        Parameters
        ----------
        _Bf: char *
        _MxBfL: int const &

        """
        _snap.TMOut_swiginit(self, _snap.new_TMOut(*args))
    __swig_destroy__ = _snap.delete_TMOut
    AppendBf = _swig_new_instance_method(_snap.TMOut_AppendBf)
    Len = _swig_new_instance_method(_snap.TMOut_Len)
    Clr = _swig_new_instance_method(_snap.TMOut_Clr)
    GetCh = _swig_new_instance_method(_snap.TMOut_GetCh)
    GetAsStr = _swig_new_instance_method(_snap.TMOut_GetAsStr)
    CutBf = _swig_new_instance_method(_snap.TMOut_CutBf)
    GetSIn = _swig_new_instance_method(_snap.TMOut_GetSIn)
    GetBfAddr = _swig_new_instance_method(_snap.TMOut_GetBfAddr)
    IsCrLfLn = _swig_new_instance_method(_snap.TMOut_IsCrLfLn)
    GetCrLfLn = _swig_new_instance_method(_snap.TMOut_GetCrLfLn)
    IsEolnLn = _swig_new_instance_method(_snap.TMOut_IsEolnLn)
    GetEolnLn = _swig_new_instance_method(_snap.TMOut_GetEolnLn)
    MkEolnLn = _swig_new_instance_method(_snap.TMOut_MkEolnLn)

# Register TMOut in _snap:
_snap.TMOut_swigregister(TMOut)
TMOut_New = _snap.TMOut_New

class TChRet(object):
    r"""Proxy of C++ TChRet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _SIn: 'PSIn const &', _EofCh: 'char const &'=0):
        r"""
        __init__(TChRet self, PSIn const & _SIn, char const & _EofCh=0) -> TChRet

        Parameters
        ----------
        _SIn: PSIn const &
        _EofCh: char const &

        """
        _snap.TChRet_swiginit(self, _snap.new_TChRet(_SIn, _EofCh))
    Eof = _swig_new_instance_method(_snap.TChRet_Eof)
    GetCh = _swig_new_instance_method(_snap.TChRet_GetCh)
    __call__ = _swig_new_instance_method(_snap.TChRet___call__)
    __swig_destroy__ = _snap.delete_TChRet

# Register TChRet in _snap:
_snap.TChRet_swigregister(TChRet)

class TLnRet(object):
    r"""Proxy of C++ TLnRet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _SIn: 'PSIn const &'):
        r"""
        __init__(TLnRet self, PSIn const & _SIn) -> TLnRet

        Parameters
        ----------
        _SIn: PSIn const &

        """
        _snap.TLnRet_swiginit(self, _snap.new_TLnRet(_SIn))
    NextLn = _swig_new_instance_method(_snap.TLnRet_NextLn)
    __swig_destroy__ = _snap.delete_TLnRet

# Register TLnRet in _snap:
_snap.TLnRet_swigregister(TLnRet)

class TFile(object):
    r"""Proxy of C++ TFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Exists = _swig_new_static_method(_snap.TFile_Exists)
    Del = _swig_new_static_method(_snap.TFile_Del)
    DelWc = _swig_new_static_method(_snap.TFile_DelWc)
    Rename = _swig_new_static_method(_snap.TFile_Rename)
    GetUniqueFNm = _swig_new_static_method(_snap.TFile_GetUniqueFNm)

    def __init__(self):
        r"""__init__(TFile self) -> TFile"""
        _snap.TFile_swiginit(self, _snap.new_TFile())
    __swig_destroy__ = _snap.delete_TFile

# Register TFile in _snap:
_snap.TFile_swigregister(TFile)
TFile.TxtFExt = _snap.cvar.TFile_TxtFExt
TFile.HtmlFExt = _snap.cvar.TFile_HtmlFExt
TFile.HtmFExt = _snap.cvar.TFile_HtmFExt
TFile.GifFExt = _snap.cvar.TFile_GifFExt
TFile.JarFExt = _snap.cvar.TFile_JarFExt
TFile_Exists = _snap.TFile_Exists
TFile_Del = _snap.TFile_Del
TFile_DelWc = _snap.TFile_DelWc
TFile_Rename = _snap.TFile_Rename
TFile_GetUniqueFNm = _snap.TFile_GetUniqueFNm

InfoNotify = _snap.InfoNotify
WarnNotify = _snap.WarnNotify
ErrNotify = _snap.ErrNotify
StatNotify = _snap.StatNotify
ntInfo = _snap.ntInfo

ntWarn = _snap.ntWarn

ntErr = _snap.ntErr

ntStat = _snap.ntStat

class TNotify(object):
    r"""Proxy of C++ TNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TNotify self) -> TNotify"""
        _snap.TNotify_swiginit(self, _snap.new_TNotify())
    __swig_destroy__ = _snap.delete_TNotify
    OnNotifyFmt = _swig_new_instance_method(_snap.TNotify_OnNotifyFmt)
    OnStatusFmt = _swig_new_instance_method(_snap.TNotify_OnStatusFmt)
    OnLnFmt = _swig_new_instance_method(_snap.TNotify_OnLnFmt)
    OnTxtFmt = _swig_new_instance_method(_snap.TNotify_OnTxtFmt)
    GetTypeStr = _swig_new_static_method(_snap.TNotify_GetTypeStr)
    OnNotify = _swig_new_static_method(_snap.TNotify_OnNotify)
    OnStatus = _swig_new_static_method(_snap.TNotify_OnStatus)
    OnLn = _swig_new_static_method(_snap.TNotify_OnLn)
    OnTxt = _swig_new_static_method(_snap.TNotify_OnTxt)
    DfOnNotify = _swig_new_static_method(_snap.TNotify_DfOnNotify)

# Register TNotify in _snap:
_snap.TNotify_swigregister(TNotify)
TNotify_GetTypeStr = _snap.TNotify_GetTypeStr
TNotify_OnNotify = _snap.TNotify_OnNotify
TNotify_OnStatus = _snap.TNotify_OnStatus
TNotify_OnLn = _snap.TNotify_OnLn
TNotify_OnTxt = _snap.TNotify_OnTxt
TNotify_DfOnNotify = _snap.TNotify_DfOnNotify
TNotify.NullNotify = _snap.cvar.TNotify_NullNotify
TNotify.StdNotify = _snap.cvar.TNotify_StdNotify
TNotify.StdErrNotify = _snap.cvar.TNotify_StdErrNotify

class TNullNotify(TNotify):
    r"""Proxy of C++ TNullNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TNullNotify self) -> TNullNotify"""
        _snap.TNullNotify_swiginit(self, _snap.new_TNullNotify())
    New = _swig_new_static_method(_snap.TNullNotify_New)
    __swig_destroy__ = _snap.delete_TNullNotify

# Register TNullNotify in _snap:
_snap.TNullNotify_swigregister(TNullNotify)
TNullNotify_New = _snap.TNullNotify_New

class TCallbackNotify(TNotify):
    r"""Proxy of C++ TCallbackNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _CallbackF: 'TCallbackF const &'):
        r"""
        __init__(TCallbackNotify self, TCallbackF const & _CallbackF) -> TCallbackNotify

        Parameters
        ----------
        _CallbackF: TCallbackF const &

        """
        _snap.TCallbackNotify_swiginit(self, _snap.new_TCallbackNotify(_CallbackF))
    New = _swig_new_static_method(_snap.TCallbackNotify_New)
    __swig_destroy__ = _snap.delete_TCallbackNotify

# Register TCallbackNotify in _snap:
_snap.TCallbackNotify_swigregister(TCallbackNotify)
TCallbackNotify_New = _snap.TCallbackNotify_New

class TNativeCallbackNotify(TNotify):
    r"""Proxy of C++ TNativeCallbackNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _CallbackF: 'TNativeCallbackF const &'):
        r"""
        __init__(TNativeCallbackNotify self, TNativeCallbackF const & _CallbackF) -> TNativeCallbackNotify

        Parameters
        ----------
        _CallbackF: TNativeCallbackF const &

        """
        _snap.TNativeCallbackNotify_swiginit(self, _snap.new_TNativeCallbackNotify(_CallbackF))
    New = _swig_new_static_method(_snap.TNativeCallbackNotify_New)
    __swig_destroy__ = _snap.delete_TNativeCallbackNotify

# Register TNativeCallbackNotify in _snap:
_snap.TNativeCallbackNotify_swigregister(TNativeCallbackNotify)
TNativeCallbackNotify_New = _snap.TNativeCallbackNotify_New

class TStdNotify(TNotify):
    r"""Proxy of C++ TStdNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdNotify self) -> TStdNotify"""
        _snap.TStdNotify_swiginit(self, _snap.new_TStdNotify())
    New = _swig_new_static_method(_snap.TStdNotify_New)
    __swig_destroy__ = _snap.delete_TStdNotify

# Register TStdNotify in _snap:
_snap.TStdNotify_swigregister(TStdNotify)
TStdNotify_New = _snap.TStdNotify_New

class TStdErrNotify(TNotify):
    r"""Proxy of C++ TStdErrNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TStdErrNotify self) -> TStdErrNotify"""
        _snap.TStdErrNotify_swiginit(self, _snap.new_TStdErrNotify())
    New = _swig_new_static_method(_snap.TStdErrNotify_New)
    __swig_destroy__ = _snap.delete_TStdErrNotify

# Register TStdErrNotify in _snap:
_snap.TStdErrNotify_swigregister(TStdErrNotify)
TStdErrNotify_New = _snap.TStdErrNotify_New

class TLogNotify(TNotify):
    r"""Proxy of C++ TLogNotify class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _Notify: 'PNotify const &'):
        r"""
        __init__(TLogNotify self, PNotify const & _Notify) -> TLogNotify

        Parameters
        ----------
        _Notify: PNotify const &

        """
        _snap.TLogNotify_swiginit(self, _snap.new_TLogNotify(_Notify))
    New = _swig_new_static_method(_snap.TLogNotify_New)
    __swig_destroy__ = _snap.delete_TLogNotify

# Register TLogNotify in _snap:
_snap.TLogNotify_swigregister(TLogNotify)
TLogNotify_New = _snap.TLogNotify_New

class TExcept(object):
    r"""Proxy of C++ TExcept class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TExcept self, TStr _MsgStr) -> TExcept

        Parameters
        ----------
        _MsgStr: TStr const &

        __init__(TExcept self, TStr _MsgStr, TStr _LocStr) -> TExcept

        Parameters
        ----------
        _MsgStr: TStr const &
        _LocStr: TStr const &

        """
        _snap.TExcept_swiginit(self, _snap.new_TExcept(*args))
    New = _swig_new_static_method(_snap.TExcept_New)
    __swig_destroy__ = _snap.delete_TExcept
    GetMsgStr = _swig_new_instance_method(_snap.TExcept_GetMsgStr)
    GetLocStr = _swig_new_instance_method(_snap.TExcept_GetLocStr)
    GetStr = _swig_new_instance_method(_snap.TExcept_GetStr)
    OnExceptF = property(_snap.TExcept_OnExceptF_get, _snap.TExcept_OnExceptF_set, doc=r"""OnExceptF : TExcept::TOnExceptF""")
    IsOnExceptF = _swig_new_static_method(_snap.TExcept_IsOnExceptF)
    PutOnExceptF = _swig_new_static_method(_snap.TExcept_PutOnExceptF)
    GetOnExceptF = _swig_new_static_method(_snap.TExcept_GetOnExceptF)
    Throw = _swig_new_static_method(_snap.TExcept_Throw)
    ThrowFull = _swig_new_static_method(_snap.TExcept_ThrowFull)

# Register TExcept in _snap:
_snap.TExcept_swigregister(TExcept)
TExcept_New = _snap.TExcept_New
TExcept_IsOnExceptF = _snap.TExcept_IsOnExceptF
TExcept_PutOnExceptF = _snap.TExcept_PutOnExceptF
TExcept_GetOnExceptF = _snap.TExcept_GetOnExceptF
TExcept_Throw = _snap.TExcept_Throw
TExcept_ThrowFull = _snap.TExcept_ThrowFull

gfUndef = _snap.gfUndef

gfDirected = _snap.gfDirected

gfMultiGraph = _snap.gfMultiGraph

gfNodeDat = _snap.gfNodeDat

gfEdgeDat = _snap.gfEdgeDat

gfSources = _snap.gfSources

gfBipart = _snap.gfBipart

gfMx = _snap.gfMx

atInt = _snap.atInt

atFlt = _snap.atFlt

atStr = _snap.atStr

GetFlagStr = _snap.GetFlagStr
class TUnionFind(object):
    r"""Proxy of C++ TUnionFind class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Parent = _swig_new_instance_method(_snap.TUnionFind_Parent)
    Rank = _swig_new_instance_method(_snap.TUnionFind_Rank)

    def __init__(self, *args):
        r"""
        __init__(TUnionFind self) -> TUnionFind
        __init__(TUnionFind self, int const & ExpectKeys) -> TUnionFind

        Parameters
        ----------
        ExpectKeys: int const &

        __init__(TUnionFind self, TUnionFind UnionFind) -> TUnionFind

        Parameters
        ----------
        UnionFind: TUnionFind const &

        """
        _snap.TUnionFind_swiginit(self, _snap.new_TUnionFind(*args))
    Len = _swig_new_instance_method(_snap.TUnionFind_Len)
    IsKey = _swig_new_instance_method(_snap.TUnionFind_IsKey)
    GetKeyI = _swig_new_instance_method(_snap.TUnionFind_GetKeyI)
    Find = _swig_new_instance_method(_snap.TUnionFind_Find)
    Add = _swig_new_instance_method(_snap.TUnionFind_Add)
    Union = _swig_new_instance_method(_snap.TUnionFind_Union)
    IsSameSet = _swig_new_instance_method(_snap.TUnionFind_IsSameSet)
    Dump = _swig_new_instance_method(_snap.TUnionFind_Dump)
    __swig_destroy__ = _snap.delete_TUnionFind

# Register TUnionFind in _snap:
_snap.TUnionFind_swigregister(TUnionFind)

class TGUtil(object):
    r"""Proxy of C++ TGUtil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetCdf = _swig_new_static_method(_snap.TGUtil_GetCdf)
    GetCCdf = _swig_new_static_method(_snap.TGUtil_GetCCdf)
    GetPdf = _swig_new_static_method(_snap.TGUtil_GetPdf)
    Normalize = _swig_new_static_method(_snap.TGUtil_Normalize)
    MakeExpBins = _swig_new_static_method(_snap.TGUtil_MakeExpBins)

    def __init__(self):
        r"""__init__(TGUtil self) -> TGUtil"""
        _snap.TGUtil_swiginit(self, _snap.new_TGUtil())
    __swig_destroy__ = _snap.delete_TGUtil

# Register TGUtil in _snap:
_snap.TGUtil_swigregister(TGUtil)
TGUtil_GetCdf = _snap.TGUtil_GetCdf
TGUtil_GetCCdf = _snap.TGUtil_GetCCdf
TGUtil_GetPdf = _snap.TGUtil_GetPdf
TGUtil_Normalize = _snap.TGUtil_Normalize
TGUtil_MakeExpBins = _snap.TGUtil_MakeExpBins

class TStrUtil(object):
    r"""Proxy of C++ TStrUtil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetXmlTagVal = _swig_new_static_method(_snap.TStrUtil_GetXmlTagVal)
    GetXmlTagNmVal = _swig_new_static_method(_snap.TStrUtil_GetXmlTagNmVal)
    GetXmlTagNmVal2 = _swig_new_static_method(_snap.TStrUtil_GetXmlTagNmVal2)
    GetDomNm = _swig_new_static_method(_snap.TStrUtil_GetDomNm)
    GetDomNm2 = _swig_new_static_method(_snap.TStrUtil_GetDomNm2)
    GetWebsiteNm = _swig_new_static_method(_snap.TStrUtil_GetWebsiteNm)
    GetNormalizedUrl = _swig_new_static_method(_snap.TStrUtil_GetNormalizedUrl)
    StripEnd = _swig_new_static_method(_snap.TStrUtil_StripEnd)
    GetShorStr = _swig_new_static_method(_snap.TStrUtil_GetShorStr)
    GetCleanStr = _swig_new_static_method(_snap.TStrUtil_GetCleanStr)
    GetCleanWrdStr = _swig_new_static_method(_snap.TStrUtil_GetCleanWrdStr)
    CountWords = _swig_new_static_method(_snap.TStrUtil_CountWords)
    SplitWords = _swig_new_static_method(_snap.TStrUtil_SplitWords)
    SplitOnCh = _swig_new_static_method(_snap.TStrUtil_SplitOnCh)
    SplitLines = _swig_new_static_method(_snap.TStrUtil_SplitLines)
    SplitSentences = _swig_new_static_method(_snap.TStrUtil_SplitSentences)
    RemoveHtmlTags = _swig_new_static_method(_snap.TStrUtil_RemoveHtmlTags)
    IsLatinStr = _swig_new_static_method(_snap.TStrUtil_IsLatinStr)
    GetWIdV = _swig_new_static_method(_snap.TStrUtil_GetWIdV)
    GetAddWIdV = _swig_new_static_method(_snap.TStrUtil_GetAddWIdV)
    GetTmFromStr = _swig_new_static_method(_snap.TStrUtil_GetTmFromStr)
    GetStdName = _swig_new_static_method(_snap.TStrUtil_GetStdName)
    GetStdNameV = _swig_new_static_method(_snap.TStrUtil_GetStdNameV)

    def __init__(self):
        r"""__init__(TStrUtil self) -> TStrUtil"""
        _snap.TStrUtil_swiginit(self, _snap.new_TStrUtil())
    __swig_destroy__ = _snap.delete_TStrUtil

# Register TStrUtil in _snap:
_snap.TStrUtil_swigregister(TStrUtil)
TStrUtil_GetXmlTagVal = _snap.TStrUtil_GetXmlTagVal
TStrUtil_GetXmlTagNmVal = _snap.TStrUtil_GetXmlTagNmVal
TStrUtil_GetXmlTagNmVal2 = _snap.TStrUtil_GetXmlTagNmVal2
TStrUtil_GetDomNm = _snap.TStrUtil_GetDomNm
TStrUtil_GetDomNm2 = _snap.TStrUtil_GetDomNm2
TStrUtil_GetWebsiteNm = _snap.TStrUtil_GetWebsiteNm
TStrUtil_GetNormalizedUrl = _snap.TStrUtil_GetNormalizedUrl
TStrUtil_StripEnd = _snap.TStrUtil_StripEnd
TStrUtil_GetShorStr = _snap.TStrUtil_GetShorStr
TStrUtil_GetCleanStr = _snap.TStrUtil_GetCleanStr
TStrUtil_GetCleanWrdStr = _snap.TStrUtil_GetCleanWrdStr
TStrUtil_CountWords = _snap.TStrUtil_CountWords
TStrUtil_SplitWords = _snap.TStrUtil_SplitWords
TStrUtil_SplitOnCh = _snap.TStrUtil_SplitOnCh
TStrUtil_SplitLines = _snap.TStrUtil_SplitLines
TStrUtil_SplitSentences = _snap.TStrUtil_SplitSentences
TStrUtil_RemoveHtmlTags = _snap.TStrUtil_RemoveHtmlTags
TStrUtil_IsLatinStr = _snap.TStrUtil_IsLatinStr
TStrUtil_GetWIdV = _snap.TStrUtil_GetWIdV
TStrUtil_GetAddWIdV = _snap.TStrUtil_GetAddWIdV
TStrUtil_GetTmFromStr = _snap.TStrUtil_GetTmFromStr
TStrUtil_GetStdName = _snap.TStrUtil_GetStdName
TStrUtil_GetStdNameV = _snap.TStrUtil_GetStdNameV

class TStopwatch(object):
    r"""Proxy of C++ TStopwatch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LoadTables = _snap.TStopwatch_LoadTables
    
    Preprocess = _snap.TStopwatch_Preprocess
    
    ConstructGraph = _snap.TStopwatch_ConstructGraph
    
    Compute = _snap.TStopwatch_Compute
    
    Postprocess = _snap.TStopwatch_Postprocess
    
    StoreOutputs = _snap.TStopwatch_StoreOutputs
    
    AllocateColumnCopies = _snap.TStopwatch_AllocateColumnCopies
    
    CopyColumns = _snap.TStopwatch_CopyColumns
    
    Sort = _snap.TStopwatch_Sort
    
    Group = _snap.TStopwatch_Group
    
    MergeNeighborhoods = _snap.TStopwatch_MergeNeighborhoods
    
    AddNeighborhoods = _snap.TStopwatch_AddNeighborhoods
    
    AddEdges = _snap.TStopwatch_AddEdges
    
    Sort2 = _snap.TStopwatch_Sort2
    
    ComputeOffset = _snap.TStopwatch_ComputeOffset
    
    ComputeETypes = _snap.TStopwatch_ComputeETypes
    
    EstimateSizes = _snap.TStopwatch_EstimateSizes
    
    InitGraph = _snap.TStopwatch_InitGraph
    
    ExtractNbrETypes = _snap.TStopwatch_ExtractNbrETypes
    
    CopyNodes = _snap.TStopwatch_CopyNodes
    
    PopulateGraph = _snap.TStopwatch_PopulateGraph
    
    ExtractEdges = _snap.TStopwatch_ExtractEdges
    
    BuildSubgraph = _snap.TStopwatch_BuildSubgraph
    
    NEXPS = _snap.TStopwatch_NEXPS
    
    GetInstance = _swig_new_static_method(_snap.TStopwatch_GetInstance)
    Start = _swig_new_instance_method(_snap.TStopwatch_Start)
    Stop = _swig_new_instance_method(_snap.TStopwatch_Stop)
    Cnt = _swig_new_instance_method(_snap.TStopwatch_Cnt)
    Sum = _swig_new_instance_method(_snap.TStopwatch_Sum)
    Avg = _swig_new_instance_method(_snap.TStopwatch_Avg)
    Max = _swig_new_instance_method(_snap.TStopwatch_Max)
    Min = _swig_new_instance_method(_snap.TStopwatch_Min)
    __swig_destroy__ = _snap.delete_TStopwatch

# Register TStopwatch in _snap:
_snap.TStopwatch_swigregister(TStopwatch)
TStopwatch_GetInstance = _snap.TStopwatch_GetInstance

class TBigStrPool(object):
    r"""Proxy of C++ TBigStrPool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TBigStrPool self, TSize MxBfLen=0, uint _GrowBy=16*1024*1024) -> TBigStrPool

        Parameters
        ----------
        MxBfLen: TSize
        _GrowBy: uint

        __init__(TBigStrPool self, TSIn SIn, bool LoadCompact=True) -> TBigStrPool

        Parameters
        ----------
        SIn: TSIn &
        LoadCompact: bool

        __init__(TBigStrPool self, TBigStrPool Pool) -> TBigStrPool

        Parameters
        ----------
        Pool: TBigStrPool const &

        """
        _snap.TBigStrPool_swiginit(self, _snap.new_TBigStrPool(*args))
    __swig_destroy__ = _snap.delete_TBigStrPool
    New = _swig_new_static_method(_snap.TBigStrPool_New)
    Load = _swig_new_static_method(_snap.TBigStrPool_Load)
    LoadShM = _swig_new_static_method(_snap.TBigStrPool_LoadShM)
    Save = _swig_new_instance_method(_snap.TBigStrPool_Save)
    GetStrs = _swig_new_instance_method(_snap.TBigStrPool_GetStrs)
    Len = _swig_new_instance_method(_snap.TBigStrPool_Len)
    Size = _swig_new_instance_method(_snap.TBigStrPool_Size)
    Empty = _swig_new_instance_method(_snap.TBigStrPool_Empty)
    __call__ = _swig_new_instance_method(_snap.TBigStrPool___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TBigStrPool_GetMemUsed)
    AddStr = _swig_new_instance_method(_snap.TBigStrPool_AddStr)
    GetStr = _swig_new_instance_method(_snap.TBigStrPool_GetStr)
    GetCStr = _swig_new_instance_method(_snap.TBigStrPool_GetCStr)
    GetStrFromOffset = _swig_new_instance_method(_snap.TBigStrPool_GetStrFromOffset)
    GetCStrFromOffset = _swig_new_instance_method(_snap.TBigStrPool_GetCStrFromOffset)
    Clr = _swig_new_instance_method(_snap.TBigStrPool_Clr)
    Cmp = _swig_new_instance_method(_snap.TBigStrPool_Cmp)
    GetPrimHashCd = _swig_new_instance_method(_snap.TBigStrPool_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TBigStrPool_GetSecHashCd)

# Register TBigStrPool in _snap:
_snap.TBigStrPool_swigregister(TBigStrPool)
TBigStrPool_New = _snap.TBigStrPool_New
TBigStrPool_Load = _snap.TBigStrPool_Load
TBigStrPool_LoadShM = _snap.TBigStrPool_LoadShM

class TStrHashF_OldGLib(object):
    r"""Proxy of C++ TStrHashF_OldGLib class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetPrimHashCd = _swig_new_static_method(_snap.TStrHashF_OldGLib_GetPrimHashCd)
    GetSecHashCd = _swig_new_static_method(_snap.TStrHashF_OldGLib_GetSecHashCd)

    def __init__(self):
        r"""__init__(TStrHashF_OldGLib self) -> TStrHashF_OldGLib"""
        _snap.TStrHashF_OldGLib_swiginit(self, _snap.new_TStrHashF_OldGLib())
    __swig_destroy__ = _snap.delete_TStrHashF_OldGLib

# Register TStrHashF_OldGLib in _snap:
_snap.TStrHashF_OldGLib_swigregister(TStrHashF_OldGLib)
TStrHashF_OldGLib_GetPrimHashCd = _snap.TStrHashF_OldGLib_GetPrimHashCd
TStrHashF_OldGLib_GetSecHashCd = _snap.TStrHashF_OldGLib_GetSecHashCd

class TStrHashF_Md5(object):
    r"""Proxy of C++ TStrHashF_Md5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetPrimHashCd = _swig_new_static_method(_snap.TStrHashF_Md5_GetPrimHashCd)
    GetSecHashCd = _swig_new_static_method(_snap.TStrHashF_Md5_GetSecHashCd)

    def __init__(self):
        r"""__init__(TStrHashF_Md5 self) -> TStrHashF_Md5"""
        _snap.TStrHashF_Md5_swiginit(self, _snap.new_TStrHashF_Md5())
    __swig_destroy__ = _snap.delete_TStrHashF_Md5

# Register TStrHashF_Md5 in _snap:
_snap.TStrHashF_Md5_swigregister(TStrHashF_Md5)
TStrHashF_Md5_GetPrimHashCd = _snap.TStrHashF_Md5_GetPrimHashCd
TStrHashF_Md5_GetSecHashCd = _snap.TStrHashF_Md5_GetSecHashCd

class TStrHashF_DJB(object):
    r"""Proxy of C++ TStrHashF_DJB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetPrimHashCd = _swig_new_static_method(_snap.TStrHashF_DJB_GetPrimHashCd)
    GetSecHashCd = _swig_new_static_method(_snap.TStrHashF_DJB_GetSecHashCd)

    def __init__(self):
        r"""__init__(TStrHashF_DJB self) -> TStrHashF_DJB"""
        _snap.TStrHashF_DJB_swiginit(self, _snap.new_TStrHashF_DJB())
    __swig_destroy__ = _snap.delete_TStrHashF_DJB

# Register TStrHashF_DJB in _snap:
_snap.TStrHashF_DJB_swigregister(TStrHashF_DJB)
TStrHashF_DJB_GetPrimHashCd = _snap.TStrHashF_DJB_GetPrimHashCd
TStrHashF_DJB_GetSecHashCd = _snap.TStrHashF_DJB_GetSecHashCd

class TUNGraph(object):
    r"""Proxy of C++ TUNGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraph self) -> TUNGraph
        __init__(TUNGraph self, int const & Nodes, int const & Edges) -> TUNGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TUNGraph self, TUNGraph Graph) -> TUNGraph

        Parameters
        ----------
        Graph: TUNGraph const &

        __init__(TUNGraph self, TSIn SIn) -> TUNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUNGraph_swiginit(self, _snap.new_TUNGraph(*args))
    Save = _swig_new_instance_method(_snap.TUNGraph_Save)
    New = _swig_new_static_method(_snap.TUNGraph_New)
    Load = _swig_new_static_method(_snap.TUNGraph_Load)
    LoadShM = _swig_new_static_method(_snap.TUNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TUNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TUNGraph_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TUNGraph_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TUNGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TUNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TUNGraph_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TUNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TUNGraph_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TUNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.TUNGraph_AddEdge2)
    AddEdge = _swig_new_instance_method(_snap.TUNGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TUNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TUNGraph_IsEdge)
    GetRndNId = _swig_new_instance_method(_snap.TUNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TUNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TUNGraph_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TUNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TUNGraph_Clr)
    SortNodeAdjV = _swig_new_instance_method(_snap.TUNGraph_SortNodeAdjV)
    Reserve = _swig_new_instance_method(_snap.TUNGraph_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.TUNGraph_ReserveNIdDeg)
    Defrag = _swig_new_instance_method(_snap.TUNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TUNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TUNGraph_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TUNGraph_GetSmallGraph)
    BegNI = _swig_new_instance_method(_snap.TUNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TUNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TUNGraph_GetNI)
    BegEI = _swig_new_instance_method(_snap.TUNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TUNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TUNGraph_GetEI)
    __swig_destroy__ = _snap.delete_TUNGraph

# Register TUNGraph in _snap:
_snap.TUNGraph_swigregister(TUNGraph)
TUNGraph_New = _snap.TUNGraph_New
TUNGraph_Load = _snap.TUNGraph_Load
TUNGraph_LoadShM = _snap.TUNGraph_LoadShM
TUNGraph_GetSmallGraph = _snap.TUNGraph_GetSmallGraph

class TNGraph(object):
    r"""Proxy of C++ TNGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraph self) -> TNGraph
        __init__(TNGraph self, int const & Nodes, int const & Edges) -> TNGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TNGraph self, TNGraph Graph) -> TNGraph

        Parameters
        ----------
        Graph: TNGraph const &

        __init__(TNGraph self, TSIn SIn) -> TNGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TNGraph_swiginit(self, _snap.new_TNGraph(*args))
    Save = _swig_new_instance_method(_snap.TNGraph_Save)
    New = _swig_new_static_method(_snap.TNGraph_New)
    Load = _swig_new_static_method(_snap.TNGraph_Load)
    LoadShM = _swig_new_static_method(_snap.TNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TNGraph_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TNGraph_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TNGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TNGraph_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TNGraph_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.TNGraph_AddEdge2)
    AddEdge = _swig_new_instance_method(_snap.TNGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TNGraph_IsEdge)
    GetRndNId = _swig_new_instance_method(_snap.TNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TNGraph_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TNGraph_Clr)
    Reserve = _swig_new_instance_method(_snap.TNGraph_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.TNGraph_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.TNGraph_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.TNGraph_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.TNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TNGraph_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TNGraph_GetSmallGraph)
    BegNI = _swig_new_instance_method(_snap.TNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TNGraph_GetNI)
    BegEI = _swig_new_instance_method(_snap.TNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TNGraph_GetEI)
    __swig_destroy__ = _snap.delete_TNGraph

# Register TNGraph in _snap:
_snap.TNGraph_swigregister(TNGraph)
TNGraph_New = _snap.TNGraph_New
TNGraph_Load = _snap.TNGraph_Load
TNGraph_LoadShM = _snap.TNGraph_LoadShM
TNGraph_GetSmallGraph = _snap.TNGraph_GetSmallGraph

class TNEGraph(object):
    r"""Proxy of C++ TNEGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEGraph self) -> TNEGraph
        __init__(TNEGraph self, int const & Nodes, int const & Edges) -> TNEGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TNEGraph self, TNEGraph Graph) -> TNEGraph

        Parameters
        ----------
        Graph: TNEGraph const &

        __init__(TNEGraph self, TSIn SIn) -> TNEGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TNEGraph_swiginit(self, _snap.new_TNEGraph(*args))
    Save = _swig_new_instance_method(_snap.TNEGraph_Save)
    New = _swig_new_static_method(_snap.TNEGraph_New)
    Load = _swig_new_static_method(_snap.TNEGraph_Load)
    HasFlag = _swig_new_instance_method(_snap.TNEGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TNEGraph_GetNodes)
    AddNode = _swig_new_instance_method(_snap.TNEGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TNEGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TNEGraph_IsNode)
    BegNI = _swig_new_instance_method(_snap.TNEGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TNEGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TNEGraph_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.TNEGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TNEGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.TNEGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TNEGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TNEGraph_IsEdge)
    GetEId = _swig_new_instance_method(_snap.TNEGraph_GetEId)
    BegEI = _swig_new_instance_method(_snap.TNEGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TNEGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TNEGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TNEGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TNEGraph_GetRndNI)
    GetRndEId = _swig_new_instance_method(_snap.TNEGraph_GetRndEId)
    GetRndEI = _swig_new_instance_method(_snap.TNEGraph_GetRndEI)
    GetNIdV = _swig_new_instance_method(_snap.TNEGraph_GetNIdV)
    GetEIdV = _swig_new_instance_method(_snap.TNEGraph_GetEIdV)
    Empty = _swig_new_instance_method(_snap.TNEGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TNEGraph_Clr)
    Reserve = _swig_new_instance_method(_snap.TNEGraph_Reserve)
    Defrag = _swig_new_instance_method(_snap.TNEGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TNEGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TNEGraph_Dump)
    __swig_destroy__ = _snap.delete_TNEGraph

# Register TNEGraph in _snap:
_snap.TNEGraph_swigregister(TNEGraph)
TNEGraph_New = _snap.TNEGraph_New
TNEGraph_Load = _snap.TNEGraph_Load

class TBPGraph(object):
    r"""Proxy of C++ TBPGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bgsUndef = _snap.TBPGraph_bgsUndef
    
    bgsLeft = _snap.TBPGraph_bgsLeft
    
    bgsRight = _snap.TBPGraph_bgsRight
    
    bgsBoth = _snap.TBPGraph_bgsBoth
    

    def __init__(self, *args):
        r"""
        __init__(TBPGraph self) -> TBPGraph
        __init__(TBPGraph self, int const & Nodes, int const & Edges) -> TBPGraph

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TBPGraph self, TBPGraph BPGraph) -> TBPGraph

        Parameters
        ----------
        BPGraph: TBPGraph const &

        __init__(TBPGraph self, TSIn SIn) -> TBPGraph

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TBPGraph_swiginit(self, _snap.new_TBPGraph(*args))
    Save = _swig_new_instance_method(_snap.TBPGraph_Save)
    New = _swig_new_static_method(_snap.TBPGraph_New)
    Load = _swig_new_static_method(_snap.TBPGraph_Load)
    GetNodes = _swig_new_instance_method(_snap.TBPGraph_GetNodes)
    GetLNodes = _swig_new_instance_method(_snap.TBPGraph_GetLNodes)
    GetRNodes = _swig_new_instance_method(_snap.TBPGraph_GetRNodes)
    AddNode = _swig_new_instance_method(_snap.TBPGraph_AddNode)
    DelNode = _swig_new_instance_method(_snap.TBPGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.TBPGraph_IsNode)
    IsLNode = _swig_new_instance_method(_snap.TBPGraph_IsLNode)
    IsRNode = _swig_new_instance_method(_snap.TBPGraph_IsRNode)
    GetMxNId = _swig_new_instance_method(_snap.TBPGraph_GetMxNId)
    BegNI = _swig_new_instance_method(_snap.TBPGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.TBPGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.TBPGraph_GetNI)
    BegLNI = _swig_new_instance_method(_snap.TBPGraph_BegLNI)
    EndLNI = _swig_new_instance_method(_snap.TBPGraph_EndLNI)
    BegRNI = _swig_new_instance_method(_snap.TBPGraph_BegRNI)
    EndRNI = _swig_new_instance_method(_snap.TBPGraph_EndRNI)
    GetEdges = _swig_new_instance_method(_snap.TBPGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.TBPGraph_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TBPGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TBPGraph_IsEdge)
    BegEI = _swig_new_instance_method(_snap.TBPGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.TBPGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.TBPGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TBPGraph_GetRndNId)
    GetRndLNId = _swig_new_instance_method(_snap.TBPGraph_GetRndLNId)
    GetRndRNId = _swig_new_instance_method(_snap.TBPGraph_GetRndRNId)
    GetRndNI = _swig_new_instance_method(_snap.TBPGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TBPGraph_GetNIdV)
    GetLNIdV = _swig_new_instance_method(_snap.TBPGraph_GetLNIdV)
    GetRNIdV = _swig_new_instance_method(_snap.TBPGraph_GetRNIdV)
    Empty = _swig_new_instance_method(_snap.TBPGraph_Empty)
    Clr = _swig_new_instance_method(_snap.TBPGraph_Clr)
    Reserve = _swig_new_instance_method(_snap.TBPGraph_Reserve)
    Defrag = _swig_new_instance_method(_snap.TBPGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.TBPGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.TBPGraph_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TBPGraph_GetSmallGraph)
    __swig_destroy__ = _snap.delete_TBPGraph

# Register TBPGraph in _snap:
_snap.TBPGraph_swigregister(TBPGraph)
TBPGraph_New = _snap.TBPGraph_New
TBPGraph_Load = _snap.TBPGraph_Load
TBPGraph_GetSmallGraph = _snap.TBPGraph_GetSmallGraph

class TNEANet(object):
    r"""Proxy of C++ TNEANet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CRef = property(_snap.TNEANet_CRef_get, doc=r"""CRef : TCRef""")

    def __init__(self, *args):
        r"""
        __init__(TNEANet self) -> TNEANet
        __init__(TNEANet self, int const & Nodes, int const & Edges) -> TNEANet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TNEANet self, TNEANet Graph) -> TNEANet

        Parameters
        ----------
        Graph: TNEANet const &

        __init__(TNEANet self, TSIn SIn) -> TNEANet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TNEANet_swiginit(self, _snap.new_TNEANet(*args))
    Save = _swig_new_instance_method(_snap.TNEANet_Save)
    Save_V1 = _swig_new_instance_method(_snap.TNEANet_Save_V1)
    Save_V2 = _swig_new_instance_method(_snap.TNEANet_Save_V2)
    New = _swig_new_static_method(_snap.TNEANet_New)
    Load = _swig_new_static_method(_snap.TNEANet_Load)
    Load_V1 = _swig_new_static_method(_snap.TNEANet_Load_V1)
    Load_V2 = _swig_new_static_method(_snap.TNEANet_Load_V2)
    LoadNetworkShM = _swig_new_instance_method(_snap.TNEANet_LoadNetworkShM)
    LoadShM = _swig_new_static_method(_snap.TNEANet_LoadShM)
    ConvertToSparse = _swig_new_instance_method(_snap.TNEANet_ConvertToSparse)
    HasFlag = _swig_new_instance_method(_snap.TNEANet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TNEANet_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TNEANet_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TNEANet_AddNode)
    DelNode = _swig_new_instance_method(_snap.TNEANet_DelNode)
    IsNode = _swig_new_instance_method(_snap.TNEANet_IsNode)
    GetNAIntI = _swig_new_instance_method(_snap.TNEANet_GetNAIntI)
    BegNAIntVI = _swig_new_instance_method(_snap.TNEANet_BegNAIntVI)
    EndNAIntVI = _swig_new_instance_method(_snap.TNEANet_EndNAIntVI)
    GetNAIntVI = _swig_new_instance_method(_snap.TNEANet_GetNAIntVI)
    GetNAStrI = _swig_new_instance_method(_snap.TNEANet_GetNAStrI)
    GetNAFltI = _swig_new_instance_method(_snap.TNEANet_GetNAFltI)
    AttrNameNI = _swig_new_instance_method(_snap.TNEANet_AttrNameNI)
    AttrValueNI = _swig_new_instance_method(_snap.TNEANet_AttrValueNI)
    IntAttrNameNI = _swig_new_instance_method(_snap.TNEANet_IntAttrNameNI)
    IntAttrValueNI = _swig_new_instance_method(_snap.TNEANet_IntAttrValueNI)
    IntVAttrNameNI = _swig_new_instance_method(_snap.TNEANet_IntVAttrNameNI)
    IntVAttrValueNI = _swig_new_instance_method(_snap.TNEANet_IntVAttrValueNI)
    StrAttrNameNI = _swig_new_instance_method(_snap.TNEANet_StrAttrNameNI)
    StrAttrValueNI = _swig_new_instance_method(_snap.TNEANet_StrAttrValueNI)
    FltAttrNameNI = _swig_new_instance_method(_snap.TNEANet_FltAttrNameNI)
    FltAttrValueNI = _swig_new_instance_method(_snap.TNEANet_FltAttrValueNI)
    AttrNameEI = _swig_new_instance_method(_snap.TNEANet_AttrNameEI)
    AttrValueEI = _swig_new_instance_method(_snap.TNEANet_AttrValueEI)
    IntAttrNameEI = _swig_new_instance_method(_snap.TNEANet_IntAttrNameEI)
    IntAttrValueEI = _swig_new_instance_method(_snap.TNEANet_IntAttrValueEI)
    IntVAttrNameEI = _swig_new_instance_method(_snap.TNEANet_IntVAttrNameEI)
    IntVAttrValueEI = _swig_new_instance_method(_snap.TNEANet_IntVAttrValueEI)
    StrAttrNameEI = _swig_new_instance_method(_snap.TNEANet_StrAttrNameEI)
    StrAttrValueEI = _swig_new_instance_method(_snap.TNEANet_StrAttrValueEI)
    FltAttrNameEI = _swig_new_instance_method(_snap.TNEANet_FltAttrNameEI)
    FltAttrValueEI = _swig_new_instance_method(_snap.TNEANet_FltAttrValueEI)
    GetEAIntI = _swig_new_instance_method(_snap.TNEANet_GetEAIntI)
    BegEAIntVI = _swig_new_instance_method(_snap.TNEANet_BegEAIntVI)
    EndEAIntVI = _swig_new_instance_method(_snap.TNEANet_EndEAIntVI)
    GetEAIntVI = _swig_new_instance_method(_snap.TNEANet_GetEAIntVI)
    GetEAStrI = _swig_new_instance_method(_snap.TNEANet_GetEAStrI)
    GetEAFltI = _swig_new_instance_method(_snap.TNEANet_GetEAFltI)
    GetMxNId = _swig_new_instance_method(_snap.TNEANet_GetMxNId)
    GetMxEId = _swig_new_instance_method(_snap.TNEANet_GetMxEId)
    GetEdges = _swig_new_instance_method(_snap.TNEANet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.TNEANet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TNEANet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TNEANet_IsEdge)
    GetEId = _swig_new_instance_method(_snap.TNEANet_GetEId)
    GetRndNId = _swig_new_instance_method(_snap.TNEANet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TNEANet_GetRndNI)
    GetRndEId = _swig_new_instance_method(_snap.TNEANet_GetRndEId)
    GetRndEI = _swig_new_instance_method(_snap.TNEANet_GetRndEI)
    GetNIdV = _swig_new_instance_method(_snap.TNEANet_GetNIdV)
    GetEIdV = _swig_new_instance_method(_snap.TNEANet_GetEIdV)
    Empty = _swig_new_instance_method(_snap.TNEANet_Empty)
    Clr = _swig_new_instance_method(_snap.TNEANet_Clr)
    Reserve = _swig_new_instance_method(_snap.TNEANet_Reserve)
    Defrag = _swig_new_instance_method(_snap.TNEANet_Defrag)
    IsOk = _swig_new_instance_method(_snap.TNEANet_IsOk)
    Dump = _swig_new_instance_method(_snap.TNEANet_Dump)
    AddIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrDatN)
    AppendIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_AppendIntVAttrDatN)
    DelFromIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_DelFromIntVAttrDatN)
    AddIntVAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrDatE)
    AppendIntVAttrDatE = _swig_new_instance_method(_snap.TNEANet_AppendIntVAttrDatE)
    GetIntVAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetIntVAttrDatN)
    GetIntAttrIndN = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndN)
    GetAttrIndN = _swig_new_instance_method(_snap.TNEANet_GetAttrIndN)
    GetIntVAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetIntVAttrDatE)
    GetIntAttrIndE = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndE)
    GetAttrIndE = _swig_new_instance_method(_snap.TNEANet_GetAttrIndE)
    AddIntAttrN = _swig_new_instance_method(_snap.TNEANet_AddIntAttrN)
    AddStrAttrN = _swig_new_instance_method(_snap.TNEANet_AddStrAttrN)
    AddFltAttrN = _swig_new_instance_method(_snap.TNEANet_AddFltAttrN)
    AddIntVAttrN = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrN)
    AddIntAttrE = _swig_new_instance_method(_snap.TNEANet_AddIntAttrE)
    AddStrAttrE = _swig_new_instance_method(_snap.TNEANet_AddStrAttrE)
    AddFltAttrE = _swig_new_instance_method(_snap.TNEANet_AddFltAttrE)
    AddIntVAttrE = _swig_new_instance_method(_snap.TNEANet_AddIntVAttrE)
    DelAttrN = _swig_new_instance_method(_snap.TNEANet_DelAttrN)
    DelAttrE = _swig_new_instance_method(_snap.TNEANet_DelAttrE)
    IsAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsAttrDeletedN)
    IsIntAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsIntAttrDeletedN)
    IsIntVAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsIntVAttrDeletedN)
    IsStrAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsStrAttrDeletedN)
    IsFltAttrDeletedN = _swig_new_instance_method(_snap.TNEANet_IsFltAttrDeletedN)
    NodeAttrIsDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsDeleted)
    NodeAttrIsIntDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsIntDeleted)
    NodeAttrIsIntVDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsIntVDeleted)
    NodeAttrIsStrDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsStrDeleted)
    NodeAttrIsFltDeleted = _swig_new_instance_method(_snap.TNEANet_NodeAttrIsFltDeleted)
    IsAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsAttrDeletedE)
    IsIntAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsIntAttrDeletedE)
    IsIntVAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsIntVAttrDeletedE)
    IsStrAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsStrAttrDeletedE)
    IsFltAttrDeletedE = _swig_new_instance_method(_snap.TNEANet_IsFltAttrDeletedE)
    EdgeAttrIsDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsDeleted)
    EdgeAttrIsIntDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsIntDeleted)
    EdgeAttrIsIntVDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsIntVDeleted)
    EdgeAttrIsStrDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsStrDeleted)
    EdgeAttrIsFltDeleted = _swig_new_instance_method(_snap.TNEANet_EdgeAttrIsFltDeleted)
    GetNodeAttrValue = _swig_new_instance_method(_snap.TNEANet_GetNodeAttrValue)
    GetEdgeAttrValue = _swig_new_instance_method(_snap.TNEANet_GetEdgeAttrValue)
    GetWeightOutEdges = _swig_new_instance_method(_snap.TNEANet_GetWeightOutEdges)
    IsFltAttrE = _swig_new_instance_method(_snap.TNEANet_IsFltAttrE)
    IsIntAttrE = _swig_new_instance_method(_snap.TNEANet_IsIntAttrE)
    IsStrAttrE = _swig_new_instance_method(_snap.TNEANet_IsStrAttrE)
    GetFltAttrVecE = _swig_new_instance_method(_snap.TNEANet_GetFltAttrVecE)
    GetFltKeyIdE = _swig_new_instance_method(_snap.TNEANet_GetFltKeyIdE)
    GetWeightOutEdgesV = _swig_new_instance_method(_snap.TNEANet_GetWeightOutEdgesV)
    GetAttrNNames = _swig_new_instance_method(_snap.TNEANet_GetAttrNNames)
    GetAttrENames = _swig_new_instance_method(_snap.TNEANet_GetAttrENames)
    AddSAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.TNEANet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.TNEANet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.TNEANet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.TNEANet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.TNEANet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.TNEANet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.TNEANet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.TNEANet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.TNEANet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.TNEANet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.TNEANet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.TNEANet_GetSAttrNameE)
    BegNI = _swig_new_instance_method(_snap.TNEANet_BegNI)
    EndNI = _swig_new_instance_method(_snap.TNEANet_EndNI)
    GetNI = _swig_new_instance_method(_snap.TNEANet_GetNI)
    AddIntAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddIntAttrDatN)
    AddFltAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddFltAttrDatN)
    AddStrAttrDatN = _swig_new_instance_method(_snap.TNEANet_AddStrAttrDatN)
    GetIntAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetIntAttrDatN)
    GetFltAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetFltAttrDatN)
    GetStrAttrDatN = _swig_new_instance_method(_snap.TNEANet_GetStrAttrDatN)
    GetIntAttrIndDatN = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndDatN)
    GetFltAttrIndDatN = _swig_new_instance_method(_snap.TNEANet_GetFltAttrIndDatN)
    GetStrAttrIndDatN = _swig_new_instance_method(_snap.TNEANet_GetStrAttrIndDatN)
    DelAttrDatN = _swig_new_instance_method(_snap.TNEANet_DelAttrDatN)
    BegEI = _swig_new_instance_method(_snap.TNEANet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TNEANet_EndEI)
    GetEI = _swig_new_instance_method(_snap.TNEANet_GetEI)
    AddIntAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddIntAttrDatE)
    AddFltAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddFltAttrDatE)
    AddStrAttrDatE = _swig_new_instance_method(_snap.TNEANet_AddStrAttrDatE)
    GetIntAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetIntAttrDatE)
    GetFltAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetFltAttrDatE)
    GetStrAttrDatE = _swig_new_instance_method(_snap.TNEANet_GetStrAttrDatE)
    GetIntAttrIndDatE = _swig_new_instance_method(_snap.TNEANet_GetIntAttrIndDatE)
    GetFltAttrIndDatE = _swig_new_instance_method(_snap.TNEANet_GetFltAttrIndDatE)
    GetStrAttrIndDatE = _swig_new_instance_method(_snap.TNEANet_GetStrAttrIndDatE)
    DelAttrDatE = _swig_new_instance_method(_snap.TNEANet_DelAttrDatE)
    BegNAIntI = _swig_new_instance_method(_snap.TNEANet_BegNAIntI)
    EndNAIntI = _swig_new_instance_method(_snap.TNEANet_EndNAIntI)
    BegNAStrI = _swig_new_instance_method(_snap.TNEANet_BegNAStrI)
    EndNAStrI = _swig_new_instance_method(_snap.TNEANet_EndNAStrI)
    BegNAFltI = _swig_new_instance_method(_snap.TNEANet_BegNAFltI)
    EndNAFltI = _swig_new_instance_method(_snap.TNEANet_EndNAFltI)
    BegEAIntI = _swig_new_instance_method(_snap.TNEANet_BegEAIntI)
    EndEAIntI = _swig_new_instance_method(_snap.TNEANet_EndEAIntI)
    BegEAStrI = _swig_new_instance_method(_snap.TNEANet_BegEAStrI)
    EndEAStrI = _swig_new_instance_method(_snap.TNEANet_EndEAStrI)
    BegEAFltI = _swig_new_instance_method(_snap.TNEANet_BegEAFltI)
    EndEAFltI = _swig_new_instance_method(_snap.TNEANet_EndEAFltI)
    __swig_destroy__ = _snap.delete_TNEANet

# Register TNEANet in _snap:
_snap.TNEANet_swigregister(TNEANet)
TNEANet_New = _snap.TNEANet_New
TNEANet_Load = _snap.TNEANet_Load
TNEANet_Load_V1 = _snap.TNEANet_Load_V1
TNEANet_Load_V2 = _snap.TNEANet_Load_V2
TNEANet_LoadShM = _snap.TNEANet_LoadShM

class TUndirNet(object):
    r"""Proxy of C++ TUndirNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUndirNet self) -> TUndirNet
        __init__(TUndirNet self, int const & Nodes, int const & Edges) -> TUndirNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TUndirNet self, TUndirNet Graph) -> TUndirNet

        Parameters
        ----------
        Graph: TUndirNet const &

        __init__(TUndirNet self, TSIn SIn) -> TUndirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TUndirNet_swiginit(self, _snap.new_TUndirNet(*args))
    Save = _swig_new_instance_method(_snap.TUndirNet_Save)
    Save_V1 = _swig_new_instance_method(_snap.TUndirNet_Save_V1)
    New = _swig_new_static_method(_snap.TUndirNet_New)
    Load = _swig_new_static_method(_snap.TUndirNet_Load)
    Load_V1 = _swig_new_static_method(_snap.TUndirNet_Load_V1)
    LoadShM = _swig_new_static_method(_snap.TUndirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TUndirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TUndirNet_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TUndirNet_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TUndirNet_AddNode)
    DelNode = _swig_new_instance_method(_snap.TUndirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.TUndirNet_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TUndirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TUndirNet_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TUndirNet_AddEdgeUnchecked)
    AddEdge = _swig_new_instance_method(_snap.TUndirNet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TUndirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TUndirNet_IsEdge)
    GetEI = _swig_new_instance_method(_snap.TUndirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TUndirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TUndirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TUndirNet_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TUndirNet_Empty)
    Clr = _swig_new_instance_method(_snap.TUndirNet_Clr)
    Reserve = _swig_new_instance_method(_snap.TUndirNet_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.TUndirNet_ReserveNIdDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.TUndirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.TUndirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.TUndirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.TUndirNet_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TUndirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.TUndirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.TUndirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.TUndirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.TUndirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.TUndirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.TUndirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.TUndirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.TUndirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.TUndirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.TUndirNet_GetSAttrNameE)
    BegNI = _swig_new_instance_method(_snap.TUndirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.TUndirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.TUndirNet_GetNI)
    BegEI = _swig_new_instance_method(_snap.TUndirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TUndirNet_EndEI)
    __swig_destroy__ = _snap.delete_TUndirNet

# Register TUndirNet in _snap:
_snap.TUndirNet_swigregister(TUndirNet)
TUndirNet_New = _snap.TUndirNet_New
TUndirNet_Load = _snap.TUndirNet_Load
TUndirNet_Load_V1 = _snap.TUndirNet_Load_V1
TUndirNet_LoadShM = _snap.TUndirNet_LoadShM
TUndirNet_GetSmallGraph = _snap.TUndirNet_GetSmallGraph

class TDirNet(object):
    r"""Proxy of C++ TDirNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TDirNet self) -> TDirNet
        __init__(TDirNet self, int const & Nodes, int const & Edges) -> TDirNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TDirNet self, TDirNet Graph) -> TDirNet

        Parameters
        ----------
        Graph: TDirNet const &

        __init__(TDirNet self, TSIn SIn) -> TDirNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TDirNet_swiginit(self, _snap.new_TDirNet(*args))
    Save = _swig_new_instance_method(_snap.TDirNet_Save)
    Save_V1 = _swig_new_instance_method(_snap.TDirNet_Save_V1)
    New = _swig_new_static_method(_snap.TDirNet_New)
    Load = _swig_new_static_method(_snap.TDirNet_Load)
    Load_V1 = _swig_new_static_method(_snap.TDirNet_Load_V1)
    LoadShM = _swig_new_static_method(_snap.TDirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.TDirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.TDirNet_GetNodes)
    AddNodeUnchecked = _swig_new_instance_method(_snap.TDirNet_AddNodeUnchecked)
    AddNode = _swig_new_instance_method(_snap.TDirNet_AddNode)
    DelNode = _swig_new_instance_method(_snap.TDirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.TDirNet_IsNode)
    GetMxNId = _swig_new_instance_method(_snap.TDirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.TDirNet_GetEdges)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.TDirNet_AddEdgeUnchecked)
    AddEdge = _swig_new_instance_method(_snap.TDirNet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.TDirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.TDirNet_IsEdge)
    GetEI = _swig_new_instance_method(_snap.TDirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.TDirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.TDirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.TDirNet_GetNIdV)
    Empty = _swig_new_instance_method(_snap.TDirNet_Empty)
    Clr = _swig_new_instance_method(_snap.TDirNet_Clr)
    Reserve = _swig_new_instance_method(_snap.TDirNet_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.TDirNet_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.TDirNet_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.TDirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.TDirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.TDirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.TDirNet_Dump)
    GetSmallGraph = _swig_new_static_method(_snap.TDirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.TDirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.TDirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.TDirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.TDirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.TDirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.TDirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.TDirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.TDirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.TDirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.TDirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.TDirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.TDirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.TDirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.TDirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.TDirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.TDirNet_GetSAttrNameE)
    BegNI = _swig_new_instance_method(_snap.TDirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.TDirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.TDirNet_GetNI)
    BegEI = _swig_new_instance_method(_snap.TDirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TDirNet_EndEI)
    __swig_destroy__ = _snap.delete_TDirNet

# Register TDirNet in _snap:
_snap.TDirNet_swigregister(TDirNet)
TDirNet_New = _snap.TDirNet_New
TDirNet_Load = _snap.TDirNet_Load
TDirNet_Load_V1 = _snap.TDirNet_Load_V1
TDirNet_LoadShM = _snap.TDirNet_LoadShM
TDirNet_GetSmallGraph = _snap.TDirNet_GetSmallGraph

class TModeNet(TNEANet):
    r"""Proxy of C++ TModeNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TModeNet self) -> TModeNet
        __init__(TModeNet self, int const & TypeId) -> TModeNet

        Parameters
        ----------
        TypeId: int const &

        __init__(TModeNet self, int const & Nodes, int const & Edges) -> TModeNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &

        __init__(TModeNet self, int const & Nodes, int const & Edges, int const & TypeId) -> TModeNet

        Parameters
        ----------
        Nodes: int const &
        Edges: int const &
        TypeId: int const &

        __init__(TModeNet self, TModeNet Graph) -> TModeNet

        Parameters
        ----------
        Graph: TModeNet const &

        __init__(TModeNet self, TSIn SIn) -> TModeNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TModeNet_swiginit(self, _snap.new_TModeNet(*args))
    Save = _swig_new_instance_method(_snap.TModeNet_Save)
    LoadShM = _swig_new_instance_method(_snap.TModeNet_LoadShM)
    GetCrossNetNames = _swig_new_instance_method(_snap.TModeNet_GetCrossNetNames)
    GetNeighborsByCrossNet = _swig_new_instance_method(_snap.TModeNet_GetNeighborsByCrossNet)
    Clr = _swig_new_instance_method(_snap.TModeNet_Clr)
    BegMMNI = _swig_new_instance_method(_snap.TModeNet_BegMMNI)
    EndMMNI = _swig_new_instance_method(_snap.TModeNet_EndMMNI)
    GetMMNI = _swig_new_instance_method(_snap.TModeNet_GetMMNI)
    __swig_destroy__ = _snap.delete_TModeNet

# Register TModeNet in _snap:
_snap.TModeNet_swigregister(TModeNet)

class TCrossNet(object):
    r"""Proxy of C++ TCrossNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNet self) -> TCrossNet
        __init__(TCrossNet self, TInt MId1, TInt MId2, TInt LId) -> TCrossNet

        Parameters
        ----------
        MId1: TInt
        MId2: TInt
        LId: TInt

        __init__(TCrossNet self, TInt MId1, TInt MId2, TBool IsDir, TInt LId) -> TCrossNet

        Parameters
        ----------
        MId1: TInt
        MId2: TInt
        IsDir: TBool
        LId: TInt

        __init__(TCrossNet self, TSIn SIn) -> TCrossNet

        Parameters
        ----------
        SIn: TSIn &

        __init__(TCrossNet self, TCrossNet OtherTCrossNet) -> TCrossNet

        Parameters
        ----------
        OtherTCrossNet: TCrossNet const &

        """
        _snap.TCrossNet_swiginit(self, _snap.new_TCrossNet(*args))
    IsEdge = _swig_new_instance_method(_snap.TCrossNet_IsEdge)
    GetMxEId = _swig_new_instance_method(_snap.TCrossNet_GetMxEId)
    GetEdges = _swig_new_instance_method(_snap.TCrossNet_GetEdges)
    Clr = _swig_new_instance_method(_snap.TCrossNet_Clr)
    AddEdge = _swig_new_instance_method(_snap.TCrossNet_AddEdge)
    GetEdgeI = _swig_new_instance_method(_snap.TCrossNet_GetEdgeI)
    BegEdgeI = _swig_new_instance_method(_snap.TCrossNet_BegEdgeI)
    EndEdgeI = _swig_new_instance_method(_snap.TCrossNet_EndEdgeI)
    DelEdge = _swig_new_instance_method(_snap.TCrossNet_DelEdge)
    GetMode1 = _swig_new_instance_method(_snap.TCrossNet_GetMode1)
    GetMode2 = _swig_new_instance_method(_snap.TCrossNet_GetMode2)
    Save = _swig_new_instance_method(_snap.TCrossNet_Save)
    LoadShM = _swig_new_instance_method(_snap.TCrossNet_LoadShM)
    IsDirected = _swig_new_instance_method(_snap.TCrossNet_IsDirected)
    AttrNameEI = _swig_new_instance_method(_snap.TCrossNet_AttrNameEI)
    AttrValueEI = _swig_new_instance_method(_snap.TCrossNet_AttrValueEI)
    IntAttrNameEI = _swig_new_instance_method(_snap.TCrossNet_IntAttrNameEI)
    IntAttrValueEI = _swig_new_instance_method(_snap.TCrossNet_IntAttrValueEI)
    StrAttrNameEI = _swig_new_instance_method(_snap.TCrossNet_StrAttrNameEI)
    StrAttrValueEI = _swig_new_instance_method(_snap.TCrossNet_StrAttrValueEI)
    FltAttrNameEI = _swig_new_instance_method(_snap.TCrossNet_FltAttrNameEI)
    FltAttrValueEI = _swig_new_instance_method(_snap.TCrossNet_FltAttrValueEI)
    AddIntAttrDatE = _swig_new_instance_method(_snap.TCrossNet_AddIntAttrDatE)
    AddStrAttrDatE = _swig_new_instance_method(_snap.TCrossNet_AddStrAttrDatE)
    AddFltAttrDatE = _swig_new_instance_method(_snap.TCrossNet_AddFltAttrDatE)
    GetIntAttrDatE = _swig_new_instance_method(_snap.TCrossNet_GetIntAttrDatE)
    GetStrAttrDatE = _swig_new_instance_method(_snap.TCrossNet_GetStrAttrDatE)
    GetFltAttrDatE = _swig_new_instance_method(_snap.TCrossNet_GetFltAttrDatE)
    GetEAIntI = _swig_new_instance_method(_snap.TCrossNet_GetEAIntI)
    GetEAStrI = _swig_new_instance_method(_snap.TCrossNet_GetEAStrI)
    GetEAFltI = _swig_new_instance_method(_snap.TCrossNet_GetEAFltI)
    DelAttrDatE = _swig_new_instance_method(_snap.TCrossNet_DelAttrDatE)
    AddIntAttrE = _swig_new_instance_method(_snap.TCrossNet_AddIntAttrE)
    AddStrAttrE = _swig_new_instance_method(_snap.TCrossNet_AddStrAttrE)
    AddFltAttrE = _swig_new_instance_method(_snap.TCrossNet_AddFltAttrE)
    DelAttrE = _swig_new_instance_method(_snap.TCrossNet_DelAttrE)
    IsAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsAttrDeletedE)
    IsIntAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsIntAttrDeletedE)
    IsStrAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsStrAttrDeletedE)
    IsFltAttrDeletedE = _swig_new_instance_method(_snap.TCrossNet_IsFltAttrDeletedE)
    EdgeAttrIsDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsDeleted)
    EdgeAttrIsIntDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsIntDeleted)
    EdgeAttrIsStrDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsStrDeleted)
    EdgeAttrIsFltDeleted = _swig_new_instance_method(_snap.TCrossNet_EdgeAttrIsFltDeleted)
    GetEdgeAttrValue = _swig_new_instance_method(_snap.TCrossNet_GetEdgeAttrValue)
    BegEI = _swig_new_instance_method(_snap.TCrossNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.TCrossNet_EndEI)
    BegEAIntI = _swig_new_instance_method(_snap.TCrossNet_BegEAIntI)
    EndEAIntI = _swig_new_instance_method(_snap.TCrossNet_EndEAIntI)
    BegEAStrI = _swig_new_instance_method(_snap.TCrossNet_BegEAStrI)
    EndEAStrI = _swig_new_instance_method(_snap.TCrossNet_EndEAStrI)
    BegEAFltI = _swig_new_instance_method(_snap.TCrossNet_BegEAFltI)
    EndEAFltI = _swig_new_instance_method(_snap.TCrossNet_EndEAFltI)
    __swig_destroy__ = _snap.delete_TCrossNet

# Register TCrossNet in _snap:
_snap.TCrossNet_swigregister(TCrossNet)

class TMMNet(object):
    r"""Proxy of C++ TMMNet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CRef = property(_snap.TMMNet_CRef_get, doc=r"""CRef : TCRef""")

    def __init__(self, *args):
        r"""
        __init__(TMMNet self) -> TMMNet
        __init__(TMMNet self, TMMNet OtherTMMNet) -> TMMNet

        Parameters
        ----------
        OtherTMMNet: TMMNet const &

        __init__(TMMNet self, TSIn SIn) -> TMMNet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TMMNet_swiginit(self, _snap.new_TMMNet(*args))
    AddModeNet = _swig_new_instance_method(_snap.TMMNet_AddModeNet)
    DelModeNet = _swig_new_instance_method(_snap.TMMNet_DelModeNet)
    AddCrossNet = _swig_new_instance_method(_snap.TMMNet_AddCrossNet)
    DelCrossNet = _swig_new_instance_method(_snap.TMMNet_DelCrossNet)
    Save = _swig_new_instance_method(_snap.TMMNet_Save)
    Load = _swig_new_static_method(_snap.TMMNet_Load)
    LoadShM = _swig_new_static_method(_snap.TMMNet_LoadShM)
    New = _swig_new_static_method(_snap.TMMNet_New)
    ConvertToSparse = _swig_new_instance_method(_snap.TMMNet_ConvertToSparse)
    GetModeId = _swig_new_instance_method(_snap.TMMNet_GetModeId)
    GetModeName = _swig_new_instance_method(_snap.TMMNet_GetModeName)
    GetCrossId = _swig_new_instance_method(_snap.TMMNet_GetCrossId)
    GetCrossName = _swig_new_instance_method(_snap.TMMNet_GetCrossName)
    GetModeNetByName = _swig_new_instance_method(_snap.TMMNet_GetModeNetByName)
    GetModeNetById = _swig_new_instance_method(_snap.TMMNet_GetModeNetById)
    GetCrossNetByName = _swig_new_instance_method(_snap.TMMNet_GetCrossNetByName)
    GetCrossNetById = _swig_new_instance_method(_snap.TMMNet_GetCrossNetById)
    GetModeNets = _swig_new_instance_method(_snap.TMMNet_GetModeNets)
    GetCrossNets = _swig_new_instance_method(_snap.TMMNet_GetCrossNets)
    GetSubgraphByCrossNet = _swig_new_instance_method(_snap.TMMNet_GetSubgraphByCrossNet)
    GetSubgraphByModeNet = _swig_new_instance_method(_snap.TMMNet_GetSubgraphByModeNet)
    ToNetwork = _swig_new_instance_method(_snap.TMMNet_ToNetwork)
    ToNetwork2 = _swig_new_instance_method(_snap.TMMNet_ToNetwork2)
    BegModeNetI = _swig_new_instance_method(_snap.TMMNet_BegModeNetI)
    EndModeNetI = _swig_new_instance_method(_snap.TMMNet_EndModeNetI)
    GetModeNetI = _swig_new_instance_method(_snap.TMMNet_GetModeNetI)
    BegCrossNetI = _swig_new_instance_method(_snap.TMMNet_BegCrossNetI)
    EndCrossNetI = _swig_new_instance_method(_snap.TMMNet_EndCrossNetI)
    GetCrossNetI = _swig_new_instance_method(_snap.TMMNet_GetCrossNetI)
    __swig_destroy__ = _snap.delete_TMMNet

# Register TMMNet in _snap:
_snap.TMMNet_swigregister(TMMNet)
TMMNet_Load = _snap.TMMNet_Load
TMMNet_LoadShM = _snap.TMMNet_LoadShM
TMMNet_New = _snap.TMMNet_New

NOT = _snap.NOT

AND = _snap.AND

OR = _snap.OR

NOP = _snap.NOP

LT = _snap.LT

LTE = _snap.LTE

EQ = _snap.EQ

NEQ = _snap.NEQ

GTE = _snap.GTE

GT = _snap.GT

SUBSTR = _snap.SUBSTR

SUPERSTR = _snap.SUPERSTR

class TAtomicPredicate(object):
    r"""Proxy of C++ TAtomicPredicate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAtomicPredicate self) -> TAtomicPredicate
        __init__(TAtomicPredicate self, TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R, TInt ICnst, TFlt FCnst, TStr SCnst) -> TAtomicPredicate

        Parameters
        ----------
        Typ: enum TAttrType
        IsCnst: TBool
        Cmp: enum TPredComp
        L: TStr
        R: TStr
        ICnst: TInt
        FCnst: TFlt
        SCnst: TStr

        __init__(TAtomicPredicate self, TAttrType Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R) -> TAtomicPredicate

        Parameters
        ----------
        Typ: enum TAttrType
        IsCnst: TBool
        Cmp: enum TPredComp
        L: TStr
        R: TStr

        """
        _snap.TAtomicPredicate_swiginit(self, _snap.new_TAtomicPredicate(*args))
    __swig_destroy__ = _snap.delete_TAtomicPredicate

# Register TAtomicPredicate in _snap:
_snap.TAtomicPredicate_swigregister(TAtomicPredicate)

class TPredicateNode(object):
    r"""Proxy of C++ TPredicateNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Op = property(_snap.TPredicateNode_Op_get, _snap.TPredicateNode_Op_set, doc=r"""Op : TPredOp""")
    Result = property(_snap.TPredicateNode_Result_get, _snap.TPredicateNode_Result_set, doc=r"""Result : TBool""")
    Atom = property(_snap.TPredicateNode_Atom_get, _snap.TPredicateNode_Atom_set, doc=r"""Atom : TAtomicPredicate""")
    Parent = property(_snap.TPredicateNode_Parent_get, _snap.TPredicateNode_Parent_set, doc=r"""Parent : p.TPredicateNode""")
    Left = property(_snap.TPredicateNode_Left_get, _snap.TPredicateNode_Left_set, doc=r"""Left : p.TPredicateNode""")
    Right = property(_snap.TPredicateNode_Right_get, _snap.TPredicateNode_Right_set, doc=r"""Right : p.TPredicateNode""")

    def __init__(self, *args):
        r"""
        __init__(TPredicateNode self) -> TPredicateNode
        __init__(TPredicateNode self, TAtomicPredicate A) -> TPredicateNode

        Parameters
        ----------
        A: TAtomicPredicate const &

        __init__(TPredicateNode self, TPredOp Opr) -> TPredicateNode

        Parameters
        ----------
        Opr: enum TPredOp

        __init__(TPredicateNode self, TPredicateNode P) -> TPredicateNode

        Parameters
        ----------
        P: TPredicateNode const &

        """
        _snap.TPredicateNode_swiginit(self, _snap.new_TPredicateNode(*args))
    AddLeftChild = _swig_new_instance_method(_snap.TPredicateNode_AddLeftChild)
    AddRightChild = _swig_new_instance_method(_snap.TPredicateNode_AddRightChild)
    GetVariables = _swig_new_instance_method(_snap.TPredicateNode_GetVariables)
    __swig_destroy__ = _snap.delete_TPredicateNode

# Register TPredicateNode in _snap:
_snap.TPredicateNode_swigregister(TPredicateNode)

class TPredicate(object):
    r"""Proxy of C++ TPredicate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TPredicate self) -> TPredicate
        __init__(TPredicate self, TPredicateNode R) -> TPredicate

        Parameters
        ----------
        R: TPredicateNode *

        __init__(TPredicate self, TPredicate Pred) -> TPredicate

        Parameters
        ----------
        Pred: TPredicate const &

        """
        _snap.TPredicate_swiginit(self, _snap.new_TPredicate(*args))
    GetVariables = _swig_new_instance_method(_snap.TPredicate_GetVariables)
    SetIntVal = _swig_new_instance_method(_snap.TPredicate_SetIntVal)
    SetFltVal = _swig_new_instance_method(_snap.TPredicate_SetFltVal)
    SetStrVal = _swig_new_instance_method(_snap.TPredicate_SetStrVal)
    Eval = _swig_new_instance_method(_snap.TPredicate_Eval)
    EvalAtomicPredicate = _swig_new_instance_method(_snap.TPredicate_EvalAtomicPredicate)
    EvalStrAtom = _swig_new_static_method(_snap.TPredicate_EvalStrAtom)
    __swig_destroy__ = _snap.delete_TPredicate

# Register TPredicate in _snap:
_snap.TPredicate_swigregister(TPredicate)
TPredicate_EvalStrAtom = _snap.TPredicate_EvalStrAtom

L1Norm = _snap.L1Norm

L2Norm = _snap.L2Norm

Jaccard = _snap.Jaccard

Haversine = _snap.Haversine

class TTableContext(object):
    r"""Proxy of C++ TTableContext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TTableContext self) -> TTableContext
        __init__(TTableContext self, TSIn SIn) -> TTableContext

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TTableContext_swiginit(self, _snap.new_TTableContext(*args))
    Load = _swig_new_instance_method(_snap.TTableContext_Load)
    LoadShM = _swig_new_instance_method(_snap.TTableContext_LoadShM)
    Save = _swig_new_instance_method(_snap.TTableContext_Save)
    AddStr = _swig_new_instance_method(_snap.TTableContext_AddStr)
    GetStr = _swig_new_instance_method(_snap.TTableContext_GetStr)
    __swig_destroy__ = _snap.delete_TTableContext

# Register TTableContext in _snap:
_snap.TTableContext_swigregister(TTableContext)

class TPrimitive(object):
    r"""Proxy of C++ TPrimitive class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TPrimitive self) -> TPrimitive
        __init__(TPrimitive self, TInt Val) -> TPrimitive

        Parameters
        ----------
        Val: TInt const &

        __init__(TPrimitive self, TFlt Val) -> TPrimitive

        Parameters
        ----------
        Val: TFlt const &

        __init__(TPrimitive self, TStr Val) -> TPrimitive

        Parameters
        ----------
        Val: TStr const &

        __init__(TPrimitive self, TPrimitive Prim) -> TPrimitive

        Parameters
        ----------
        Prim: TPrimitive const &

        """
        _snap.TPrimitive_swiginit(self, _snap.new_TPrimitive(*args))
    GetInt = _swig_new_instance_method(_snap.TPrimitive_GetInt)
    GetFlt = _swig_new_instance_method(_snap.TPrimitive_GetFlt)
    GetStr = _swig_new_instance_method(_snap.TPrimitive_GetStr)
    GetType = _swig_new_instance_method(_snap.TPrimitive_GetType)
    __swig_destroy__ = _snap.delete_TPrimitive

# Register TPrimitive in _snap:
_snap.TPrimitive_swigregister(TPrimitive)

class TTableRow(object):
    r"""Proxy of C++ TTableRow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TTableRow self) -> TTableRow"""
        _snap.TTableRow_swiginit(self, _snap.new_TTableRow())
    AddInt = _swig_new_instance_method(_snap.TTableRow_AddInt)
    AddFlt = _swig_new_instance_method(_snap.TTableRow_AddFlt)
    AddStr = _swig_new_instance_method(_snap.TTableRow_AddStr)
    GetIntVals = _swig_new_instance_method(_snap.TTableRow_GetIntVals)
    GetFltVals = _swig_new_instance_method(_snap.TTableRow_GetFltVals)
    GetStrVals = _swig_new_instance_method(_snap.TTableRow_GetStrVals)
    __swig_destroy__ = _snap.delete_TTableRow

# Register TTableRow in _snap:
_snap.TTableRow_swigregister(TTableRow)

aaMin = _snap.aaMin

aaMax = _snap.aaMax

aaFirst = _snap.aaFirst

aaLast = _snap.aaLast

aaMean = _snap.aaMean

aaMedian = _snap.aaMedian

aaSum = _snap.aaSum

aaCount = _snap.aaCount

aoAdd = _snap.aoAdd

aoSub = _snap.aoSub

aoMul = _snap.aoMul

aoDiv = _snap.aoDiv

aoMod = _snap.aoMod

aoMin = _snap.aoMin

aoMax = _snap.aoMax

class GroupStmt(object):
    r"""Proxy of C++ GroupStmt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GroupStmt self) -> GroupStmt
        __init__(GroupStmt self, TStrV Attrs) -> GroupStmt

        Parameters
        ----------
        Attrs: TStrV const &

        __init__(GroupStmt self, TStrV Attrs, TBool ordered, TBool physical) -> GroupStmt

        Parameters
        ----------
        Attrs: TStrV const &
        ordered: TBool
        physical: TBool

        __init__(GroupStmt self, GroupStmt stmt) -> GroupStmt

        Parameters
        ----------
        stmt: GroupStmt const &

        """
        _snap.GroupStmt_swiginit(self, _snap.new_GroupStmt(*args))
    UsePhysicalIds = _swig_new_instance_method(_snap.GroupStmt_UsePhysicalIds)
    __eq__ = _swig_new_instance_method(_snap.GroupStmt___eq__)
    IsValid = _swig_new_instance_method(_snap.GroupStmt_IsValid)
    Invalidate = _swig_new_instance_method(_snap.GroupStmt_Invalidate)
    IncludesAttr = _swig_new_instance_method(_snap.GroupStmt_IncludesAttr)
    GetMemUsed = _swig_new_instance_method(_snap.GroupStmt_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.GroupStmt_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.GroupStmt_GetSecHashCd)
    Print = _swig_new_instance_method(_snap.GroupStmt_Print)
    __swig_destroy__ = _snap.delete_GroupStmt

# Register GroupStmt in _snap:
_snap.GroupStmt_swigregister(GroupStmt)

class TRowIterator(object):
    r"""Proxy of C++ TRowIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TRowIterator self) -> TRowIterator
        __init__(TRowIterator self, TInt RowIdx, TTable TablePtr) -> TRowIterator

        Parameters
        ----------
        RowIdx: TInt
        TablePtr: TTable const *

        __init__(TRowIterator self, TRowIterator RowI) -> TRowIterator

        Parameters
        ----------
        RowI: TRowIterator const &

        """
        _snap.TRowIterator_swiginit(self, _snap.new_TRowIterator(*args))
    Next = _swig_new_instance_method(_snap.TRowIterator_Next)
    __lt__ = _swig_new_instance_method(_snap.TRowIterator___lt__)
    __eq__ = _swig_new_instance_method(_snap.TRowIterator___eq__)
    GetRowIdx = _swig_new_instance_method(_snap.TRowIterator_GetRowIdx)
    GetStrMapById = _swig_new_instance_method(_snap.TRowIterator_GetStrMapById)
    GetIntAttr = _swig_new_instance_method(_snap.TRowIterator_GetIntAttr)
    GetFltAttr = _swig_new_instance_method(_snap.TRowIterator_GetFltAttr)
    GetStrAttr = _swig_new_instance_method(_snap.TRowIterator_GetStrAttr)
    GetStrMapByName = _swig_new_instance_method(_snap.TRowIterator_GetStrMapByName)
    CompareAtomicConst = _swig_new_instance_method(_snap.TRowIterator_CompareAtomicConst)
    CompareAtomicConstTStr = _swig_new_instance_method(_snap.TRowIterator_CompareAtomicConstTStr)
    __swig_destroy__ = _snap.delete_TRowIterator

# Register TRowIterator in _snap:
_snap.TRowIterator_swigregister(TRowIterator)

class TRowIteratorWithRemove(object):
    r"""Proxy of C++ TRowIteratorWithRemove class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TRowIteratorWithRemove self) -> TRowIteratorWithRemove
        __init__(TRowIteratorWithRemove self, TInt RowIdx, TTable TablePtr) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowIdx: TInt
        TablePtr: TTable *

        __init__(TRowIteratorWithRemove self, TInt RowIdx, TTable TablePtr, TBool IsStart) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowIdx: TInt
        TablePtr: TTable *
        IsStart: TBool

        __init__(TRowIteratorWithRemove self, TRowIteratorWithRemove RowI) -> TRowIteratorWithRemove

        Parameters
        ----------
        RowI: TRowIteratorWithRemove const &

        """
        _snap.TRowIteratorWithRemove_swiginit(self, _snap.new_TRowIteratorWithRemove(*args))
    Next = _swig_new_instance_method(_snap.TRowIteratorWithRemove_Next)
    __lt__ = _swig_new_instance_method(_snap.TRowIteratorWithRemove___lt__)
    __eq__ = _swig_new_instance_method(_snap.TRowIteratorWithRemove___eq__)
    GetRowIdx = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetRowIdx)
    GetNextRowIdx = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextRowIdx)
    GetNextIntAttr = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextIntAttr)
    GetNextFltAttr = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextFltAttr)
    GetNextStrAttr = _swig_new_instance_method(_snap.TRowIteratorWithRemove_GetNextStrAttr)
    IsFirst = _swig_new_instance_method(_snap.TRowIteratorWithRemove_IsFirst)
    RemoveNext = _swig_new_instance_method(_snap.TRowIteratorWithRemove_RemoveNext)
    CompareAtomicConst = _swig_new_instance_method(_snap.TRowIteratorWithRemove_CompareAtomicConst)
    __swig_destroy__ = _snap.delete_TRowIteratorWithRemove

# Register TRowIteratorWithRemove in _snap:
_snap.TRowIteratorWithRemove_swigregister(TRowIteratorWithRemove)

class TTableIterator(object):
    r"""Proxy of C++ TTableIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, PTableV: 'TVec< PTable > &'):
        r"""
        __init__(TTableIterator self, TVec< PTable > & PTableV) -> TTableIterator

        Parameters
        ----------
        PTableV: TVec< PTable > &

        """
        _snap.TTableIterator_swiginit(self, _snap.new_TTableIterator(PTableV))
    Next = _swig_new_instance_method(_snap.TTableIterator_Next)
    HasNext = _swig_new_instance_method(_snap.TTableIterator_HasNext)
    __swig_destroy__ = _snap.delete_TTableIterator

# Register TTableIterator in _snap:
_snap.TTableIterator_swigregister(TTableIterator)

LoadCrossNet = _snap.LoadCrossNet
LoadMode = _snap.LoadMode
class TTable(object):
    r"""Proxy of C++ TTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SetMP = _swig_new_static_method(_snap.TTable_SetMP)
    GetMP = _swig_new_static_method(_snap.TTable_GetMP)
    NormalizeColName = _swig_new_static_method(_snap.TTable_NormalizeColName)
    NormalizeColNameV = _swig_new_static_method(_snap.TTable_NormalizeColNameV)
    AddIntCol = _swig_new_instance_method(_snap.TTable_AddIntCol)
    AddFltCol = _swig_new_instance_method(_snap.TTable_AddFltCol)
    AddStrCol = _swig_new_instance_method(_snap.TTable_AddStrCol)

    def __init__(self, *args):
        r"""
        __init__(TTable self) -> TTable
        __init__(TTable self, TTableContext Context) -> TTable

        Parameters
        ----------
        Context: TTableContext *

        __init__(TTable self, Schema S, TTableContext Context) -> TTable

        Parameters
        ----------
        S: Schema const &
        Context: TTableContext *

        __init__(TTable self, TSIn SIn, TTableContext Context) -> TTable

        Parameters
        ----------
        SIn: TSIn &
        Context: TTableContext *

        __init__(TTable self, TIntH H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> TTable

        Parameters
        ----------
        H: THash< TInt,TInt > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        __init__(TTable self, TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, TBool IsStrKeys=False) -> TTable

        Parameters
        ----------
        H: THash< TInt,TFlt > const &
        Col1: TStr const &
        Col2: TStr const &
        Context: TTableContext *
        IsStrKeys: TBool const

        __init__(TTable self, TTable Table) -> TTable

        Parameters
        ----------
        Table: TTable const &

        __init__(TTable self, TTable Table, TIntV RowIds) -> TTable

        Parameters
        ----------
        Table: TTable const &
        RowIds: TIntV const &

        """
        _snap.TTable_swiginit(self, _snap.new_TTable(*args))
    New = _swig_new_static_method(_snap.TTable_New)
    LoadSS = _swig_new_static_method(_snap.TTable_LoadSS)
    SaveSS = _swig_new_instance_method(_snap.TTable_SaveSS)
    SaveBin = _swig_new_instance_method(_snap.TTable_SaveBin)
    Load = _swig_new_static_method(_snap.TTable_Load)
    LoadShM = _swig_new_static_method(_snap.TTable_LoadShM)
    Save = _swig_new_instance_method(_snap.TTable_Save)
    Dump = _swig_new_instance_method(_snap.TTable_Dump)
    TableFromHashMap = _swig_new_static_method(_snap.TTable_TableFromHashMap)
    AddRow = _swig_new_instance_method(_snap.TTable_AddRow)
    GetContext = _swig_new_instance_method(_snap.TTable_GetContext)
    ChangeContext = _swig_new_instance_method(_snap.TTable_ChangeContext)
    GetColIdx = _swig_new_instance_method(_snap.TTable_GetColIdx)
    GetIntVal = _swig_new_instance_method(_snap.TTable_GetIntVal)
    GetFltVal = _swig_new_instance_method(_snap.TTable_GetFltVal)
    GetStrVal = _swig_new_instance_method(_snap.TTable_GetStrVal)
    GetStrMapById = _swig_new_instance_method(_snap.TTable_GetStrMapById)
    GetStrMapByName = _swig_new_instance_method(_snap.TTable_GetStrMapByName)
    GetStrValById = _swig_new_instance_method(_snap.TTable_GetStrValById)
    GetStrValByName = _swig_new_instance_method(_snap.TTable_GetStrValByName)
    GetIntRowIdxByVal = _swig_new_instance_method(_snap.TTable_GetIntRowIdxByVal)
    GetStrRowIdxByMap = _swig_new_instance_method(_snap.TTable_GetStrRowIdxByMap)
    GetFltRowIdxByVal = _swig_new_instance_method(_snap.TTable_GetFltRowIdxByVal)
    RequestIndexInt = _swig_new_instance_method(_snap.TTable_RequestIndexInt)
    RequestIndexFlt = _swig_new_instance_method(_snap.TTable_RequestIndexFlt)
    RequestIndexStrMap = _swig_new_instance_method(_snap.TTable_RequestIndexStrMap)
    GetStr = _swig_new_instance_method(_snap.TTable_GetStr)
    GetIntValAtRowIdx = _swig_new_instance_method(_snap.TTable_GetIntValAtRowIdx)
    GetFltValAtRowIdx = _swig_new_instance_method(_snap.TTable_GetFltValAtRowIdx)
    GetSchema = _swig_new_instance_method(_snap.TTable_GetSchema)
    ToGraphSequence = _swig_new_instance_method(_snap.TTable_ToGraphSequence)
    ToVarGraphSequence = _swig_new_instance_method(_snap.TTable_ToVarGraphSequence)
    ToGraphPerGroup = _swig_new_instance_method(_snap.TTable_ToGraphPerGroup)
    ToGraphSequenceIterator = _swig_new_instance_method(_snap.TTable_ToGraphSequenceIterator)
    ToVarGraphSequenceIterator = _swig_new_instance_method(_snap.TTable_ToVarGraphSequenceIterator)
    ToGraphPerGroupIterator = _swig_new_instance_method(_snap.TTable_ToGraphPerGroupIterator)
    NextGraphIterator = _swig_new_instance_method(_snap.TTable_NextGraphIterator)
    IsLastGraphOfSequence = _swig_new_instance_method(_snap.TTable_IsLastGraphOfSequence)
    GetSrcCol = _swig_new_instance_method(_snap.TTable_GetSrcCol)
    SetSrcCol = _swig_new_instance_method(_snap.TTable_SetSrcCol)
    GetDstCol = _swig_new_instance_method(_snap.TTable_GetDstCol)
    SetDstCol = _swig_new_instance_method(_snap.TTable_SetDstCol)
    AddEdgeAttr = _swig_new_instance_method(_snap.TTable_AddEdgeAttr)
    AddSrcNodeAttr = _swig_new_instance_method(_snap.TTable_AddSrcNodeAttr)
    AddDstNodeAttr = _swig_new_instance_method(_snap.TTable_AddDstNodeAttr)
    AddNodeAttr = _swig_new_instance_method(_snap.TTable_AddNodeAttr)
    SetCommonNodeAttrs = _swig_new_instance_method(_snap.TTable_SetCommonNodeAttrs)
    GetSrcNodeIntAttrV = _swig_new_instance_method(_snap.TTable_GetSrcNodeIntAttrV)
    GetDstNodeIntAttrV = _swig_new_instance_method(_snap.TTable_GetDstNodeIntAttrV)
    GetEdgeIntAttrV = _swig_new_instance_method(_snap.TTable_GetEdgeIntAttrV)
    GetSrcNodeFltAttrV = _swig_new_instance_method(_snap.TTable_GetSrcNodeFltAttrV)
    GetDstNodeFltAttrV = _swig_new_instance_method(_snap.TTable_GetDstNodeFltAttrV)
    GetEdgeFltAttrV = _swig_new_instance_method(_snap.TTable_GetEdgeFltAttrV)
    GetSrcNodeStrAttrV = _swig_new_instance_method(_snap.TTable_GetSrcNodeStrAttrV)
    GetDstNodeStrAttrV = _swig_new_instance_method(_snap.TTable_GetDstNodeStrAttrV)
    GetEdgeStrAttrV = _swig_new_instance_method(_snap.TTable_GetEdgeStrAttrV)
    GetNodeTable = _swig_new_static_method(_snap.TTable_GetNodeTable)
    GetEdgeTable = _swig_new_static_method(_snap.TTable_GetEdgeTable)
    GetFltNodePropertyTable = _swig_new_static_method(_snap.TTable_GetFltNodePropertyTable)
    GetColType = _swig_new_instance_method(_snap.TTable_GetColType)
    GetNumRows = _swig_new_instance_method(_snap.TTable_GetNumRows)
    GetNumValidRows = _swig_new_instance_method(_snap.TTable_GetNumValidRows)
    GetRowIdMap = _swig_new_instance_method(_snap.TTable_GetRowIdMap)
    BegRI = _swig_new_instance_method(_snap.TTable_BegRI)
    EndRI = _swig_new_instance_method(_snap.TTable_EndRI)
    BegRIWR = _swig_new_instance_method(_snap.TTable_BegRIWR)
    EndRIWR = _swig_new_instance_method(_snap.TTable_EndRIWR)
    GetPartitionRanges = _swig_new_instance_method(_snap.TTable_GetPartitionRanges)
    Rename = _swig_new_instance_method(_snap.TTable_Rename)
    Unique = _swig_new_instance_method(_snap.TTable_Unique)
    Select = _swig_new_instance_method(_snap.TTable_Select)
    Classify = _swig_new_instance_method(_snap.TTable_Classify)
    SelectAtomic = _swig_new_instance_method(_snap.TTable_SelectAtomic)
    ClassifyAtomic = _swig_new_instance_method(_snap.TTable_ClassifyAtomic)
    SelectAtomicConst = _swig_new_instance_method(_snap.TTable_SelectAtomicConst)
    SelectAtomicIntConst = _swig_new_instance_method(_snap.TTable_SelectAtomicIntConst)
    SelectAtomicStrConst = _swig_new_instance_method(_snap.TTable_SelectAtomicStrConst)
    SelectAtomicFltConst = _swig_new_instance_method(_snap.TTable_SelectAtomicFltConst)
    Group = _swig_new_instance_method(_snap.TTable_Group)
    Count = _swig_new_instance_method(_snap.TTable_Count)
    Order = _swig_new_instance_method(_snap.TTable_Order)
    Aggregate = _swig_new_instance_method(_snap.TTable_Aggregate)
    AggregateCols = _swig_new_instance_method(_snap.TTable_AggregateCols)
    SpliceByGroup = _swig_new_instance_method(_snap.TTable_SpliceByGroup)
    Join = _swig_new_instance_method(_snap.TTable_Join)
    ThresholdJoin = _swig_new_instance_method(_snap.TTable_ThresholdJoin)
    SelfJoin = _swig_new_instance_method(_snap.TTable_SelfJoin)
    SelfSimJoin = _swig_new_instance_method(_snap.TTable_SelfSimJoin)
    SelfSimJoinPerGroup = _swig_new_instance_method(_snap.TTable_SelfSimJoinPerGroup)
    SimJoin = _swig_new_instance_method(_snap.TTable_SimJoin)
    SelectFirstNRows = _swig_new_instance_method(_snap.TTable_SelectFirstNRows)
    Defrag = _swig_new_instance_method(_snap.TTable_Defrag)
    StoreIntCol = _swig_new_instance_method(_snap.TTable_StoreIntCol)
    StoreFltCol = _swig_new_instance_method(_snap.TTable_StoreFltCol)
    StoreStrCol = _swig_new_instance_method(_snap.TTable_StoreStrCol)
    UpdateFltFromTable = _swig_new_instance_method(_snap.TTable_UpdateFltFromTable)
    Union = _swig_new_instance_method(_snap.TTable_Union)
    UnionAll = _swig_new_instance_method(_snap.TTable_UnionAll)
    UnionAllInPlace = _swig_new_instance_method(_snap.TTable_UnionAllInPlace)
    Intersection = _swig_new_instance_method(_snap.TTable_Intersection)
    Minus = _swig_new_instance_method(_snap.TTable_Minus)
    Project = _swig_new_instance_method(_snap.TTable_Project)
    ProjectInPlace = _swig_new_instance_method(_snap.TTable_ProjectInPlace)
    ColMin = _swig_new_instance_method(_snap.TTable_ColMin)
    ColMax = _swig_new_instance_method(_snap.TTable_ColMax)
    ColGenericOp = _swig_new_instance_method(_snap.TTable_ColGenericOp)
    ColAdd = _swig_new_instance_method(_snap.TTable_ColAdd)
    ColSub = _swig_new_instance_method(_snap.TTable_ColSub)
    ColMul = _swig_new_instance_method(_snap.TTable_ColMul)
    ColDiv = _swig_new_instance_method(_snap.TTable_ColDiv)
    ColMod = _swig_new_instance_method(_snap.TTable_ColMod)
    ColConcat = _swig_new_instance_method(_snap.TTable_ColConcat)
    ColConcatConst = _swig_new_instance_method(_snap.TTable_ColConcatConst)
    ReadIntCol = _swig_new_instance_method(_snap.TTable_ReadIntCol)
    ReadFltCol = _swig_new_instance_method(_snap.TTable_ReadFltCol)
    ReadStrCol = _swig_new_instance_method(_snap.TTable_ReadStrCol)
    InitIds = _swig_new_instance_method(_snap.TTable_InitIds)
    IsNextK = _swig_new_instance_method(_snap.TTable_IsNextK)
    PrintSize = _swig_new_instance_method(_snap.TTable_PrintSize)
    PrintContextSize = _swig_new_instance_method(_snap.TTable_PrintContextSize)
    GetMemUsedKB = _swig_new_instance_method(_snap.TTable_GetMemUsedKB)
    GetContextMemUsedKB = _swig_new_instance_method(_snap.TTable_GetContextMemUsedKB)
    __swig_destroy__ = _snap.delete_TTable

# Register TTable in _snap:
_snap.TTable_swigregister(TTable)
TTable_SetMP = _snap.TTable_SetMP
TTable_GetMP = _snap.TTable_GetMP
TTable_NormalizeColName = _snap.TTable_NormalizeColName
TTable_NormalizeColNameV = _snap.TTable_NormalizeColNameV
TTable_New = _snap.TTable_New
TTable_LoadSS = _snap.TTable_LoadSS
TTable_Load = _snap.TTable_Load
TTable_LoadShM = _snap.TTable_LoadShM
TTable_TableFromHashMap = _snap.TTable_TableFromHashMap
TTable_GetNodeTable = _snap.TTable_GetNodeTable
TTable_GetEdgeTable = _snap.TTable_GetEdgeTable
TTable_GetFltNodePropertyTable = _snap.TTable_GetFltNodePropertyTable

class TAttr(object):
    r"""Proxy of C++ TAttr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAttr self) -> TAttr
        __init__(TAttr self, TAttr Attrs) -> TAttr

        Parameters
        ----------
        Attrs: TAttr const &

        __init__(TAttr self, TSIn SIn) -> TAttr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAttr_swiginit(self, _snap.new_TAttr(*args))
    Load = _swig_new_instance_method(_snap.TAttr_Load)
    Save = _swig_new_instance_method(_snap.TAttr_Save)
    Clr = _swig_new_instance_method(_snap.TAttr_Clr)
    GetMemUsed = _swig_new_instance_method(_snap.TAttr_GetMemUsed)
    AddSAttrDat = _swig_new_instance_method(_snap.TAttr_AddSAttrDat)
    GetSAttrDat = _swig_new_instance_method(_snap.TAttr_GetSAttrDat)
    DelSAttrDat = _swig_new_instance_method(_snap.TAttr_DelSAttrDat)
    DelSAttrId = _swig_new_instance_method(_snap.TAttr_DelSAttrId)
    GetSAttrV = _swig_new_instance_method(_snap.TAttr_GetSAttrV)
    GetIdVSAttr = _swig_new_instance_method(_snap.TAttr_GetIdVSAttr)
    AddSAttr = _swig_new_instance_method(_snap.TAttr_AddSAttr)
    GetSAttrId = _swig_new_instance_method(_snap.TAttr_GetSAttrId)
    GetSAttrName = _swig_new_instance_method(_snap.TAttr_GetSAttrName)
    __swig_destroy__ = _snap.delete_TAttr

# Register TAttr in _snap:
_snap.TAttr_swigregister(TAttr)

class TAttrPair(object):
    r"""Proxy of C++ TAttrPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TAttrPair self) -> TAttrPair
        __init__(TAttrPair self, TAttrPair Attrs) -> TAttrPair

        Parameters
        ----------
        Attrs: TAttrPair const &

        __init__(TAttrPair self, TSIn SIn) -> TAttrPair

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TAttrPair_swiginit(self, _snap.new_TAttrPair(*args))
    Save = _swig_new_instance_method(_snap.TAttrPair_Save)
    Clr = _swig_new_instance_method(_snap.TAttrPair_Clr)
    AddSAttrDat = _swig_new_instance_method(_snap.TAttrPair_AddSAttrDat)
    GetSAttrDat = _swig_new_instance_method(_snap.TAttrPair_GetSAttrDat)
    DelSAttrDat = _swig_new_instance_method(_snap.TAttrPair_DelSAttrDat)
    DelSAttrId = _swig_new_instance_method(_snap.TAttrPair_DelSAttrId)
    GetSAttrV = _swig_new_instance_method(_snap.TAttrPair_GetSAttrV)
    GetIdVSAttr = _swig_new_instance_method(_snap.TAttrPair_GetIdVSAttr)
    AddSAttr = _swig_new_instance_method(_snap.TAttrPair_AddSAttr)
    GetSAttrId = _swig_new_instance_method(_snap.TAttrPair_GetSAttrId)
    GetSAttrName = _swig_new_instance_method(_snap.TAttrPair_GetSAttrName)
    __swig_destroy__ = _snap.delete_TAttrPair

# Register TAttrPair in _snap:
_snap.TAttrPair_swigregister(TAttrPair)

CalcEffDiam = _snap.CalcEffDiam
CalcEffDiamPdf = _snap.CalcEffDiamPdf
CalcAvgDiamPdf = _snap.CalcAvgDiamPdf
GetDegreeCentr = _snap.GetDegreeCentr
GetGroupDegreeCentr = _snap.GetGroupDegreeCentr
GetGroupClosenessCentr = _snap.GetGroupClosenessCentr
MaxCPGreedyBetter = _snap.MaxCPGreedyBetter
MaxCPGreedyBetter1 = _snap.MaxCPGreedyBetter1
MaxCPGreedyBetter2 = _snap.MaxCPGreedyBetter2
MaxCPGreedyBetter3 = _snap.MaxCPGreedyBetter3
EventImportance = _snap.EventImportance
Intersect = _snap.Intersect
Intersect1 = _snap.Intersect1
LoadNodeList = _snap.LoadNodeList
GetWeightedFarnessCentr = _snap.GetWeightedFarnessCentr
GetWeightedClosenessCentr = _snap.GetWeightedClosenessCentr
GetWeightedBetweennessCentr = _snap.GetWeightedBetweennessCentr
GetEigenVectorCentr = _snap.GetEigenVectorCentr
GetWeightedPageRank = _snap.GetWeightedPageRank
GetWeightedShortestPath = _snap.GetWeightedShortestPath
CommunityGirvanNewman = _snap.CommunityGirvanNewman
CommunityCNM = _snap.CommunityCNM
Infomap = _snap.Infomap
InfomapOnline = _snap.InfomapOnline
CmtyEvolutionFileBatch = _snap.CmtyEvolutionFileBatch
CmtyEvolutionFileBatchV = _snap.CmtyEvolutionFileBatchV
CmtyEvolutionJson = _snap.CmtyEvolutionJson
CmtyTest = _snap.CmtyTest
ReebSimplify = _snap.ReebSimplify
ReebRefine = _snap.ReebRefine
CmtyGirvanNewmanStep = _snap.CmtyGirvanNewmanStep
GetBiConSzCnt = _snap.GetBiConSzCnt
GetBiCon = _snap.GetBiCon
GetArtPoints = _snap.GetArtPoints
GetEdgeBridges = _snap.GetEdgeBridges
Get1CnComSzCnt = _snap.Get1CnComSzCnt
Get1CnCom = _snap.Get1CnCom
GetMxBiCon = _snap.GetMxBiCon
class TCnCom(object):
    r"""Proxy of C++ TCnCom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NIdV = property(_snap.TCnCom_NIdV_get, _snap.TCnCom_NIdV_set, doc=r"""NIdV : TIntV""")

    def __init__(self, *args):
        r"""
        __init__(TCnCom self) -> TCnCom
        __init__(TCnCom self, TIntV NodeIdV) -> TCnCom

        Parameters
        ----------
        NodeIdV: TIntV const &

        __init__(TCnCom self, TCnCom CC) -> TCnCom

        Parameters
        ----------
        CC: TCnCom const &

        __init__(TCnCom self, TSIn SIn) -> TCnCom

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TCnCom_swiginit(self, _snap.new_TCnCom(*args))
    Save = _swig_new_instance_method(_snap.TCnCom_Save)
    __eq__ = _swig_new_instance_method(_snap.TCnCom___eq__)
    __lt__ = _swig_new_instance_method(_snap.TCnCom___lt__)
    Len = _swig_new_instance_method(_snap.TCnCom_Len)
    Empty = _swig_new_instance_method(_snap.TCnCom_Empty)
    Clr = _swig_new_instance_method(_snap.TCnCom_Clr)
    Add = _swig_new_instance_method(_snap.TCnCom_Add)
    __call__ = _swig_new_instance_method(_snap.TCnCom___call__)
    GetVal = _swig_new_instance_method(_snap.TCnCom_GetVal)
    Sort = _swig_new_instance_method(_snap.TCnCom_Sort)
    IsNIdIn = _swig_new_instance_method(_snap.TCnCom_IsNIdIn)
    GetRndNId = _swig_new_instance_method(_snap.TCnCom_GetRndNId)
    Dump = _swig_new_static_method(_snap.TCnCom_Dump)
    SaveTxt = _swig_new_static_method(_snap.TCnCom_SaveTxt)
    GetPrimHashCd = _swig_new_instance_method(_snap.TCnCom_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TCnCom_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TCnCom

# Register TCnCom in _snap:
_snap.TCnCom_swigregister(TCnCom)
TCnCom_Dump = _snap.TCnCom_Dump
TCnCom_SaveTxt = _snap.TCnCom_SaveTxt

class TArtPointVisitor(object):
    r"""Proxy of C++ TArtPointVisitor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = property(_snap.TArtPointVisitor_VnLowH_get, _snap.TArtPointVisitor_VnLowH_set, doc=r"""VnLowH : THash<(TInt,TIntPr)>""")
    ParentH = property(_snap.TArtPointVisitor_ParentH_get, _snap.TArtPointVisitor_ParentH_set, doc=r"""ParentH : THash<(TInt,TInt)>""")
    ArtSet = property(_snap.TArtPointVisitor_ArtSet_get, _snap.TArtPointVisitor_ArtSet_set, doc=r"""ArtSet : TIntSet""")
    Time = property(_snap.TArtPointVisitor_Time_get, _snap.TArtPointVisitor_Time_set, doc=r"""Time : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TArtPointVisitor self) -> TArtPointVisitor
        __init__(TArtPointVisitor self, int const & Nodes) -> TArtPointVisitor

        Parameters
        ----------
        Nodes: int const &

        """
        _snap.TArtPointVisitor_swiginit(self, _snap.new_TArtPointVisitor(*args))
    DiscoverNode = _swig_new_instance_method(_snap.TArtPointVisitor_DiscoverNode)
    FinishNode = _swig_new_instance_method(_snap.TArtPointVisitor_FinishNode)
    ExamineEdge = _swig_new_instance_method(_snap.TArtPointVisitor_ExamineEdge)
    TreeEdge = _swig_new_instance_method(_snap.TArtPointVisitor_TreeEdge)
    BackEdge = _swig_new_instance_method(_snap.TArtPointVisitor_BackEdge)
    FwdEdge = _swig_new_instance_method(_snap.TArtPointVisitor_FwdEdge)
    __swig_destroy__ = _snap.delete_TArtPointVisitor

# Register TArtPointVisitor in _snap:
_snap.TArtPointVisitor_swigregister(TArtPointVisitor)

class TBiConVisitor(object):
    r"""Proxy of C++ TBiConVisitor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = property(_snap.TBiConVisitor_VnLowH_get, _snap.TBiConVisitor_VnLowH_set, doc=r"""VnLowH : THash<(TInt,TIntPr)>""")
    ParentH = property(_snap.TBiConVisitor_ParentH_get, _snap.TBiConVisitor_ParentH_set, doc=r"""ParentH : THash<(TInt,TInt)>""")
    Stack = property(_snap.TBiConVisitor_Stack_get, _snap.TBiConVisitor_Stack_set, doc=r"""Stack : TSStack<(TIntPr)>""")
    CnComV = property(_snap.TBiConVisitor_CnComV_get, _snap.TBiConVisitor_CnComV_set, doc=r"""CnComV : TCnComV""")
    NSet = property(_snap.TBiConVisitor_NSet_get, _snap.TBiConVisitor_NSet_set, doc=r"""NSet : TIntSet""")
    Time = property(_snap.TBiConVisitor_Time_get, _snap.TBiConVisitor_Time_set, doc=r"""Time : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TBiConVisitor self) -> TBiConVisitor
        __init__(TBiConVisitor self, int const & Nodes) -> TBiConVisitor

        Parameters
        ----------
        Nodes: int const &

        """
        _snap.TBiConVisitor_swiginit(self, _snap.new_TBiConVisitor(*args))
    DiscoverNode = _swig_new_instance_method(_snap.TBiConVisitor_DiscoverNode)
    FinishNode = _swig_new_instance_method(_snap.TBiConVisitor_FinishNode)
    ExamineEdge = _swig_new_instance_method(_snap.TBiConVisitor_ExamineEdge)
    TreeEdge = _swig_new_instance_method(_snap.TBiConVisitor_TreeEdge)
    BackEdge = _swig_new_instance_method(_snap.TBiConVisitor_BackEdge)
    FwdEdge = _swig_new_instance_method(_snap.TBiConVisitor_FwdEdge)
    __swig_destroy__ = _snap.delete_TBiConVisitor

# Register TBiConVisitor in _snap:
_snap.TBiConVisitor_swigregister(TBiConVisitor)

class TForestFire(object):
    r"""Proxy of C++ TForestFire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TForestFire self) -> TForestFire
        __init__(TForestFire self, PNGraph GraphPt, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb=1.0, int const & RndSeed=1) -> TForestFire

        Parameters
        ----------
        GraphPt: PNGraph const &
        ForwBurnProb: double const &
        BackBurnProb: double const &
        DecayProb: double const &
        RndSeed: int const &

        """
        _snap.TForestFire_swiginit(self, _snap.new_TForestFire(*args))
    SetGraph = _swig_new_instance_method(_snap.TForestFire_SetGraph)
    GetGraph = _swig_new_instance_method(_snap.TForestFire_GetGraph)
    SetBurnProb = _swig_new_instance_method(_snap.TForestFire_SetBurnProb)
    SetProbDecay = _swig_new_instance_method(_snap.TForestFire_SetProbDecay)
    Infect = _swig_new_instance_method(_snap.TForestFire_Infect)
    InfectAll = _swig_new_instance_method(_snap.TForestFire_InfectAll)
    InfectRnd = _swig_new_instance_method(_snap.TForestFire_InfectRnd)
    BurnExpFire = _swig_new_instance_method(_snap.TForestFire_BurnExpFire)
    BurnGeoFire = _swig_new_instance_method(_snap.TForestFire_BurnGeoFire)
    GetFireTm = _swig_new_instance_method(_snap.TForestFire_GetFireTm)
    GetBurned = _swig_new_instance_method(_snap.TForestFire_GetBurned)
    GetBurnedNId = _swig_new_instance_method(_snap.TForestFire_GetBurnedNId)
    GetBurnedNIdV = _swig_new_instance_method(_snap.TForestFire_GetBurnedNIdV)
    PlotFire = _swig_new_instance_method(_snap.TForestFire_PlotFire)
    GenGraph = _swig_new_static_method(_snap.TForestFire_GenGraph)
    __swig_destroy__ = _snap.delete_TForestFire

# Register TForestFire in _snap:
_snap.TForestFire_swigregister(TForestFire)
TForestFire_GenGraph = _snap.TForestFire_GenGraph

class TFfGGen(object):
    r"""Proxy of C++ TFfGGen class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    srUndef = _snap.TFfGGen_srUndef
    
    srOk = _snap.TFfGGen_srOk
    
    srFlood = _snap.TFfGGen_srFlood
    
    srTimeLimit = _snap.TFfGGen_srTimeLimit
    
    TimeLimitSec = property(_snap.TFfGGen_TimeLimitSec_get, _snap.TFfGGen_TimeLimitSec_set, doc=r"""TimeLimitSec : int""")

    def __init__(self, BurnExpFireP: 'bool const &', StartNNodes: 'int const &', ForwBurnProb: 'double const &', BackBurnProb: 'double const &', DecayProb: 'double const &', Take2AmbasPrb: 'double const &', OrphanPrb: 'double const &'):
        r"""
        __init__(TFfGGen self, bool const & BurnExpFireP, int const & StartNNodes, double const & ForwBurnProb, double const & BackBurnProb, double const & DecayProb, double const & Take2AmbasPrb, double const & OrphanPrb) -> TFfGGen

        Parameters
        ----------
        BurnExpFireP: bool const &
        StartNNodes: int const &
        ForwBurnProb: double const &
        BackBurnProb: double const &
        DecayProb: double const &
        Take2AmbasPrb: double const &
        OrphanPrb: double const &

        """
        _snap.TFfGGen_swiginit(self, _snap.new_TFfGGen(BurnExpFireP, StartNNodes, ForwBurnProb, BackBurnProb, DecayProb, Take2AmbasPrb, OrphanPrb))
    GetGraph = _swig_new_instance_method(_snap.TFfGGen_GetGraph)
    SetGraph = _swig_new_instance_method(_snap.TFfGGen_SetGraph)
    Clr = _swig_new_instance_method(_snap.TFfGGen_Clr)
    GetParamStr = _swig_new_instance_method(_snap.TFfGGen_GetParamStr)
    AddNodes = _swig_new_instance_method(_snap.TFfGGen_AddNodes)
    GenGraph = _swig_new_instance_method(_snap.TFfGGen_GenGraph)
    PlotFireSize = _swig_new_instance_method(_snap.TFfGGen_PlotFireSize)
    GenFFGraphs = _swig_new_static_method(_snap.TFfGGen_GenFFGraphs)
    __swig_destroy__ = _snap.delete_TFfGGen

# Register TFfGGen in _snap:
_snap.TFfGGen_swigregister(TFfGGen)
TFfGGen_GenFFGraphs = _snap.TFfGGen_GenFFGraphs

class TUndirFFire(object):
    r"""Proxy of C++ TUndirFFire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _BurnProb: 'double const &'=0.3):
        r"""
        __init__(TUndirFFire self, double const & _BurnProb=0.3) -> TUndirFFire

        Parameters
        ----------
        _BurnProb: double const &

        """
        _snap.TUndirFFire_swiginit(self, _snap.new_TUndirFFire(_BurnProb))
    SetGraph = _swig_new_instance_method(_snap.TUndirFFire_SetGraph)
    GetGraph = _swig_new_instance_method(_snap.TUndirFFire_GetGraph)
    GetNBurned = _swig_new_instance_method(_snap.TUndirFFire_GetNBurned)
    GetBurnedNId = _swig_new_instance_method(_snap.TUndirFFire_GetBurnedNId)
    BurnGeoFire = _swig_new_instance_method(_snap.TUndirFFire_BurnGeoFire)
    AddNodes = _swig_new_instance_method(_snap.TUndirFFire_AddNodes)
    __swig_destroy__ = _snap.delete_TUndirFFire

# Register TUndirFFire in _snap:
_snap.TUndirFFire_swigregister(TUndirFFire)

class TNGraphMtx(object):
    r"""Proxy of C++ TNGraphMtx class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraphMtx self, PNGraph GraphPt) -> TNGraphMtx

        Parameters
        ----------
        GraphPt: PNGraph const &

        __init__(TNGraphMtx self, TNGraphMtx GraphMtx) -> TNGraphMtx

        Parameters
        ----------
        GraphMtx: TNGraphMtx const &

        """
        _snap.TNGraphMtx_swiginit(self, _snap.new_TNGraphMtx(*args))
    PGetRows = _swig_new_instance_method(_snap.TNGraphMtx_PGetRows)
    PGetCols = _swig_new_instance_method(_snap.TNGraphMtx_PGetCols)
    PMultiply = _swig_new_instance_method(_snap.TNGraphMtx_PMultiply)
    PMultiplyT = _swig_new_instance_method(_snap.TNGraphMtx_PMultiplyT)
    __swig_destroy__ = _snap.delete_TNGraphMtx

# Register TNGraphMtx in _snap:
_snap.TNGraphMtx_swigregister(TNGraphMtx)

class TUNGraphMtx(object):
    r"""Proxy of C++ TUNGraphMtx class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraphMtx self, PUNGraph GraphPt) -> TUNGraphMtx

        Parameters
        ----------
        GraphPt: PUNGraph const &

        __init__(TUNGraphMtx self, TUNGraphMtx GraphMtx) -> TUNGraphMtx

        Parameters
        ----------
        GraphMtx: TUNGraphMtx const &

        """
        _snap.TUNGraphMtx_swiginit(self, _snap.new_TUNGraphMtx(*args))
    PGetRows = _swig_new_instance_method(_snap.TUNGraphMtx_PGetRows)
    PGetCols = _swig_new_instance_method(_snap.TUNGraphMtx_PGetCols)
    PMultiply = _swig_new_instance_method(_snap.TUNGraphMtx_PMultiply)
    PMultiplyT = _swig_new_instance_method(_snap.TUNGraphMtx_PMultiplyT)
    __swig_destroy__ = _snap.delete_TUNGraphMtx

# Register TUNGraphMtx in _snap:
_snap.TUNGraphMtx_swigregister(TUNGraphMtx)

GetSngVals = _snap.GetSngVals
GetSngVec = _snap.GetSngVec
GetEigVals = _snap.GetEigVals
GetEigVec = _snap.GetEigVec
GetInvParticipRat = _snap.GetInvParticipRat
GetInvParticipRatEig = _snap.GetInvParticipRatEig
LoadEdgeListNet = _snap.LoadEdgeListNet
LoadDyNet = _snap.LoadDyNet
LoadDyNetGraphV = _snap.LoadDyNetGraphV
SaveEdgeListNet = _snap.SaveEdgeListNet
gvlDot = _snap.gvlDot

gvlNeato = _snap.gvlNeato

gvlTwopi = _snap.gvlTwopi

gvlCirco = _snap.gvlCirco

gvlSfdp = _snap.gvlSfdp

GVizDoLayout = _snap.GVizDoLayout
GVizGetLayoutStr = _snap.GVizGetLayoutStr
GenRndBipart = _snap.GenRndBipart
GenRndDegK = _snap.GenRndDegK
GenRndPowerLaw = _snap.GenRndPowerLaw
GenDegSeq = _snap.GenDegSeq
GenPrefAttach = _snap.GenPrefAttach
GenGeoPrefAttach = _snap.GenGeoPrefAttach
GenSmallWorld = _snap.GenSmallWorld
GenForestFire = _snap.GenForestFire
GenCopyModel = _snap.GenCopyModel
GenRMat = _snap.GenRMat
GenRMatEpinions = _snap.GenRMatEpinions
GenRewire = _snap.GenRewire
GenConfModel = _snap.GenConfModel
GetSubGraph = _snap.GetSubGraph
GetEgonet = _snap.GetEgonet
GetCommon = _snap.GetCommon
PlotEigValRank = _snap.PlotEigValRank
PlotEigValDistr = _snap.PlotEigValDistr
PlotInvParticipRat = _snap.PlotInvParticipRat
PlotSngValRank = _snap.PlotSngValRank
PlotSngValDistr = _snap.PlotSngValDistr
PlotSngVec = _snap.PlotSngVec
class TCliqueOverlap(object):
    r"""Proxy of C++ TCliqueOverlap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GetRelativeComplement = _swig_new_static_method(_snap.TCliqueOverlap_GetRelativeComplement)
    GetIntersection = _swig_new_static_method(_snap.TCliqueOverlap_GetIntersection)
    Intersection = _swig_new_static_method(_snap.TCliqueOverlap_Intersection)
    CalculateOverlapMtx = _swig_new_static_method(_snap.TCliqueOverlap_CalculateOverlapMtx)
    GetOverlapCliques = _swig_new_static_method(_snap.TCliqueOverlap_GetOverlapCliques)

    def __init__(self):
        r"""__init__(TCliqueOverlap self) -> TCliqueOverlap"""
        _snap.TCliqueOverlap_swiginit(self, _snap.new_TCliqueOverlap())
    GetMaximalCliques = _swig_new_instance_method(_snap.TCliqueOverlap_GetMaximalCliques)
    GetMaxCliques = _swig_new_static_method(_snap.TCliqueOverlap_GetMaxCliques)
    GetCPMCommunities = _swig_new_static_method(_snap.TCliqueOverlap_GetCPMCommunities)
    __swig_destroy__ = _snap.delete_TCliqueOverlap

# Register TCliqueOverlap in _snap:
_snap.TCliqueOverlap_swigregister(TCliqueOverlap)
EDGES_START = cvar.EDGES_START
NODES_START = cvar.NODES_START
END_SENTINEL = cvar.END_SENTINEL
SRC_ID_NAME = cvar.SRC_ID_NAME
DST_ID_NAME = cvar.DST_ID_NAME
NID_NAME = cvar.NID_NAME
INT_TYPE_PREFIX = cvar.INT_TYPE_PREFIX
FLT_TYPE_PREFIX = cvar.FLT_TYPE_PREFIX
STR_TYPE_PREFIX = cvar.STR_TYPE_PREFIX
NULL_VAL = cvar.NULL_VAL
TCliqueOverlap_GetRelativeComplement = _snap.TCliqueOverlap_GetRelativeComplement
TCliqueOverlap_GetIntersection = _snap.TCliqueOverlap_GetIntersection
TCliqueOverlap_Intersection = _snap.TCliqueOverlap_Intersection
TCliqueOverlap_CalculateOverlapMtx = _snap.TCliqueOverlap_CalculateOverlapMtx
TCliqueOverlap_GetOverlapCliques = _snap.TCliqueOverlap_GetOverlapCliques
TCliqueOverlap_GetMaxCliques = _snap.TCliqueOverlap_GetMaxCliques
TCliqueOverlap_GetCPMCommunities = _snap.TCliqueOverlap_GetCPMCommunities

class TAGM(object):
    r"""Proxy of C++ TAGM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    RndConnectInsideCommunity = _swig_new_static_method(_snap.TAGM_RndConnectInsideCommunity)
    GenAGM = _swig_new_static_method(_snap.TAGM_GenAGM)

    def __init__(self):
        r"""__init__(TAGM self) -> TAGM"""
        _snap.TAGM_swiginit(self, _snap.new_TAGM())
    __swig_destroy__ = _snap.delete_TAGM

# Register TAGM in _snap:
_snap.TAGM_swigregister(TAGM)
TAGM_RndConnectInsideCommunity = _snap.TAGM_RndConnectInsideCommunity
TAGM_GenAGM = _snap.TAGM_GenAGM

class TAGMUtil(object):
    r"""Proxy of C++ TAGMUtil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GenPLSeq = _swig_new_static_method(_snap.TAGMUtil_GenPLSeq)
    ConnectCmtyVV = _swig_new_static_method(_snap.TAGMUtil_ConnectCmtyVV)
    GenCmtyVVFromPL = _swig_new_static_method(_snap.TAGMUtil_GenCmtyVVFromPL)
    GetNodeMembership = _swig_new_static_method(_snap.TAGMUtil_GetNodeMembership)
    LoadCmtyVV = _swig_new_static_method(_snap.TAGMUtil_LoadCmtyVV)
    DumpCmtyVV = _swig_new_static_method(_snap.TAGMUtil_DumpCmtyVV)
    TotalMemberships = _swig_new_static_method(_snap.TAGMUtil_TotalMemberships)
    RewireCmtyVV = _swig_new_static_method(_snap.TAGMUtil_RewireCmtyVV)
    RewireCmtyNID = _swig_new_static_method(_snap.TAGMUtil_RewireCmtyNID)
    GetIntersection = _swig_new_static_method(_snap.TAGMUtil_GetIntersection)
    Intersection = _swig_new_static_method(_snap.TAGMUtil_Intersection)
    GetConductance = _swig_new_static_method(_snap.TAGMUtil_GetConductance)
    GetNbhCom = _swig_new_static_method(_snap.TAGMUtil_GetNbhCom)
    SaveGephi = _swig_new_static_method(_snap.TAGMUtil_SaveGephi)
    SaveBipartiteGephi = _swig_new_static_method(_snap.TAGMUtil_SaveBipartiteGephi)
    FindComsByAGM = _swig_new_static_method(_snap.TAGMUtil_FindComsByAGM)

    def __init__(self):
        r"""__init__(TAGMUtil self) -> TAGMUtil"""
        _snap.TAGMUtil_swiginit(self, _snap.new_TAGMUtil())
    __swig_destroy__ = _snap.delete_TAGMUtil

# Register TAGMUtil in _snap:
_snap.TAGMUtil_swigregister(TAGMUtil)
TAGMUtil_GenPLSeq = _snap.TAGMUtil_GenPLSeq
TAGMUtil_ConnectCmtyVV = _snap.TAGMUtil_ConnectCmtyVV
TAGMUtil_GenCmtyVVFromPL = _snap.TAGMUtil_GenCmtyVVFromPL
TAGMUtil_GetNodeMembership = _snap.TAGMUtil_GetNodeMembership
TAGMUtil_LoadCmtyVV = _snap.TAGMUtil_LoadCmtyVV
TAGMUtil_DumpCmtyVV = _snap.TAGMUtil_DumpCmtyVV
TAGMUtil_TotalMemberships = _snap.TAGMUtil_TotalMemberships
TAGMUtil_RewireCmtyVV = _snap.TAGMUtil_RewireCmtyVV
TAGMUtil_RewireCmtyNID = _snap.TAGMUtil_RewireCmtyNID
TAGMUtil_GetIntersection = _snap.TAGMUtil_GetIntersection
TAGMUtil_Intersection = _snap.TAGMUtil_Intersection
TAGMUtil_GetConductance = _snap.TAGMUtil_GetConductance
TAGMUtil_GetNbhCom = _snap.TAGMUtil_GetNbhCom
TAGMUtil_SaveGephi = _snap.TAGMUtil_SaveGephi
TAGMUtil_SaveBipartiteGephi = _snap.TAGMUtil_SaveBipartiteGephi
TAGMUtil_FindComsByAGM = _snap.TAGMUtil_FindComsByAGM

class TLogRegFit(object):
    r"""Proxy of C++ TLogRegFit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TLogRegFit self) -> TLogRegFit"""
        _snap.TLogRegFit_swiginit(self, _snap.new_TLogRegFit())
    __swig_destroy__ = _snap.delete_TLogRegFit
    CalcLogRegGradient = _swig_new_instance_method(_snap.TLogRegFit_CalcLogRegGradient)
    CalcLogRegNewton = _swig_new_instance_method(_snap.TLogRegFit_CalcLogRegNewton)
    MLEGradient = _swig_new_instance_method(_snap.TLogRegFit_MLEGradient)
    MLENewton = _swig_new_instance_method(_snap.TLogRegFit_MLENewton)
    GetStepSizeByLineSearch = _swig_new_instance_method(_snap.TLogRegFit_GetStepSizeByLineSearch)
    Likelihood = _swig_new_instance_method(_snap.TLogRegFit_Likelihood)
    Gradient = _swig_new_instance_method(_snap.TLogRegFit_Gradient)
    Hessian = _swig_new_instance_method(_snap.TLogRegFit_Hessian)
    GetNewtonStep = _swig_new_instance_method(_snap.TLogRegFit_GetNewtonStep)

# Register TLogRegFit in _snap:
_snap.TLogRegFit_swigregister(TLogRegFit)

class TLogRegPredict(object):
    r"""Proxy of C++ TLogRegPredict class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TLogRegPredict self, TFltV _bb) -> TLogRegPredict

        Parameters
        ----------
        _bb: TFltV const &

        __init__(TLogRegPredict self, TSIn SIn) -> TLogRegPredict

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TLogRegPredict_swiginit(self, _snap.new_TLogRegPredict(*args))
    Load = _swig_new_static_method(_snap.TLogRegPredict_Load)
    Save = _swig_new_instance_method(_snap.TLogRegPredict_Save)
    GetTheta = _swig_new_instance_method(_snap.TLogRegPredict_GetTheta)
    GetCfy = _swig_new_instance_method(_snap.TLogRegPredict_GetCfy)
    PrintTheta = _swig_new_instance_method(_snap.TLogRegPredict_PrintTheta)
    __swig_destroy__ = _snap.delete_TLogRegPredict

# Register TLogRegPredict in _snap:
_snap.TLogRegPredict_swigregister(TLogRegPredict)
TLogRegPredict_Load = _snap.TLogRegPredict_Load

class TAGMFast(object):
    r"""Proxy of C++ TAGMFast class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HOVIDSV = property(_snap.TAGMFast_HOVIDSV_get, _snap.TAGMFast_HOVIDSV_set, doc=r"""HOVIDSV : TVec<(TIntSet)>""")
    MinVal = property(_snap.TAGMFast_MinVal_get, _snap.TAGMFast_MinVal_set, doc=r"""MinVal : TFlt""")
    MaxVal = property(_snap.TAGMFast_MaxVal_get, _snap.TAGMFast_MaxVal_set, doc=r"""MaxVal : TFlt""")
    NegWgt = property(_snap.TAGMFast_NegWgt_get, _snap.TAGMFast_NegWgt_set, doc=r"""NegWgt : TFlt""")
    PNoCom = property(_snap.TAGMFast_PNoCom_get, _snap.TAGMFast_PNoCom_set, doc=r"""PNoCom : TFlt""")
    DoParallel = property(_snap.TAGMFast_DoParallel_get, _snap.TAGMFast_DoParallel_set, doc=r"""DoParallel : TBool""")

    def __init__(self, GraphPt: 'PUNGraph', InitComs: 'int const &', RndSeed: 'int const'=0):
        r"""
        __init__(TAGMFast self, PUNGraph GraphPt, int const & InitComs, int const RndSeed=0) -> TAGMFast

        Parameters
        ----------
        GraphPt: PUNGraph const &
        InitComs: int const &
        RndSeed: int const

        """
        _snap.TAGMFast_swiginit(self, _snap.new_TAGMFast(GraphPt, InitComs, RndSeed))
    SetGraph = _swig_new_instance_method(_snap.TAGMFast_SetGraph)
    SetRegCoef = _swig_new_instance_method(_snap.TAGMFast_SetRegCoef)
    GetRegCoef = _swig_new_instance_method(_snap.TAGMFast_GetRegCoef)
    RandomInit = _swig_new_instance_method(_snap.TAGMFast_RandomInit)
    NeighborComInit = _swig_new_instance_method(_snap.TAGMFast_NeighborComInit)
    SetCmtyVV = _swig_new_instance_method(_snap.TAGMFast_SetCmtyVV)
    Likelihood = _swig_new_instance_method(_snap.TAGMFast_Likelihood)
    LikelihoodForRow = _swig_new_instance_method(_snap.TAGMFast_LikelihoodForRow)
    MLENewton = _swig_new_instance_method(_snap.TAGMFast_MLENewton)
    GradientForRow = _swig_new_instance_method(_snap.TAGMFast_GradientForRow)
    GradientForOneVar = _swig_new_instance_method(_snap.TAGMFast_GradientForOneVar)
    HessianForOneVar = _swig_new_instance_method(_snap.TAGMFast_HessianForOneVar)
    LikelihoodForOneVar = _swig_new_instance_method(_snap.TAGMFast_LikelihoodForOneVar)
    GetCmtyVV = _swig_new_instance_method(_snap.TAGMFast_GetCmtyVV)
    FindComsByCV = _swig_new_instance_method(_snap.TAGMFast_FindComsByCV)
    LikelihoodHoldOut = _swig_new_instance_method(_snap.TAGMFast_LikelihoodHoldOut)
    GetStepSizeByLineSearch = _swig_new_instance_method(_snap.TAGMFast_GetStepSizeByLineSearch)
    MLEGradAscent = _swig_new_instance_method(_snap.TAGMFast_MLEGradAscent)
    MLEGradAscentParallel = _swig_new_instance_method(_snap.TAGMFast_MLEGradAscentParallel)
    Save = _swig_new_instance_method(_snap.TAGMFast_Save)
    Load = _swig_new_instance_method(_snap.TAGMFast_Load)
    GetCom = _swig_new_instance_method(_snap.TAGMFast_GetCom)
    AddCom = _swig_new_instance_method(_snap.TAGMFast_AddCom)
    DelCom = _swig_new_instance_method(_snap.TAGMFast_DelCom)
    DotProduct = _swig_new_instance_method(_snap.TAGMFast_DotProduct)
    Prediction = _swig_new_instance_method(_snap.TAGMFast_Prediction)
    Sum = _swig_new_instance_method(_snap.TAGMFast_Sum)
    Norm2 = _swig_new_instance_method(_snap.TAGMFast_Norm2)
    __swig_destroy__ = _snap.delete_TAGMFast

# Register TAGMFast in _snap:
_snap.TAGMFast_swigregister(TAGMFast)

class TAGMFastUtil(object):
    r"""Proxy of C++ TAGMFastUtil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TAGMFastUtil self) -> TAGMFastUtil"""
        _snap.TAGMFastUtil_swiginit(self, _snap.new_TAGMFastUtil())
    __swig_destroy__ = _snap.delete_TAGMFastUtil

# Register TAGMFastUtil in _snap:
_snap.TAGMFastUtil_swigregister(TAGMFastUtil)

class TAGMFit(object):
    r"""Proxy of C++ TAGMFit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TAGMFit

    def __init__(self, *args):
        r"""
        __init__(TAGMFit self) -> TAGMFit
        __init__(TAGMFit self, PUNGraph GraphPt, TIntIntVV CmtyVVPt, int const RndSeed=0) -> TAGMFit

        Parameters
        ----------
        GraphPt: PUNGraph const &
        CmtyVVPt: TVec< TIntV > const &
        RndSeed: int const

        __init__(TAGMFit self, PUNGraph GraphPt, int const InitComs, int const RndSeed=0) -> TAGMFit

        Parameters
        ----------
        GraphPt: PUNGraph const &
        InitComs: int const
        RndSeed: int const

        __init__(TAGMFit self, PUNGraph GraphPt, TIntIntVV CmtyVVPt, TRnd RndPt) -> TAGMFit

        Parameters
        ----------
        GraphPt: PUNGraph const &
        CmtyVVPt: TVec< TIntV > const &
        RndPt: TRnd const &

        """
        _snap.TAGMFit_swiginit(self, _snap.new_TAGMFit(*args))
    Save = _swig_new_instance_method(_snap.TAGMFit_Save)
    Load = _swig_new_instance_method(_snap.TAGMFit_Load)
    RandomInitCmtyVV = _swig_new_instance_method(_snap.TAGMFit_RandomInitCmtyVV)
    AddBaseCmty = _swig_new_instance_method(_snap.TAGMFit_AddBaseCmty)
    Likelihood = _swig_new_instance_method(_snap.TAGMFit_Likelihood)
    SetRegCoef = _swig_new_instance_method(_snap.TAGMFit_SetRegCoef)
    GetEdgeJointCom = _swig_new_instance_method(_snap.TAGMFit_GetEdgeJointCom)
    NeighborComInit = _swig_new_instance_method(_snap.TAGMFit_NeighborComInit)
    GradLogLForLambda = _swig_new_instance_method(_snap.TAGMFit_GradLogLForLambda)
    MLEGradAscentGivenCAG = _swig_new_instance_method(_snap.TAGMFit_MLEGradAscentGivenCAG)
    SetDefaultPNoCom = _swig_new_instance_method(_snap.TAGMFit_SetDefaultPNoCom)
    SetPNoCom = _swig_new_instance_method(_snap.TAGMFit_SetPNoCom)
    GetPNoCom = _swig_new_instance_method(_snap.TAGMFit_GetPNoCom)
    CalcPNoComByCmtyVV = _swig_new_instance_method(_snap.TAGMFit_CalcPNoComByCmtyVV)
    SelectLambdaSum = _swig_new_instance_method(_snap.TAGMFit_SelectLambdaSum)
    RandomInit = _swig_new_instance_method(_snap.TAGMFit_RandomInit)
    RunMCMC = _swig_new_instance_method(_snap.TAGMFit_RunMCMC)
    SampleTransition = _swig_new_instance_method(_snap.TAGMFit_SampleTransition)
    InitNodeData = _swig_new_instance_method(_snap.TAGMFit_InitNodeData)
    LeaveCom = _swig_new_instance_method(_snap.TAGMFit_LeaveCom)
    JoinCom = _swig_new_instance_method(_snap.TAGMFit_JoinCom)
    RemoveEmptyCom = _swig_new_instance_method(_snap.TAGMFit_RemoveEmptyCom)
    SeekLeave = _swig_new_instance_method(_snap.TAGMFit_SeekLeave)
    SeekJoin = _swig_new_instance_method(_snap.TAGMFit_SeekJoin)
    SeekSwitch = _swig_new_instance_method(_snap.TAGMFit_SeekSwitch)
    GetStepSizeByLineSearchForLambda = _swig_new_instance_method(_snap.TAGMFit_GetStepSizeByLineSearchForLambda)
    SetLambdaV = _swig_new_instance_method(_snap.TAGMFit_SetLambdaV)
    GetLambdaV = _swig_new_instance_method(_snap.TAGMFit_GetLambdaV)
    GetQV = _swig_new_instance_method(_snap.TAGMFit_GetQV)
    GetCmtyVV = _swig_new_instance_method(_snap.TAGMFit_GetCmtyVV)
    SetCmtyVV = _swig_new_instance_method(_snap.TAGMFit_SetCmtyVV)
    PrintSummary = _swig_new_instance_method(_snap.TAGMFit_PrintSummary)

# Register TAGMFit in _snap:
_snap.TAGMFit_swigregister(TAGMFit)

node2vec = _snap.node2vec
class TIntPr(object):
    r"""Proxy of C++ TPair< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntPr_Val1_get, _snap.TIntPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntPr_Val2_get, _snap.TIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntPr self) -> TIntPr
        __init__(TIntPr self, TIntPr Pair) -> TIntPr

        Parameters
        ----------
        Pair: TPair< TInt,TInt > const &

        __init__(TIntPr self, TInt _Val1, TInt _Val2) -> TIntPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &

        __init__(TIntPr self, TSIn SIn) -> TIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPr_swiginit(self, _snap.new_TIntPr(*args))
    Save = _swig_new_instance_method(_snap.TIntPr_Save)
    Load = _swig_new_instance_method(_snap.TIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntPr

# Register TIntPr in _snap:
_snap.TIntPr_swigregister(TIntPr)

class TFltPr(object):
    r"""Proxy of C++ TPair< TFlt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TFltPr_Val1_get, _snap.TFltPr_Val1_set, doc=r"""Val1 : TFlt""")
    Val2 = property(_snap.TFltPr_Val2_get, _snap.TFltPr_Val2_set, doc=r"""Val2 : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TFltPr self) -> TFltPr
        __init__(TFltPr self, TFltPr Pair) -> TFltPr

        Parameters
        ----------
        Pair: TPair< TFlt,TFlt > const &

        __init__(TFltPr self, TFlt _Val1, TFlt _Val2) -> TFltPr

        Parameters
        ----------
        _Val1: TFlt const &
        _Val2: TFlt const &

        __init__(TFltPr self, TSIn SIn) -> TFltPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltPr_swiginit(self, _snap.new_TFltPr(*args))
    Save = _swig_new_instance_method(_snap.TFltPr_Save)
    Load = _swig_new_instance_method(_snap.TFltPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TFltPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TFltPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TFltPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TFltPr_GetVal2)
    __swig_destroy__ = _snap.delete_TFltPr

# Register TFltPr in _snap:
_snap.TFltPr_swigregister(TFltPr)

class TStrIntPr(object):
    r"""Proxy of C++ TPair< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrIntPr_Val1_get, _snap.TStrIntPr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrIntPr_Val2_get, _snap.TStrIntPr_Val2_set, doc=r"""Val2 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TStrIntPr self) -> TStrIntPr
        __init__(TStrIntPr self, TStrIntPr Pair) -> TStrIntPr

        Parameters
        ----------
        Pair: TPair< TStr,TInt > const &

        __init__(TStrIntPr self, TStr _Val1, TInt _Val2) -> TStrIntPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: TInt const &

        __init__(TStrIntPr self, TSIn SIn) -> TStrIntPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPr_swiginit(self, _snap.new_TStrIntPr(*args))
    Save = _swig_new_instance_method(_snap.TStrIntPr_Save)
    Load = _swig_new_instance_method(_snap.TStrIntPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TStrIntPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrIntPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrIntPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrIntPr

# Register TStrIntPr in _snap:
_snap.TStrIntPr_swigregister(TStrIntPr)

class TIntTr(object):
    r"""Proxy of C++ TTriple< TInt,TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntTr_Val1_get, _snap.TIntTr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntTr_Val2_get, _snap.TIntTr_Val2_set, doc=r"""Val2 : TInt""")
    Val3 = property(_snap.TIntTr_Val3_get, _snap.TIntTr_Val3_set, doc=r"""Val3 : TInt""")

    def __init__(self, *args):
        r"""
        __init__(TIntTr self) -> TIntTr
        __init__(TIntTr self, TIntTr Triple) -> TIntTr

        Parameters
        ----------
        Triple: TTriple< TInt,TInt,TInt > const &

        __init__(TIntTr self, TInt _Val1, TInt _Val2, TInt _Val3) -> TIntTr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TInt const &
        _Val3: TInt const &

        __init__(TIntTr self, TSIn SIn) -> TIntTr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntTr_swiginit(self, _snap.new_TIntTr(*args))
    Save = _swig_new_instance_method(_snap.TIntTr_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntTr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTr___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntTr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntTr_GetSecHashCd)
    GetMemUsed = _swig_new_instance_method(_snap.TIntTr_GetMemUsed)
    GetVal = _swig_new_instance_method(_snap.TIntTr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntTr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntTr_GetVal2)
    GetVal3 = _swig_new_instance_method(_snap.TIntTr_GetVal3)
    __swig_destroy__ = _snap.delete_TIntTr

# Register TIntTr in _snap:
_snap.TIntTr_swigregister(TIntTr)

class TIntFltKd(object):
    r"""Proxy of C++ TKeyDat< TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = property(_snap.TIntFltKd_Key_get, _snap.TIntFltKd_Key_set, doc=r"""Key : TInt""")
    Dat = property(_snap.TIntFltKd_Dat_get, _snap.TIntFltKd_Dat_set, doc=r"""Dat : TFlt""")

    def __init__(self, *args):
        r"""
        __init__(TIntFltKd self) -> TIntFltKd
        __init__(TIntFltKd self, TIntFltKd KeyDat) -> TIntFltKd

        Parameters
        ----------
        KeyDat: TKeyDat< TInt,TFlt > const &

        __init__(TIntFltKd self, TInt _Key) -> TIntFltKd

        Parameters
        ----------
        _Key: TInt const &

        __init__(TIntFltKd self, TInt _Key, TFlt _Dat) -> TIntFltKd

        Parameters
        ----------
        _Key: TInt const &
        _Dat: TFlt const &

        __init__(TIntFltKd self, TSIn SIn) -> TIntFltKd

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltKd_swiginit(self, _snap.new_TIntFltKd(*args))
    Save = _swig_new_instance_method(_snap.TIntFltKd_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltKd___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltKd___lt__)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltKd_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltKd_GetSecHashCd)
    __swig_destroy__ = _snap.delete_TIntFltKd

# Register TIntFltKd in _snap:
_snap.TIntFltKd_swigregister(TIntFltKd)

class TIntStrPr(object):
    r"""Proxy of C++ TPair< TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TIntStrPr_Val1_get, _snap.TIntStrPr_Val1_set, doc=r"""Val1 : TInt""")
    Val2 = property(_snap.TIntStrPr_Val2_get, _snap.TIntStrPr_Val2_set, doc=r"""Val2 : TStr""")

    def __init__(self, *args):
        r"""
        __init__(TIntStrPr self) -> TIntStrPr
        __init__(TIntStrPr self, TIntStrPr Pair) -> TIntStrPr

        Parameters
        ----------
        Pair: TPair< TInt,TStr > const &

        __init__(TIntStrPr self, TInt _Val1, TStr _Val2) -> TIntStrPr

        Parameters
        ----------
        _Val1: TInt const &
        _Val2: TStr const &

        __init__(TIntStrPr self, TSIn SIn) -> TIntStrPr

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrPr_swiginit(self, _snap.new_TIntStrPr(*args))
    Save = _swig_new_instance_method(_snap.TIntStrPr_Save)
    Load = _swig_new_instance_method(_snap.TIntStrPr_Load)
    __eq__ = _swig_new_instance_method(_snap.TIntStrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrPr___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrPr_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntStrPr_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntStrPr_GetSecHashCd)
    GetVal = _swig_new_instance_method(_snap.TIntStrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TIntStrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TIntStrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TIntStrPr

# Register TIntStrPr in _snap:
_snap.TIntStrPr_swigregister(TIntStrPr)

class TIntV(object):
    r"""Proxy of C++ TVec< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntV

    def __init__(self, *args):
        r"""
        __init__(TIntV self) -> TIntV
        __init__(TIntV self, TIntV Vec) -> TIntV

        Parameters
        ----------
        Vec: TVec< TInt,int > const &

        __init__(TIntV self, int const & _Vals) -> TIntV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntV self, int const & _MxVals, int const & _Vals) -> TIntV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntV self, TInt _ValT, int const & _Vals) -> TIntV

        Parameters
        ----------
        _ValT: TInt *
        _Vals: int const &

        __init__(TIntV self, TSIn SIn) -> TIntV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntV_swiginit(self, _snap.new_TIntV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntV_Load)
    Save = _swig_new_instance_method(_snap.TIntV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntV_Empty)
    Len = _swig_new_instance_method(_snap.TIntV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntV_GetI)
    Add = _swig_new_instance_method(_snap.TIntV_Add)
    AddV = _swig_new_instance_method(_snap.TIntV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntV_Ins)
    Del = _swig_new_instance_method(_snap.TIntV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntV_Union)
    Diff = _swig_new_instance_method(_snap.TIntV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntV_GetV)

# Register TIntV in _snap:
_snap.TIntV_swigregister(TIntV)
TIntV_SwapI = _snap.TIntV_SwapI
TIntV_GetV = _snap.TIntV_GetV

class TFltV(object):
    r"""Proxy of C++ TVec< TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltV

    def __init__(self, *args):
        r"""
        __init__(TFltV self) -> TFltV
        __init__(TFltV self, TFltV Vec) -> TFltV

        Parameters
        ----------
        Vec: TVec< TFlt,int > const &

        __init__(TFltV self, int const & _Vals) -> TFltV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltV self, int const & _MxVals, int const & _Vals) -> TFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltV self, TFlt _ValT, int const & _Vals) -> TFltV

        Parameters
        ----------
        _ValT: TFlt *
        _Vals: int const &

        __init__(TFltV self, TSIn SIn) -> TFltV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltV_swiginit(self, _snap.new_TFltV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltV_Load)
    Save = _swig_new_instance_method(_snap.TFltV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltV_Empty)
    Len = _swig_new_instance_method(_snap.TFltV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltV_GetI)
    Add = _swig_new_instance_method(_snap.TFltV_Add)
    AddV = _swig_new_instance_method(_snap.TFltV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltV_Ins)
    Del = _swig_new_instance_method(_snap.TFltV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltV_Union)
    Diff = _swig_new_instance_method(_snap.TFltV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltV_GetV)

# Register TFltV in _snap:
_snap.TFltV_swigregister(TFltV)
TFltV_SwapI = _snap.TFltV_SwapI
TFltV_GetV = _snap.TFltV_GetV

class TStrV(object):
    r"""Proxy of C++ TVec< TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrV

    def __init__(self, *args):
        r"""
        __init__(TStrV self) -> TStrV
        __init__(TStrV self, TStrV Vec) -> TStrV

        Parameters
        ----------
        Vec: TVec< TStr,int > const &

        __init__(TStrV self, int const & _Vals) -> TStrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrV self, int const & _MxVals, int const & _Vals) -> TStrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrV self, TStr _ValT, int const & _Vals) -> TStrV

        Parameters
        ----------
        _ValT: TStr *
        _Vals: int const &

        __init__(TStrV self, TSIn SIn) -> TStrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrV_swiginit(self, _snap.new_TStrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrV_Load)
    Save = _swig_new_instance_method(_snap.TStrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrV_GetV)

# Register TStrV in _snap:
_snap.TStrV_swigregister(TStrV)
TStrV_SwapI = _snap.TStrV_SwapI
TStrV_GetV = _snap.TStrV_GetV

class TIntPrV(object):
    r"""Proxy of C++ TVec< TIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntPrV

    def __init__(self, *args):
        r"""
        __init__(TIntPrV self) -> TIntPrV
        __init__(TIntPrV self, TIntPrV Vec) -> TIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TInt,TInt >,int > const &

        __init__(TIntPrV self, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntPrV self, int const & _MxVals, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntPrV self, TIntPr _ValT, int const & _Vals) -> TIntPrV

        Parameters
        ----------
        _ValT: TPair< TInt,TInt > *
        _Vals: int const &

        __init__(TIntPrV self, TSIn SIn) -> TIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrV_swiginit(self, _snap.new_TIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntPrV_GetV)

# Register TIntPrV in _snap:
_snap.TIntPrV_swigregister(TIntPrV)
TIntPrV_SwapI = _snap.TIntPrV_SwapI
TIntPrV_GetV = _snap.TIntPrV_GetV

class TFltPrV(object):
    r"""Proxy of C++ TVec< TFltPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltPrV

    def __init__(self, *args):
        r"""
        __init__(TFltPrV self) -> TFltPrV
        __init__(TFltPrV self, TFltPrV Vec) -> TFltPrV

        Parameters
        ----------
        Vec: TVec< TPair< TFlt,TFlt >,int > const &

        __init__(TFltPrV self, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltPrV self, int const & _MxVals, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltPrV self, TFltPr _ValT, int const & _Vals) -> TFltPrV

        Parameters
        ----------
        _ValT: TPair< TFlt,TFlt > *
        _Vals: int const &

        __init__(TFltPrV self, TSIn SIn) -> TFltPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltPrV_swiginit(self, _snap.new_TFltPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltPrV_Load)
    Save = _swig_new_instance_method(_snap.TFltPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltPrV_Empty)
    Len = _swig_new_instance_method(_snap.TFltPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltPrV_GetI)
    Add = _swig_new_instance_method(_snap.TFltPrV_Add)
    AddV = _swig_new_instance_method(_snap.TFltPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltPrV_Ins)
    Del = _swig_new_instance_method(_snap.TFltPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltPrV_Union)
    Diff = _swig_new_instance_method(_snap.TFltPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltPrV_GetV)

# Register TFltPrV in _snap:
_snap.TFltPrV_swigregister(TFltPrV)
TFltPrV_SwapI = _snap.TFltPrV_SwapI
TFltPrV_GetV = _snap.TFltPrV_GetV

class TStrIntPrV(object):
    r"""Proxy of C++ TVec< TStrIntPr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrIntPrV

    def __init__(self, *args):
        r"""
        __init__(TStrIntPrV self) -> TStrIntPrV
        __init__(TStrIntPrV self, TStrIntPrV Vec) -> TStrIntPrV

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TInt >,int > const &

        __init__(TStrIntPrV self, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TStrIntPrV self, int const & _MxVals, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TStrIntPrV self, TStrIntPr _ValT, int const & _Vals) -> TStrIntPrV

        Parameters
        ----------
        _ValT: TPair< TStr,TInt > *
        _Vals: int const &

        __init__(TStrIntPrV self, TSIn SIn) -> TStrIntPrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntPrV_swiginit(self, _snap.new_TStrIntPrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntPrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntPrV_Load)
    Save = _swig_new_instance_method(_snap.TStrIntPrV_Save)
    __add__ = _swig_new_instance_method(_snap.TStrIntPrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TStrIntPrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntPrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntPrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TStrIntPrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TStrIntPrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TStrIntPrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TStrIntPrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TStrIntPrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TStrIntPrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TStrIntPrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TStrIntPrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TStrIntPrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TStrIntPrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TStrIntPrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TStrIntPrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TStrIntPrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TStrIntPrV_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntPrV_Len)
    Reserved = _swig_new_instance_method(_snap.TStrIntPrV_Reserved)
    Last = _swig_new_instance_method(_snap.TStrIntPrV_Last)
    LastValN = _swig_new_instance_method(_snap.TStrIntPrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TStrIntPrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TStrIntPrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TStrIntPrV_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntPrV_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntPrV_GetI)
    Add = _swig_new_instance_method(_snap.TStrIntPrV_Add)
    AddV = _swig_new_instance_method(_snap.TStrIntPrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TStrIntPrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TStrIntPrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TStrIntPrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TStrIntPrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TStrIntPrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TStrIntPrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TStrIntPrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TStrIntPrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TStrIntPrV_Ins)
    Del = _swig_new_instance_method(_snap.TStrIntPrV_Del)
    DelLast = _swig_new_instance_method(_snap.TStrIntPrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TStrIntPrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TStrIntPrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TStrIntPrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TStrIntPrV_Swap)
    SwapI = _swig_new_static_method(_snap.TStrIntPrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TStrIntPrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TStrIntPrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TStrIntPrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TStrIntPrV_BSort)
    ISort = _swig_new_instance_method(_snap.TStrIntPrV_ISort)
    Partition = _swig_new_instance_method(_snap.TStrIntPrV_Partition)
    QSort = _swig_new_instance_method(_snap.TStrIntPrV_QSort)
    Sort = _swig_new_instance_method(_snap.TStrIntPrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TStrIntPrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TStrIntPrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TStrIntPrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TStrIntPrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TStrIntPrV_Intrs)
    Union = _swig_new_instance_method(_snap.TStrIntPrV_Union)
    Diff = _swig_new_instance_method(_snap.TStrIntPrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TStrIntPrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TStrIntPrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TStrIntPrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TStrIntPrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TStrIntPrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TStrIntPrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TStrIntPrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TStrIntPrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TStrIntPrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TStrIntPrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TStrIntPrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TStrIntPrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TStrIntPrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TStrIntPrV_GetV)

# Register TStrIntPrV in _snap:
_snap.TStrIntPrV_swigregister(TStrIntPrV)
TStrIntPrV_SwapI = _snap.TStrIntPrV_SwapI
TStrIntPrV_GetV = _snap.TStrIntPrV_GetV

class TIntTrV(object):
    r"""Proxy of C++ TVec< TIntTr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntTrV

    def __init__(self, *args):
        r"""
        __init__(TIntTrV self) -> TIntTrV
        __init__(TIntTrV self, TIntTrV Vec) -> TIntTrV

        Parameters
        ----------
        Vec: TVec< TTriple< TInt,TInt,TInt >,int > const &

        __init__(TIntTrV self, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntTrV self, int const & _MxVals, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntTrV self, TIntTr _ValT, int const & _Vals) -> TIntTrV

        Parameters
        ----------
        _ValT: TTriple< TInt,TInt,TInt > *
        _Vals: int const &

        __init__(TIntTrV self, TSIn SIn) -> TIntTrV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntTrV_swiginit(self, _snap.new_TIntTrV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntTrV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntTrV_Load)
    Save = _swig_new_instance_method(_snap.TIntTrV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntTrV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntTrV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntTrV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntTrV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntTrV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntTrV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntTrV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntTrV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntTrV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntTrV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntTrV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntTrV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntTrV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntTrV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntTrV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntTrV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntTrV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntTrV_Empty)
    Len = _swig_new_instance_method(_snap.TIntTrV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntTrV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntTrV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntTrV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntTrV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntTrV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntTrV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntTrV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntTrV_GetI)
    Add = _swig_new_instance_method(_snap.TIntTrV_Add)
    AddV = _swig_new_instance_method(_snap.TIntTrV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntTrV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntTrV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntTrV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntTrV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntTrV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntTrV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntTrV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntTrV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntTrV_Ins)
    Del = _swig_new_instance_method(_snap.TIntTrV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntTrV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntTrV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntTrV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntTrV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntTrV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntTrV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntTrV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntTrV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntTrV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntTrV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntTrV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntTrV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntTrV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntTrV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntTrV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntTrV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntTrV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntTrV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntTrV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntTrV_Union)
    Diff = _swig_new_instance_method(_snap.TIntTrV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntTrV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntTrV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntTrV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntTrV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntTrV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntTrV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntTrV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntTrV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntTrV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntTrV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntTrV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntTrV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntTrV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntTrV_GetV)

# Register TIntTrV in _snap:
_snap.TIntTrV_swigregister(TIntTrV)
TIntTrV_SwapI = _snap.TIntTrV_SwapI
TIntTrV_GetV = _snap.TIntTrV_GetV

class TIntFltKdV(object):
    r"""Proxy of C++ TVec< TIntFltKd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntFltKdV

    def __init__(self, *args):
        r"""
        __init__(TIntFltKdV self) -> TIntFltKdV
        __init__(TIntFltKdV self, TIntFltKdV Vec) -> TIntFltKdV

        Parameters
        ----------
        Vec: TVec< TKeyDat< TInt,TFlt >,int > const &

        __init__(TIntFltKdV self, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntFltKdV self, int const & _MxVals, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntFltKdV self, TIntFltKd _ValT, int const & _Vals) -> TIntFltKdV

        Parameters
        ----------
        _ValT: TKeyDat< TInt,TFlt > *
        _Vals: int const &

        __init__(TIntFltKdV self, TSIn SIn) -> TIntFltKdV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltKdV_swiginit(self, _snap.new_TIntFltKdV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltKdV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltKdV_Load)
    Save = _swig_new_instance_method(_snap.TIntFltKdV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntFltKdV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntFltKdV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltKdV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltKdV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntFltKdV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntFltKdV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntFltKdV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntFltKdV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntFltKdV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntFltKdV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntFltKdV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntFltKdV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntFltKdV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntFltKdV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntFltKdV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntFltKdV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntFltKdV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntFltKdV_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltKdV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntFltKdV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntFltKdV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntFltKdV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntFltKdV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntFltKdV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntFltKdV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltKdV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltKdV_GetI)
    Add = _swig_new_instance_method(_snap.TIntFltKdV_Add)
    AddV = _swig_new_instance_method(_snap.TIntFltKdV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntFltKdV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntFltKdV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntFltKdV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntFltKdV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntFltKdV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntFltKdV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntFltKdV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntFltKdV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntFltKdV_Ins)
    Del = _swig_new_instance_method(_snap.TIntFltKdV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntFltKdV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntFltKdV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntFltKdV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntFltKdV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntFltKdV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntFltKdV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntFltKdV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntFltKdV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntFltKdV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntFltKdV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntFltKdV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntFltKdV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntFltKdV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntFltKdV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntFltKdV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntFltKdV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntFltKdV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntFltKdV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntFltKdV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntFltKdV_Union)
    Diff = _swig_new_instance_method(_snap.TIntFltKdV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntFltKdV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntFltKdV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntFltKdV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntFltKdV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntFltKdV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntFltKdV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntFltKdV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntFltKdV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntFltKdV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntFltKdV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntFltKdV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntFltKdV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntFltKdV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntFltKdV_GetV)

# Register TIntFltKdV in _snap:
_snap.TIntFltKdV_swigregister(TIntFltKdV)
TIntFltKdV_SwapI = _snap.TIntFltKdV_SwapI
TIntFltKdV_GetV = _snap.TIntFltKdV_GetV

class TIntIntVV(object):
    r"""Proxy of C++ TVec< TVec< TInt >,int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntVV

    def __init__(self, *args):
        r"""
        __init__(TIntIntVV self) -> TIntIntVV
        __init__(TIntIntVV self, TIntIntVV Vec) -> TIntIntVV

        Parameters
        ----------
        Vec: TVec< TVec< TInt,int >,int > const &

        __init__(TIntIntVV self, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _Vals: int const &

        __init__(TIntIntVV self, int const & _MxVals, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TIntIntVV self, TIntV _ValT, int const & _Vals) -> TIntIntVV

        Parameters
        ----------
        _ValT: TVec< TInt,int > *
        _Vals: int const &

        __init__(TIntIntVV self, TSIn SIn) -> TIntIntVV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntVV_swiginit(self, _snap.new_TIntIntVV(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntVV_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntVV_Load)
    Save = _swig_new_instance_method(_snap.TIntIntVV_Save)
    __add__ = _swig_new_instance_method(_snap.TIntIntVV___add__)
    __eq__ = _swig_new_instance_method(_snap.TIntIntVV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntVV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntVV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TIntIntVV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntIntVV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntIntVV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TIntIntVV_Gen)
    GenExt = _swig_new_instance_method(_snap.TIntIntVV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TIntIntVV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TIntIntVV_Reserve)
    Clr = _swig_new_instance_method(_snap.TIntIntVV_Clr)
    Trunc = _swig_new_instance_method(_snap.TIntIntVV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TIntIntVV_Reduce)
    Pack = _swig_new_instance_method(_snap.TIntIntVV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TIntIntVV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TIntIntVV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TIntIntVV_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntVV_Len)
    Reserved = _swig_new_instance_method(_snap.TIntIntVV_Reserved)
    Last = _swig_new_instance_method(_snap.TIntIntVV_Last)
    LastValN = _swig_new_instance_method(_snap.TIntIntVV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TIntIntVV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TIntIntVV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TIntIntVV_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntVV_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntVV_GetI)
    Add = _swig_new_instance_method(_snap.TIntIntVV_Add)
    AddV = _swig_new_instance_method(_snap.TIntIntVV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TIntIntVV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TIntIntVV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TIntIntVV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TIntIntVV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TIntIntVV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TIntIntVV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TIntIntVV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TIntIntVV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TIntIntVV_Ins)
    Del = _swig_new_instance_method(_snap.TIntIntVV_Del)
    DelLast = _swig_new_instance_method(_snap.TIntIntVV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TIntIntVV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TIntIntVV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TIntIntVV_PutAll)
    Swap = _swig_new_instance_method(_snap.TIntIntVV_Swap)
    SwapI = _swig_new_static_method(_snap.TIntIntVV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TIntIntVV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TIntIntVV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TIntIntVV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TIntIntVV_BSort)
    ISort = _swig_new_instance_method(_snap.TIntIntVV_ISort)
    Partition = _swig_new_instance_method(_snap.TIntIntVV_Partition)
    QSort = _swig_new_instance_method(_snap.TIntIntVV_QSort)
    Sort = _swig_new_instance_method(_snap.TIntIntVV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TIntIntVV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TIntIntVV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TIntIntVV_Reverse)
    Merge = _swig_new_instance_method(_snap.TIntIntVV_Merge)
    Intrs = _swig_new_instance_method(_snap.TIntIntVV_Intrs)
    Union = _swig_new_instance_method(_snap.TIntIntVV_Union)
    Diff = _swig_new_instance_method(_snap.TIntIntVV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TIntIntVV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TIntIntVV_UnionLen)
    Count = _swig_new_instance_method(_snap.TIntIntVV_Count)
    SearchBin = _swig_new_instance_method(_snap.TIntIntVV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TIntIntVV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TIntIntVV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TIntIntVV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TIntIntVV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TIntIntVV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TIntIntVV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TIntIntVV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TIntIntVV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TIntIntVV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TIntIntVV_GetV)

# Register TIntIntVV in _snap:
_snap.TIntIntVV_swigregister(TIntIntVV)
TIntIntVV_SwapI = _snap.TIntIntVV_SwapI
TIntIntVV_GetV = _snap.TIntIntVV_GetV

class TFltVFltV(object):
    r"""Proxy of C++ TVec< TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltVFltV

    def __init__(self, *args):
        r"""
        __init__(TFltVFltV self) -> TFltVFltV
        __init__(TFltVFltV self, TFltVFltV Vec) -> TFltVFltV

        Parameters
        ----------
        Vec: TVec< TVec< TFlt,int >,int > const &

        __init__(TFltVFltV self, int const & _Vals) -> TFltVFltV

        Parameters
        ----------
        _Vals: int const &

        __init__(TFltVFltV self, int const & _MxVals, int const & _Vals) -> TFltVFltV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TFltVFltV self, TFltV _ValT, int const & _Vals) -> TFltVFltV

        Parameters
        ----------
        _ValT: TVec< TFlt,int > *
        _Vals: int const &

        __init__(TFltVFltV self, TSIn SIn) -> TFltVFltV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TFltVFltV_swiginit(self, _snap.new_TFltVFltV(*args))
    LoadShM = _swig_new_instance_method(_snap.TFltVFltV_LoadShM)
    Load = _swig_new_instance_method(_snap.TFltVFltV_Load)
    Save = _swig_new_instance_method(_snap.TFltVFltV_Save)
    __add__ = _swig_new_instance_method(_snap.TFltVFltV___add__)
    __eq__ = _swig_new_instance_method(_snap.TFltVFltV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TFltVFltV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TFltVFltV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TFltVFltV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TFltVFltV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TFltVFltV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TFltVFltV_Gen)
    GenExt = _swig_new_instance_method(_snap.TFltVFltV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TFltVFltV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TFltVFltV_Reserve)
    Clr = _swig_new_instance_method(_snap.TFltVFltV_Clr)
    Trunc = _swig_new_instance_method(_snap.TFltVFltV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TFltVFltV_Reduce)
    Pack = _swig_new_instance_method(_snap.TFltVFltV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TFltVFltV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TFltVFltV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TFltVFltV_Empty)
    Len = _swig_new_instance_method(_snap.TFltVFltV_Len)
    Reserved = _swig_new_instance_method(_snap.TFltVFltV_Reserved)
    Last = _swig_new_instance_method(_snap.TFltVFltV_Last)
    LastValN = _swig_new_instance_method(_snap.TFltVFltV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TFltVFltV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TFltVFltV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TFltVFltV_BegI)
    EndI = _swig_new_instance_method(_snap.TFltVFltV_EndI)
    GetI = _swig_new_instance_method(_snap.TFltVFltV_GetI)
    Add = _swig_new_instance_method(_snap.TFltVFltV_Add)
    AddV = _swig_new_instance_method(_snap.TFltVFltV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TFltVFltV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TFltVFltV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TFltVFltV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TFltVFltV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TFltVFltV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TFltVFltV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TFltVFltV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TFltVFltV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TFltVFltV_Ins)
    Del = _swig_new_instance_method(_snap.TFltVFltV_Del)
    DelLast = _swig_new_instance_method(_snap.TFltVFltV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TFltVFltV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TFltVFltV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TFltVFltV_PutAll)
    Swap = _swig_new_instance_method(_snap.TFltVFltV_Swap)
    SwapI = _swig_new_static_method(_snap.TFltVFltV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TFltVFltV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TFltVFltV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TFltVFltV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TFltVFltV_BSort)
    ISort = _swig_new_instance_method(_snap.TFltVFltV_ISort)
    Partition = _swig_new_instance_method(_snap.TFltVFltV_Partition)
    QSort = _swig_new_instance_method(_snap.TFltVFltV_QSort)
    Sort = _swig_new_instance_method(_snap.TFltVFltV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TFltVFltV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TFltVFltV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TFltVFltV_Reverse)
    Merge = _swig_new_instance_method(_snap.TFltVFltV_Merge)
    Intrs = _swig_new_instance_method(_snap.TFltVFltV_Intrs)
    Union = _swig_new_instance_method(_snap.TFltVFltV_Union)
    Diff = _swig_new_instance_method(_snap.TFltVFltV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TFltVFltV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TFltVFltV_UnionLen)
    Count = _swig_new_instance_method(_snap.TFltVFltV_Count)
    SearchBin = _swig_new_instance_method(_snap.TFltVFltV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TFltVFltV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TFltVFltV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TFltVFltV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TFltVFltV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TFltVFltV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TFltVFltV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TFltVFltV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TFltVFltV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TFltVFltV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TFltVFltV_GetV)

# Register TFltVFltV in _snap:
_snap.TFltVFltV_swigregister(TFltVFltV)
TFltVFltV_SwapI = _snap.TFltVFltV_SwapI
TFltVFltV_GetV = _snap.TFltVFltV_GetV

class PNEANetV(object):
    r"""Proxy of C++ TVec< PNEANet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_PNEANetV

    def __init__(self, *args):
        r"""
        __init__(PNEANetV self) -> PNEANetV
        __init__(PNEANetV self, PNEANetV Vec) -> PNEANetV

        Parameters
        ----------
        Vec: TVec< TPt< TNEANet >,int > const &

        __init__(PNEANetV self, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _Vals: int const &

        __init__(PNEANetV self, int const & _MxVals, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(PNEANetV self, PNEANet _ValT, int const & _Vals) -> PNEANetV

        Parameters
        ----------
        _ValT: TPt< TNEANet > *
        _Vals: int const &

        __init__(PNEANetV self, TSIn SIn) -> PNEANetV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.PNEANetV_swiginit(self, _snap.new_PNEANetV(*args))
    LoadShM = _swig_new_instance_method(_snap.PNEANetV_LoadShM)
    Load = _swig_new_instance_method(_snap.PNEANetV_Load)
    Save = _swig_new_instance_method(_snap.PNEANetV_Save)
    __add__ = _swig_new_instance_method(_snap.PNEANetV___add__)
    GetMemUsed = _swig_new_instance_method(_snap.PNEANetV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.PNEANetV_GetMemSize)
    Gen = _swig_new_instance_method(_snap.PNEANetV_Gen)
    GenExt = _swig_new_instance_method(_snap.PNEANetV_GenExt)
    IsExt = _swig_new_instance_method(_snap.PNEANetV_IsExt)
    Reserve = _swig_new_instance_method(_snap.PNEANetV_Reserve)
    Clr = _swig_new_instance_method(_snap.PNEANetV_Clr)
    Trunc = _swig_new_instance_method(_snap.PNEANetV_Trunc)
    Reduce = _swig_new_instance_method(_snap.PNEANetV_Reduce)
    Pack = _swig_new_instance_method(_snap.PNEANetV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.PNEANetV_MoveFrom)
    Empty = _swig_new_instance_method(_snap.PNEANetV_Empty)
    Len = _swig_new_instance_method(_snap.PNEANetV_Len)
    Reserved = _swig_new_instance_method(_snap.PNEANetV_Reserved)
    Last = _swig_new_instance_method(_snap.PNEANetV_Last)
    LastValN = _swig_new_instance_method(_snap.PNEANetV_LastValN)
    LastLast = _swig_new_instance_method(_snap.PNEANetV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.PNEANetV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.PNEANetV_BegI)
    EndI = _swig_new_instance_method(_snap.PNEANetV_EndI)
    GetI = _swig_new_instance_method(_snap.PNEANetV_GetI)
    Add = _swig_new_instance_method(_snap.PNEANetV_Add)
    AddV = _swig_new_instance_method(_snap.PNEANetV_AddV)
    GetVal = _swig_new_instance_method(_snap.PNEANetV_GetVal)
    SetVal = _swig_new_instance_method(_snap.PNEANetV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.PNEANetV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.PNEANetV_Ins)
    Del = _swig_new_instance_method(_snap.PNEANetV_Del)
    DelLast = _swig_new_instance_method(_snap.PNEANetV_DelLast)
    PutAll = _swig_new_instance_method(_snap.PNEANetV_PutAll)
    Swap = _swig_new_instance_method(_snap.PNEANetV_Swap)
    SwapI = _swig_new_static_method(_snap.PNEANetV_SwapI)
    Shuffle = _swig_new_instance_method(_snap.PNEANetV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.PNEANetV_Reverse)
    GetV = _swig_new_static_method(_snap.PNEANetV_GetV)

# Register PNEANetV in _snap:
_snap.PNEANetV_swigregister(PNEANetV)
PNEANetV_SwapI = _snap.PNEANetV_SwapI
PNEANetV_GetV = _snap.PNEANetV_GetV

class TIntH(object):
    r"""Proxy of C++ THash< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntH self) -> TIntH
        __init__(TIntH self, TIntH Hash) -> TIntH

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        __init__(TIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntH self, TSIn SIn) -> TIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntH_swiginit(self, _snap.new_TIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntH

# Register TIntH in _snap:
_snap.TIntH_swigregister(TIntH)

class TIntIntH(object):
    r"""Proxy of C++ THash< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntIntH self) -> TIntIntH
        __init__(TIntIntH self, TIntH Hash) -> TIntIntH

        Parameters
        ----------
        Hash: THash< TInt,TInt > const &

        __init__(TIntIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntIntH self, TSIn SIn) -> TIntIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntIntH_swiginit(self, _snap.new_TIntIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntIntH_Load)
    Save = _swig_new_instance_method(_snap.TIntIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntIntH_Empty)
    Len = _swig_new_instance_method(_snap.TIntIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntIntH

# Register TIntIntH in _snap:
_snap.TIntIntH_swigregister(TIntIntH)

class TIntFltH(object):
    r"""Proxy of C++ THash< TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntFltH self) -> TIntFltH
        __init__(TIntFltH self, TIntFltH Hash) -> TIntFltH

        Parameters
        ----------
        Hash: THash< TInt,TFlt > const &

        __init__(TIntFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntFltH self, TSIn SIn) -> TIntFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltH_swiginit(self, _snap.new_TIntFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltH_Load)
    Save = _swig_new_instance_method(_snap.TIntFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntFltH_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntFltH

# Register TIntFltH in _snap:
_snap.TIntFltH_swigregister(TIntFltH)

class TIntStrH(object):
    r"""Proxy of C++ THash< TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntStrH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntStrH self) -> TIntStrH
        __init__(TIntStrH self, TIntStrH Hash) -> TIntStrH

        Parameters
        ----------
        Hash: THash< TInt,TStr > const &

        __init__(TIntStrH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntStrH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntStrH self, TSIn SIn) -> TIntStrH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntStrH_swiginit(self, _snap.new_TIntStrH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntStrH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntStrH_Load)
    Save = _swig_new_instance_method(_snap.TIntStrH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntStrH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntStrH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntStrH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntStrH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntStrH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntStrH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntStrH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntStrH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntStrH_Empty)
    Len = _swig_new_instance_method(_snap.TIntStrH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntStrH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntStrH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntStrH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntStrH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntStrH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntStrH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntStrH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntStrH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntStrH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntStrH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntStrH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntStrH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntStrH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntStrH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntStrH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntStrH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntStrH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntStrH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntStrH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntStrH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntStrH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntStrH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntStrH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntStrH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntStrH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntStrH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntStrH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntStrH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntStrH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntStrH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntStrH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntStrH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntStrH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntStrH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntStrH

# Register TIntStrH in _snap:
_snap.TIntStrH_swigregister(TIntStrH)

class TIntPrFltH(object):
    r"""Proxy of C++ THash< TIntPr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrFltH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntPrFltH self) -> TIntPrFltH
        __init__(TIntPrFltH self, TIntPrFltH Hash) -> TIntPrFltH

        Parameters
        ----------
        Hash: THash< TIntPr,TFlt > const &

        __init__(TIntPrFltH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntPrFltH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntPrFltH self, TSIn SIn) -> TIntPrFltH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntPrFltH_swiginit(self, _snap.new_TIntPrFltH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntPrFltH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntPrFltH_Load)
    Save = _swig_new_instance_method(_snap.TIntPrFltH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntPrFltH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrFltH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntPrFltH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntPrFltH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntPrFltH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntPrFltH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntPrFltH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntPrFltH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntPrFltH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntPrFltH_Empty)
    Len = _swig_new_instance_method(_snap.TIntPrFltH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntPrFltH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntPrFltH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntPrFltH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntPrFltH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntPrFltH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntPrFltH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntPrFltH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntPrFltH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntPrFltH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntPrFltH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntPrFltH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntPrFltH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntPrFltH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntPrFltH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntPrFltH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntPrFltH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntPrFltH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntPrFltH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntPrFltH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntPrFltH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntPrFltH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntPrFltH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntPrFltH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntPrFltH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntPrFltH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntPrFltH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntPrFltH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntPrFltH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntPrFltH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntPrFltH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntPrFltH

# Register TIntPrFltH in _snap:
_snap.TIntPrFltH_swigregister(TIntPrFltH)

class TStrIntH(object):
    r"""Proxy of C++ THash< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TStrIntH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TStrIntH self) -> TStrIntH
        __init__(TStrIntH self, TStrIntH Hash) -> TStrIntH

        Parameters
        ----------
        Hash: THash< TStr,TInt > const &

        __init__(TStrIntH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TStrIntH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TStrIntH self, TSIn SIn) -> TStrIntH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TStrIntH_swiginit(self, _snap.new_TStrIntH(*args))
    LoadShM = _swig_new_instance_method(_snap.TStrIntH_LoadShM)
    Load = _swig_new_instance_method(_snap.TStrIntH_Load)
    Save = _swig_new_instance_method(_snap.TStrIntH_Save)
    __eq__ = _swig_new_instance_method(_snap.TStrIntH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntH___lt__)
    __call__ = _swig_new_instance_method(_snap.TStrIntH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TStrIntH_BegI)
    EndI = _swig_new_instance_method(_snap.TStrIntH_EndI)
    GetI = _swig_new_instance_method(_snap.TStrIntH_GetI)
    Gen = _swig_new_instance_method(_snap.TStrIntH_Gen)
    Clr = _swig_new_instance_method(_snap.TStrIntH_Clr)
    Empty = _swig_new_instance_method(_snap.TStrIntH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntH_Len)
    GetPorts = _swig_new_instance_method(_snap.TStrIntH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TStrIntH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TStrIntH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TStrIntH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TStrIntH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TStrIntH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TStrIntH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TStrIntH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TStrIntH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TStrIntH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TStrIntH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TStrIntH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TStrIntH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TStrIntH_Swap)
    Defrag = _swig_new_instance_method(_snap.TStrIntH_Defrag)
    Pack = _swig_new_instance_method(_snap.TStrIntH_Pack)
    Sort = _swig_new_instance_method(_snap.TStrIntH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TStrIntH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TStrIntH_SortByDat)
    __swig_destroy__ = _snap.delete_TStrIntH

# Register TStrIntH in _snap:
_snap.TStrIntH_swigregister(TStrIntH)

class TStrIntSH(object):
    r"""Proxy of C++ TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntSH self) -> TStrIntSH
        __init__(TStrIntSH self, TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const & StrPool) -> TStrIntSH

        Parameters
        ----------
        StrPool: TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrIntSH self, int const & Ports, bool const & _AutoSizeP=False, TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const & StrPool=TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool()) -> TStrIntSH

        Parameters
        ----------
        Ports: int const &
        _AutoSizeP: bool const &
        StrPool: TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > >::PStringPool const &

        __init__(TStrIntSH self, TStrIntSH Hash) -> TStrIntSH

        Parameters
        ----------
        Hash: TStrHash< TInt,TStrPool,TDefaultHashFunc< TStr > > const &

        __init__(TStrIntSH self, TSIn SIn, bool PoolToo=True) -> TStrIntSH

        Parameters
        ----------
        SIn: TSIn &
        PoolToo: bool

        """
        _snap.TStrIntSH_swiginit(self, _snap.new_TStrIntSH(*args))
    Load = _swig_new_instance_method(_snap.TStrIntSH_Load)
    LoadShM = _swig_new_instance_method(_snap.TStrIntSH_LoadShM)
    Save = _swig_new_instance_method(_snap.TStrIntSH_Save)
    SetPool = _swig_new_instance_method(_snap.TStrIntSH_SetPool)
    GetPool = _swig_new_instance_method(_snap.TStrIntSH_GetPool)
    Empty = _swig_new_instance_method(_snap.TStrIntSH_Empty)
    Len = _swig_new_instance_method(_snap.TStrIntSH_Len)
    Reserved = _swig_new_instance_method(_snap.TStrIntSH_Reserved)
    GetPorts = _swig_new_instance_method(_snap.TStrIntSH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TStrIntSH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TStrIntSH_GetMxKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TStrIntSH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TStrIntSH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TStrIntSH_AddDat)
    AddDatId = _swig_new_instance_method(_snap.TStrIntSH_AddDatId)
    __call__ = _swig_new_instance_method(_snap.TStrIntSH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TStrIntSH_GetMemUsed)
    GetDat = _swig_new_instance_method(_snap.TStrIntSH_GetDat)
    GetDatId = _swig_new_instance_method(_snap.TStrIntSH_GetDatId)
    GetKeyDat = _swig_new_instance_method(_snap.TStrIntSH_GetKeyDat)
    GetKeyId = _swig_new_instance_method(_snap.TStrIntSH_GetKeyId)
    GetKey = _swig_new_instance_method(_snap.TStrIntSH_GetKey)
    GetKeyOfs = _swig_new_instance_method(_snap.TStrIntSH_GetKeyOfs)
    KeyFromOfs = _swig_new_instance_method(_snap.TStrIntSH_KeyFromOfs)
    IsKey = _swig_new_instance_method(_snap.TStrIntSH_IsKey)
    IsKeyGetDat = _swig_new_instance_method(_snap.TStrIntSH_IsKeyGetDat)
    IsKeyId = _swig_new_instance_method(_snap.TStrIntSH_IsKeyId)
    FFirstKeyId = _swig_new_instance_method(_snap.TStrIntSH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TStrIntSH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TStrIntSH_GetKeyV)
    GetStrIdV = _swig_new_instance_method(_snap.TStrIntSH_GetStrIdV)
    GetDatV = _swig_new_instance_method(_snap.TStrIntSH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TStrIntSH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TStrIntSH_GetDatKeyPrV)
    Pack = _swig_new_instance_method(_snap.TStrIntSH_Pack)
    __swig_destroy__ = _snap.delete_TStrIntSH

# Register TStrIntSH in _snap:
_snap.TStrIntSH_swigregister(TStrIntSH)

class TIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntHI self) -> TIntHI
        __init__(TIntHI self, TIntHI _HashKeyDatI) -> TIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(TIntHI self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _snap.TIntHI_swiginit(self, _snap.new_TIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntHI

# Register TIntHI in _snap:
_snap.TIntHI_swigregister(TIntHI)

class TIntIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntIntHI self) -> TIntIntHI
        __init__(TIntIntHI self, TIntHI _HashKeyDatI) -> TIntIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TInt > const &

        __init__(TIntIntHI self, THashKeyDatI< TInt,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TInt >::THKeyDat const * _EndI) -> TIntIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const *

        """
        _snap.TIntIntHI_swiginit(self, _snap.new_TIntIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntIntHI

# Register TIntIntHI in _snap:
_snap.TIntIntHI_swigregister(TIntIntHI)

class TIntFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntFltHI self) -> TIntFltHI
        __init__(TIntFltHI self, TIntFltHI _HashKeyDatI) -> TIntFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TFlt > const &

        __init__(TIntFltHI self, THashKeyDatI< TInt,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TFlt >::THKeyDat const * _EndI) -> TIntFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TFlt >::THKeyDat const *

        """
        _snap.TIntFltHI_swiginit(self, _snap.new_TIntFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntFltHI

# Register TIntFltHI in _snap:
_snap.TIntFltHI_swigregister(TIntFltHI)

class TIntStrHI(object):
    r"""Proxy of C++ THashKeyDatI< TInt,TStr > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntStrHI self) -> TIntStrHI
        __init__(TIntStrHI self, TIntStrHI _HashKeyDatI) -> TIntStrHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TInt,TStr > const &

        __init__(TIntStrHI self, THashKeyDatI< TInt,TStr >::THKeyDat const * _KeyDatI, THashKeyDatI< TInt,TStr >::THKeyDat const * _EndI) -> TIntStrHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TInt,TStr >::THKeyDat const *
        _EndI: THashKeyDatI< TInt,TStr >::THKeyDat const *

        """
        _snap.TIntStrHI_swiginit(self, _snap.new_TIntStrHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntStrHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntStrHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntStrHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntStrHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntStrHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntStrHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntStrHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntStrHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntStrHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntStrHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntStrHI

# Register TIntStrHI in _snap:
_snap.TIntStrHI_swigregister(TIntStrHI)

class TIntPrFltHI(object):
    r"""Proxy of C++ THashKeyDatI< TIntPr,TFlt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntPrFltHI self) -> TIntPrFltHI
        __init__(TIntPrFltHI self, TIntPrFltHI _HashKeyDatI) -> TIntPrFltHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const &

        __init__(TIntPrFltHI self, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _KeyDatI, THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * _EndI) -> TIntPrFltHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *
        _EndI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const *

        """
        _snap.TIntPrFltHI_swiginit(self, _snap.new_TIntPrFltHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntPrFltHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntPrFltHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntPrFltHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntPrFltHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntPrFltHI___deref__)
    Next = _swig_new_instance_method(_snap.TIntPrFltHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntPrFltHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntPrFltHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntPrFltHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TIntPrFltHI_GetDat)
    __swig_destroy__ = _snap.delete_TIntPrFltHI

# Register TIntPrFltHI in _snap:
_snap.TIntPrFltHI_swigregister(TIntPrFltHI)

class TStrIntHI(object):
    r"""Proxy of C++ THashKeyDatI< TStr,TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TStrIntHI self) -> TStrIntHI
        __init__(TStrIntHI self, TStrIntHI _HashKeyDatI) -> TStrIntHI

        Parameters
        ----------
        _HashKeyDatI: THashKeyDatI< TStr,TInt > const &

        __init__(TStrIntHI self, THashKeyDatI< TStr,TInt >::THKeyDat const * _KeyDatI, THashKeyDatI< TStr,TInt >::THKeyDat const * _EndI) -> TStrIntHI

        Parameters
        ----------
        _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const *
        _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const *

        """
        _snap.TStrIntHI_swiginit(self, _snap.new_TStrIntHI(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrIntHI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrIntHI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TStrIntHI___ref__)
    __call__ = _swig_new_instance_method(_snap.TStrIntHI___call__)
    __deref__ = _swig_new_instance_method(_snap.TStrIntHI___deref__)
    Next = _swig_new_instance_method(_snap.TStrIntHI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TStrIntHI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TStrIntHI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TStrIntHI_GetKey)
    GetDat = _swig_new_instance_method(_snap.TStrIntHI_GetDat)
    __swig_destroy__ = _snap.delete_TStrIntHI

# Register TStrIntHI in _snap:
_snap.TStrIntHI_swigregister(TStrIntHI)

class TIntFltVH(object):
    r"""Proxy of C++ THash< TInt,TFltV > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltVH_HashPrimes
    

    def __init__(self, *args):
        r"""
        __init__(TIntFltVH self) -> TIntFltVH
        __init__(TIntFltVH self, TIntFltVH Hash) -> TIntFltVH

        Parameters
        ----------
        Hash: THash< TInt,TFltV > const &

        __init__(TIntFltVH self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntFltVH

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntFltVH self, TSIn SIn) -> TIntFltVH

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntFltVH_swiginit(self, _snap.new_TIntFltVH(*args))
    LoadShM = _swig_new_instance_method(_snap.TIntFltVH_LoadShM)
    Load = _swig_new_instance_method(_snap.TIntFltVH_Load)
    Save = _swig_new_instance_method(_snap.TIntFltVH_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntFltVH___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntFltVH___lt__)
    __call__ = _swig_new_instance_method(_snap.TIntFltVH___call__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntFltVH_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntFltVH_BegI)
    EndI = _swig_new_instance_method(_snap.TIntFltVH_EndI)
    GetI = _swig_new_instance_method(_snap.TIntFltVH_GetI)
    Gen = _swig_new_instance_method(_snap.TIntFltVH_Gen)
    Clr = _swig_new_instance_method(_snap.TIntFltVH_Clr)
    Empty = _swig_new_instance_method(_snap.TIntFltVH_Empty)
    Len = _swig_new_instance_method(_snap.TIntFltVH_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntFltVH_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntFltVH_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntFltVH_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntFltVH_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntFltVH_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntFltVH_AddKey)
    AddDat = _swig_new_instance_method(_snap.TIntFltVH_AddDat)
    DelKey = _swig_new_instance_method(_snap.TIntFltVH_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntFltVH_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntFltVH_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntFltVH_DelKeyIdV)
    GetKey = _swig_new_instance_method(_snap.TIntFltVH_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntFltVH_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntFltVH_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntFltVH_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntFltVH_IsKeyId)
    GetDat = _swig_new_instance_method(_snap.TIntFltVH_GetDat)
    GetDatWithDefault = _swig_new_instance_method(_snap.TIntFltVH_GetDatWithDefault)
    GetKeyDat = _swig_new_instance_method(_snap.TIntFltVH_GetKeyDat)
    IsKeyGetDat = _swig_new_instance_method(_snap.TIntFltVH_IsKeyGetDat)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntFltVH_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntFltVH_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntFltVH_GetKeyV)
    GetDatV = _swig_new_instance_method(_snap.TIntFltVH_GetDatV)
    GetKeyDatPrV = _swig_new_instance_method(_snap.TIntFltVH_GetKeyDatPrV)
    GetDatKeyPrV = _swig_new_instance_method(_snap.TIntFltVH_GetDatKeyPrV)
    GetKeyDatKdV = _swig_new_instance_method(_snap.TIntFltVH_GetKeyDatKdV)
    GetDatKeyKdV = _swig_new_instance_method(_snap.TIntFltVH_GetDatKeyKdV)
    Swap = _swig_new_instance_method(_snap.TIntFltVH_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntFltVH_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntFltVH_Pack)
    Sort = _swig_new_instance_method(_snap.TIntFltVH_Sort)
    SortByKey = _swig_new_instance_method(_snap.TIntFltVH_SortByKey)
    SortByDat = _swig_new_instance_method(_snap.TIntFltVH_SortByDat)
    __swig_destroy__ = _snap.delete_TIntFltVH

# Register TIntFltVH in _snap:
_snap.TIntFltVH_swigregister(TIntFltVH)

class TCnComV(object):
    r"""Proxy of C++ TVec< TCnCom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TCnComV

    def __init__(self, *args):
        r"""
        __init__(TCnComV self) -> TCnComV
        __init__(TCnComV self, TCnComV Vec) -> TCnComV

        Parameters
        ----------
        Vec: TVec< TCnCom,int > const &

        __init__(TCnComV self, int const & _Vals) -> TCnComV

        Parameters
        ----------
        _Vals: int const &

        __init__(TCnComV self, int const & _MxVals, int const & _Vals) -> TCnComV

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(TCnComV self, TCnCom _ValT, int const & _Vals) -> TCnComV

        Parameters
        ----------
        _ValT: TCnCom *
        _Vals: int const &

        __init__(TCnComV self, TSIn SIn) -> TCnComV

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TCnComV_swiginit(self, _snap.new_TCnComV(*args))
    LoadShM = _swig_new_instance_method(_snap.TCnComV_LoadShM)
    Load = _swig_new_instance_method(_snap.TCnComV_Load)
    Save = _swig_new_instance_method(_snap.TCnComV_Save)
    __add__ = _swig_new_instance_method(_snap.TCnComV___add__)
    __eq__ = _swig_new_instance_method(_snap.TCnComV___eq__)
    __lt__ = _swig_new_instance_method(_snap.TCnComV___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.TCnComV_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.TCnComV_GetMemSize)
    GetPrimHashCd = _swig_new_instance_method(_snap.TCnComV_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TCnComV_GetSecHashCd)
    Gen = _swig_new_instance_method(_snap.TCnComV_Gen)
    GenExt = _swig_new_instance_method(_snap.TCnComV_GenExt)
    IsExt = _swig_new_instance_method(_snap.TCnComV_IsExt)
    Reserve = _swig_new_instance_method(_snap.TCnComV_Reserve)
    Clr = _swig_new_instance_method(_snap.TCnComV_Clr)
    Trunc = _swig_new_instance_method(_snap.TCnComV_Trunc)
    Reduce = _swig_new_instance_method(_snap.TCnComV_Reduce)
    Pack = _swig_new_instance_method(_snap.TCnComV_Pack)
    MoveFrom = _swig_new_instance_method(_snap.TCnComV_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.TCnComV_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.TCnComV_Empty)
    Len = _swig_new_instance_method(_snap.TCnComV_Len)
    Reserved = _swig_new_instance_method(_snap.TCnComV_Reserved)
    Last = _swig_new_instance_method(_snap.TCnComV_Last)
    LastValN = _swig_new_instance_method(_snap.TCnComV_LastValN)
    LastLast = _swig_new_instance_method(_snap.TCnComV_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.TCnComV_GetRndVal)
    BegI = _swig_new_instance_method(_snap.TCnComV_BegI)
    EndI = _swig_new_instance_method(_snap.TCnComV_EndI)
    GetI = _swig_new_instance_method(_snap.TCnComV_GetI)
    Add = _swig_new_instance_method(_snap.TCnComV_Add)
    AddV = _swig_new_instance_method(_snap.TCnComV_AddV)
    AddSorted = _swig_new_instance_method(_snap.TCnComV_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.TCnComV_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.TCnComV_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.TCnComV_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.TCnComV_AddUnique)
    GetVal = _swig_new_instance_method(_snap.TCnComV_GetVal)
    SetVal = _swig_new_instance_method(_snap.TCnComV_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.TCnComV_GetSubValV)
    Ins = _swig_new_instance_method(_snap.TCnComV_Ins)
    Del = _swig_new_instance_method(_snap.TCnComV_Del)
    DelLast = _swig_new_instance_method(_snap.TCnComV_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.TCnComV_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.TCnComV_DelAll)
    PutAll = _swig_new_instance_method(_snap.TCnComV_PutAll)
    Swap = _swig_new_instance_method(_snap.TCnComV_Swap)
    SwapI = _swig_new_static_method(_snap.TCnComV_SwapI)
    NextPerm = _swig_new_instance_method(_snap.TCnComV_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.TCnComV_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.TCnComV_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.TCnComV_BSort)
    ISort = _swig_new_instance_method(_snap.TCnComV_ISort)
    Partition = _swig_new_instance_method(_snap.TCnComV_Partition)
    QSort = _swig_new_instance_method(_snap.TCnComV_QSort)
    Sort = _swig_new_instance_method(_snap.TCnComV_Sort)
    IsSorted = _swig_new_instance_method(_snap.TCnComV_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.TCnComV_Shuffle)
    Reverse = _swig_new_instance_method(_snap.TCnComV_Reverse)
    Merge = _swig_new_instance_method(_snap.TCnComV_Merge)
    Intrs = _swig_new_instance_method(_snap.TCnComV_Intrs)
    Union = _swig_new_instance_method(_snap.TCnComV_Union)
    Diff = _swig_new_instance_method(_snap.TCnComV_Diff)
    IntrsLen = _swig_new_instance_method(_snap.TCnComV_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.TCnComV_UnionLen)
    Count = _swig_new_instance_method(_snap.TCnComV_Count)
    SearchBin = _swig_new_instance_method(_snap.TCnComV_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.TCnComV_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.TCnComV_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.TCnComV_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.TCnComV_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.TCnComV_IsIn)
    IsInBin = _swig_new_instance_method(_snap.TCnComV_IsInBin)
    GetDat = _swig_new_instance_method(_snap.TCnComV_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.TCnComV_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.TCnComV_GetMxValN)
    GetV = _swig_new_static_method(_snap.TCnComV_GetV)

# Register TCnComV in _snap:
_snap.TCnComV_swigregister(TCnComV)
TCnComV_SwapI = _snap.TCnComV_SwapI
TCnComV_GetV = _snap.TCnComV_GetV

class TStrTAttrPr(object):
    r"""Proxy of C++ TPair< TStr,TAttrType > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = property(_snap.TStrTAttrPr_Val1_get, _snap.TStrTAttrPr_Val1_set, doc=r"""Val1 : TStr""")
    Val2 = property(_snap.TStrTAttrPr_Val2_get, _snap.TStrTAttrPr_Val2_set, doc=r"""Val2 : enum TAttrType_""")

    def __init__(self, *args):
        r"""
        __init__(TStrTAttrPr self) -> TStrTAttrPr
        __init__(TStrTAttrPr self, TStrTAttrPr Pair) -> TStrTAttrPr

        Parameters
        ----------
        Pair: TPair< TStr,TAttrType > const &

        __init__(TStrTAttrPr self, TStr _Val1, enum TAttrType_ const & _Val2) -> TStrTAttrPr

        Parameters
        ----------
        _Val1: TStr const &
        _Val2: enum TAttrType_ const &

        """
        _snap.TStrTAttrPr_swiginit(self, _snap.new_TStrTAttrPr(*args))
    __eq__ = _swig_new_instance_method(_snap.TStrTAttrPr___eq__)
    __lt__ = _swig_new_instance_method(_snap.TStrTAttrPr___lt__)
    GetVal = _swig_new_instance_method(_snap.TStrTAttrPr_GetVal)
    GetVal1 = _swig_new_instance_method(_snap.TStrTAttrPr_GetVal1)
    GetVal2 = _swig_new_instance_method(_snap.TStrTAttrPr_GetVal2)
    __swig_destroy__ = _snap.delete_TStrTAttrPr

# Register TStrTAttrPr in _snap:
_snap.TStrTAttrPr_swigregister(TStrTAttrPr)

class Schema(object):
    r"""Proxy of C++ TVec< TPair< TStr,TAttrType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Schema self) -> Schema
        __init__(Schema self, Schema Vec) -> Schema

        Parameters
        ----------
        Vec: TVec< TPair< TStr,TAttrType >,int > const &

        __init__(Schema self, int const & _Vals) -> Schema

        Parameters
        ----------
        _Vals: int const &

        __init__(Schema self, int const & _MxVals, int const & _Vals) -> Schema

        Parameters
        ----------
        _MxVals: int const &
        _Vals: int const &

        __init__(Schema self, TStrTAttrPr _ValT, int const & _Vals) -> Schema

        Parameters
        ----------
        _ValT: TPair< TStr,TAttrType > *
        _Vals: int const &

        """
        _snap.Schema_swiginit(self, _snap.new_Schema(*args))
    __swig_destroy__ = _snap.delete_Schema
    LoadShM = _swig_new_instance_method(_snap.Schema_LoadShM)
    __add__ = _swig_new_instance_method(_snap.Schema___add__)
    __eq__ = _swig_new_instance_method(_snap.Schema___eq__)
    __lt__ = _swig_new_instance_method(_snap.Schema___lt__)
    GetMemUsed = _swig_new_instance_method(_snap.Schema_GetMemUsed)
    GetMemSize = _swig_new_instance_method(_snap.Schema_GetMemSize)
    Gen = _swig_new_instance_method(_snap.Schema_Gen)
    GenExt = _swig_new_instance_method(_snap.Schema_GenExt)
    IsExt = _swig_new_instance_method(_snap.Schema_IsExt)
    Reserve = _swig_new_instance_method(_snap.Schema_Reserve)
    Clr = _swig_new_instance_method(_snap.Schema_Clr)
    Trunc = _swig_new_instance_method(_snap.Schema_Trunc)
    Reduce = _swig_new_instance_method(_snap.Schema_Reduce)
    Pack = _swig_new_instance_method(_snap.Schema_Pack)
    MoveFrom = _swig_new_instance_method(_snap.Schema_MoveFrom)
    CopyUniqueFrom = _swig_new_instance_method(_snap.Schema_CopyUniqueFrom)
    Empty = _swig_new_instance_method(_snap.Schema_Empty)
    Len = _swig_new_instance_method(_snap.Schema_Len)
    Reserved = _swig_new_instance_method(_snap.Schema_Reserved)
    Last = _swig_new_instance_method(_snap.Schema_Last)
    LastValN = _swig_new_instance_method(_snap.Schema_LastValN)
    LastLast = _swig_new_instance_method(_snap.Schema_LastLast)
    GetRndVal = _swig_new_instance_method(_snap.Schema_GetRndVal)
    BegI = _swig_new_instance_method(_snap.Schema_BegI)
    EndI = _swig_new_instance_method(_snap.Schema_EndI)
    GetI = _swig_new_instance_method(_snap.Schema_GetI)
    Add = _swig_new_instance_method(_snap.Schema_Add)
    AddV = _swig_new_instance_method(_snap.Schema_AddV)
    AddSorted = _swig_new_instance_method(_snap.Schema_AddSorted)
    AddBackSorted = _swig_new_instance_method(_snap.Schema_AddBackSorted)
    AddMerged = _swig_new_instance_method(_snap.Schema_AddMerged)
    AddVMerged = _swig_new_instance_method(_snap.Schema_AddVMerged)
    AddUnique = _swig_new_instance_method(_snap.Schema_AddUnique)
    GetVal = _swig_new_instance_method(_snap.Schema_GetVal)
    SetVal = _swig_new_instance_method(_snap.Schema_SetVal)
    GetSubValV = _swig_new_instance_method(_snap.Schema_GetSubValV)
    Ins = _swig_new_instance_method(_snap.Schema_Ins)
    Del = _swig_new_instance_method(_snap.Schema_Del)
    DelLast = _swig_new_instance_method(_snap.Schema_DelLast)
    DelIfIn = _swig_new_instance_method(_snap.Schema_DelIfIn)
    DelAll = _swig_new_instance_method(_snap.Schema_DelAll)
    PutAll = _swig_new_instance_method(_snap.Schema_PutAll)
    Swap = _swig_new_instance_method(_snap.Schema_Swap)
    SwapI = _swig_new_static_method(_snap.Schema_SwapI)
    NextPerm = _swig_new_instance_method(_snap.Schema_NextPerm)
    PrevPerm = _swig_new_instance_method(_snap.Schema_PrevPerm)
    GetPivotValN = _swig_new_instance_method(_snap.Schema_GetPivotValN)
    BSort = _swig_new_instance_method(_snap.Schema_BSort)
    ISort = _swig_new_instance_method(_snap.Schema_ISort)
    Partition = _swig_new_instance_method(_snap.Schema_Partition)
    QSort = _swig_new_instance_method(_snap.Schema_QSort)
    Sort = _swig_new_instance_method(_snap.Schema_Sort)
    IsSorted = _swig_new_instance_method(_snap.Schema_IsSorted)
    Shuffle = _swig_new_instance_method(_snap.Schema_Shuffle)
    Reverse = _swig_new_instance_method(_snap.Schema_Reverse)
    Merge = _swig_new_instance_method(_snap.Schema_Merge)
    Intrs = _swig_new_instance_method(_snap.Schema_Intrs)
    Union = _swig_new_instance_method(_snap.Schema_Union)
    Diff = _swig_new_instance_method(_snap.Schema_Diff)
    IntrsLen = _swig_new_instance_method(_snap.Schema_IntrsLen)
    UnionLen = _swig_new_instance_method(_snap.Schema_UnionLen)
    Count = _swig_new_instance_method(_snap.Schema_Count)
    SearchBin = _swig_new_instance_method(_snap.Schema_SearchBin)
    SearchBinLeft = _swig_new_instance_method(_snap.Schema_SearchBinLeft)
    SearchForw = _swig_new_instance_method(_snap.Schema_SearchForw)
    SearchBack = _swig_new_instance_method(_snap.Schema_SearchBack)
    SearchVForw = _swig_new_instance_method(_snap.Schema_SearchVForw)
    IsIn = _swig_new_instance_method(_snap.Schema_IsIn)
    IsInBin = _swig_new_instance_method(_snap.Schema_IsInBin)
    GetDat = _swig_new_instance_method(_snap.Schema_GetDat)
    GetAddDat = _swig_new_instance_method(_snap.Schema_GetAddDat)
    GetMxValN = _swig_new_instance_method(_snap.Schema_GetMxValN)
    GetV = _swig_new_static_method(_snap.Schema_GetV)

# Register Schema in _snap:
_snap.Schema_swigregister(Schema)
Schema_SwapI = _snap.Schema_SwapI
Schema_GetV = _snap.Schema_GetV

class TIntSet(object):
    r"""Proxy of C++ THashSet< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntSet self) -> TIntSet
        __init__(TIntSet self, TIntSet Set) -> TIntSet

        Parameters
        ----------
        Set: THashSet< TInt > const &

        __init__(TIntSet self, int const & ExpectVals, bool const & _AutoSizeP=False) -> TIntSet

        Parameters
        ----------
        ExpectVals: int const &
        _AutoSizeP: bool const &

        __init__(TIntSet self, TIntV KeyV) -> TIntSet

        Parameters
        ----------
        KeyV: TVec< TInt > const &

        __init__(TIntSet self, TSIn SIn) -> TIntSet

        Parameters
        ----------
        SIn: TSIn &

        """
        _snap.TIntSet_swiginit(self, _snap.new_TIntSet(*args))
    Load = _swig_new_instance_method(_snap.TIntSet_Load)
    Save = _swig_new_instance_method(_snap.TIntSet_Save)
    __eq__ = _swig_new_instance_method(_snap.TIntSet___eq__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntSet_GetMemUsed)
    BegI = _swig_new_instance_method(_snap.TIntSet_BegI)
    EndI = _swig_new_instance_method(_snap.TIntSet_EndI)
    GetI = _swig_new_instance_method(_snap.TIntSet_GetI)
    Gen = _swig_new_instance_method(_snap.TIntSet_Gen)
    Clr = _swig_new_instance_method(_snap.TIntSet_Clr)
    Empty = _swig_new_instance_method(_snap.TIntSet_Empty)
    Len = _swig_new_instance_method(_snap.TIntSet_Len)
    GetPorts = _swig_new_instance_method(_snap.TIntSet_GetPorts)
    IsAutoSize = _swig_new_instance_method(_snap.TIntSet_IsAutoSize)
    GetMxKeyIds = _swig_new_instance_method(_snap.TIntSet_GetMxKeyIds)
    GetReservedKeyIds = _swig_new_instance_method(_snap.TIntSet_GetReservedKeyIds)
    IsKeyIdEqKeyN = _swig_new_instance_method(_snap.TIntSet_IsKeyIdEqKeyN)
    AddKey = _swig_new_instance_method(_snap.TIntSet_AddKey)
    AddKeyV = _swig_new_instance_method(_snap.TIntSet_AddKeyV)
    DelKey = _swig_new_instance_method(_snap.TIntSet_DelKey)
    DelIfKey = _swig_new_instance_method(_snap.TIntSet_DelIfKey)
    DelKeyId = _swig_new_instance_method(_snap.TIntSet_DelKeyId)
    DelKeyIdV = _swig_new_instance_method(_snap.TIntSet_DelKeyIdV)
    MarkDelKey = _swig_new_instance_method(_snap.TIntSet_MarkDelKey)
    MarkDelKeyId = _swig_new_instance_method(_snap.TIntSet_MarkDelKeyId)
    GetKey = _swig_new_instance_method(_snap.TIntSet_GetKey)
    GetKeyId = _swig_new_instance_method(_snap.TIntSet_GetKeyId)
    GetRndKeyId = _swig_new_instance_method(_snap.TIntSet_GetRndKeyId)
    IsKey = _swig_new_instance_method(_snap.TIntSet_IsKey)
    IsKeyId = _swig_new_instance_method(_snap.TIntSet_IsKeyId)
    FFirstKeyId = _swig_new_instance_method(_snap.TIntSet_FFirstKeyId)
    FNextKeyId = _swig_new_instance_method(_snap.TIntSet_FNextKeyId)
    GetKeyV = _swig_new_instance_method(_snap.TIntSet_GetKeyV)
    Swap = _swig_new_instance_method(_snap.TIntSet_Swap)
    Defrag = _swig_new_instance_method(_snap.TIntSet_Defrag)
    Pack = _swig_new_instance_method(_snap.TIntSet_Pack)
    GetSet = _swig_new_static_method(_snap.TIntSet_GetSet)
    __swig_destroy__ = _snap.delete_TIntSet

# Register TIntSet in _snap:
_snap.TIntSet_swigregister(TIntSet)
TIntSet_GetSet = _snap.TIntSet_GetSet

class TIntHSI(object):
    r"""Proxy of C++ THashSetKeyI< TInt > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TIntHSI self) -> TIntHSI
        __init__(TIntHSI self, TIntHSI _SetKeyI) -> TIntHSI

        Parameters
        ----------
        _SetKeyI: THashSetKeyI< TInt > const &

        __init__(TIntHSI self, THashSetKeyI< TInt >::TSetKey const * _KeyI, THashSetKeyI< TInt >::TSetKey const * _EndI) -> TIntHSI

        Parameters
        ----------
        _KeyI: THashSetKeyI< TInt >::TSetKey const *
        _EndI: THashSetKeyI< TInt >::TSetKey const *

        """
        _snap.TIntHSI_swiginit(self, _snap.new_TIntHSI(*args))
    __eq__ = _swig_new_instance_method(_snap.TIntHSI___eq__)
    __lt__ = _swig_new_instance_method(_snap.TIntHSI___lt__)
    __ref__ = _swig_new_instance_method(_snap.TIntHSI___ref__)
    __call__ = _swig_new_instance_method(_snap.TIntHSI___call__)
    __deref__ = _swig_new_instance_method(_snap.TIntHSI___deref__)
    Next = _swig_new_instance_method(_snap.TIntHSI_Next)
    IsEmpty = _swig_new_instance_method(_snap.TIntHSI_IsEmpty)
    IsEnd = _swig_new_instance_method(_snap.TIntHSI_IsEnd)
    GetKey = _swig_new_instance_method(_snap.TIntHSI_GetKey)
    __swig_destroy__ = _snap.delete_TIntHSI
    Val = property(_snap.TIntHSI_Val_get, doc=r"""Val : int""")
    Mn = property(_snap.TIntHSI_Mn_get, doc=r"""Mn : q(const).int""")
    Mx = property(_snap.TIntHSI_Mx_get, doc=r"""Mx : q(const).int""")
    Kilo = property(_snap.TIntHSI_Kilo_get, doc=r"""Kilo : q(const).int""")
    Mega = property(_snap.TIntHSI_Mega_get, doc=r"""Mega : q(const).int""")
    Giga = property(_snap.TIntHSI_Giga_get, doc=r"""Giga : q(const).int""")
    Rnd = property(_snap.TIntHSI_Rnd_get, doc=r"""Rnd : TRnd""")
    Save = _swig_new_instance_method(_snap.TIntHSI_Save)
    __ne__ = _swig_new_instance_method(_snap.TIntHSI___ne__)
    GetMemUsed = _swig_new_instance_method(_snap.TIntHSI_GetMemUsed)
    GetPrimHashCd = _swig_new_instance_method(_snap.TIntHSI_GetPrimHashCd)
    GetSecHashCd = _swig_new_instance_method(_snap.TIntHSI_GetSecHashCd)

# Register TIntHSI in _snap:
_snap.TIntHSI_swigregister(TIntHSI)

class TNGraphNodeI(object):
    r"""Proxy of C++ TNGraphNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraphNodeI self) -> TNGraphNodeI
        __init__(TNGraphNodeI self, TNGraph::TNodeI const & NodeI) -> TNGraphNodeI

        Parameters
        ----------
        NodeI: TNGraph::TNodeI const &

        """
        _snap.TNGraphNodeI_swiginit(self, _snap.new_TNGraphNodeI(*args))
    Next = _swig_new_instance_method(_snap.TNGraphNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNGraphNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNGraphNodeI___eq__)
    GetNI = _swig_new_instance_method(_snap.TNGraphNodeI_GetNI)
    GetId = _swig_new_instance_method(_snap.TNGraphNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TNGraphNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TNGraphNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TNGraphNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TNGraphNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TNGraphNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TNGraphNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TNGraphNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TNGraphNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TNGraphNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TNGraphNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TNGraphNodeI

# Register TNGraphNodeI in _snap:
_snap.TNGraphNodeI_swigregister(TNGraphNodeI)

class TDirNetNodeI(object):
    r"""Proxy of C++ TDirNetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TDirNetNodeI self) -> TDirNetNodeI
        __init__(TDirNetNodeI self, TDirNet::TNodeI const & NodeI) -> TDirNetNodeI

        Parameters
        ----------
        NodeI: TDirNet::TNodeI const &

        """
        _snap.TDirNetNodeI_swiginit(self, _snap.new_TDirNetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TDirNetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TDirNetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TDirNetNodeI___eq__)
    GetId = _swig_new_instance_method(_snap.TDirNetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TDirNetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TDirNetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TDirNetNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TDirNetNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TDirNetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TDirNetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TDirNetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TDirNetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TDirNetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TDirNetNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TDirNetNodeI

# Register TDirNetNodeI in _snap:
_snap.TDirNetNodeI_swigregister(TDirNetNodeI)

class TNGraphEdgeI(object):
    r"""Proxy of C++ TNGraphEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNGraphEdgeI self) -> TNGraphEdgeI
        __init__(TNGraphEdgeI self, TNGraph::TEdgeI const & EdgeI) -> TNGraphEdgeI

        Parameters
        ----------
        EdgeI: TNGraph::TEdgeI const &

        """
        _snap.TNGraphEdgeI_swiginit(self, _snap.new_TNGraphEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TNGraphEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNGraphEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNGraphEdgeI___eq__)
    GetEI = _swig_new_instance_method(_snap.TNGraphEdgeI_GetEI)
    GetId = _swig_new_instance_method(_snap.TNGraphEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TNGraphEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TNGraphEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TNGraphEdgeI

# Register TNGraphEdgeI in _snap:
_snap.TNGraphEdgeI_swigregister(TNGraphEdgeI)

class TDirNetEdgeI(object):
    r"""Proxy of C++ TDirNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TDirNetEdgeI self) -> TDirNetEdgeI
        __init__(TDirNetEdgeI self, TDirNet::TEdgeI const & EdgeI) -> TDirNetEdgeI

        Parameters
        ----------
        EdgeI: TDirNet::TEdgeI const &

        """
        _snap.TDirNetEdgeI_swiginit(self, _snap.new_TDirNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TDirNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TDirNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TDirNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TDirNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TDirNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TDirNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TDirNetEdgeI

# Register TDirNetEdgeI in _snap:
_snap.TDirNetEdgeI_swigregister(TDirNetEdgeI)

class TUNGraphNodeI(object):
    r"""Proxy of C++ TUNGraphNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraphNodeI self) -> TUNGraphNodeI
        __init__(TUNGraphNodeI self, TUNGraph::TNodeI const & NodeI) -> TUNGraphNodeI

        Parameters
        ----------
        NodeI: TUNGraph::TNodeI const &

        """
        _snap.TUNGraphNodeI_swiginit(self, _snap.new_TUNGraphNodeI(*args))
    Next = _swig_new_instance_method(_snap.TUNGraphNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUNGraphNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUNGraphNodeI___eq__)
    GetNI = _swig_new_instance_method(_snap.TUNGraphNodeI_GetNI)
    GetId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TUNGraphNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TUNGraphNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TUNGraphNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TUNGraphNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TUNGraphNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TUNGraphNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TUNGraphNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TUNGraphNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TUNGraphNodeI

# Register TUNGraphNodeI in _snap:
_snap.TUNGraphNodeI_swigregister(TUNGraphNodeI)

class TUndirNetNodeI(object):
    r"""Proxy of C++ TUndirNetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUndirNetNodeI self) -> TUndirNetNodeI
        __init__(TUndirNetNodeI self, TUndirNet::TNodeI const & NodeI) -> TUndirNetNodeI

        Parameters
        ----------
        NodeI: TUndirNet::TNodeI const &

        """
        _snap.TUndirNetNodeI_swiginit(self, _snap.new_TUndirNetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TUndirNetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUndirNetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUndirNetNodeI___eq__)
    GetId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TUndirNetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TUndirNetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TUndirNetNodeI_GetOutDeg)
    SortNIdV = _swig_new_instance_method(_snap.TUndirNetNodeI_SortNIdV)
    GetInNId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TUndirNetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TUndirNetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TUndirNetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TUndirNetNodeI_IsNbrNId)
    __swig_destroy__ = _snap.delete_TUndirNetNodeI

# Register TUndirNetNodeI in _snap:
_snap.TUndirNetNodeI_swigregister(TUndirNetNodeI)

class TUNGraphEdgeI(object):
    r"""Proxy of C++ TUNGraphEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUNGraphEdgeI self) -> TUNGraphEdgeI
        __init__(TUNGraphEdgeI self, TUNGraph::TEdgeI const & EdgeI) -> TUNGraphEdgeI

        Parameters
        ----------
        EdgeI: TUNGraph::TEdgeI const &

        """
        _snap.TUNGraphEdgeI_swiginit(self, _snap.new_TUNGraphEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TUNGraphEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUNGraphEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUNGraphEdgeI___eq__)
    GetEI = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetEI)
    GetId = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TUNGraphEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TUNGraphEdgeI

# Register TUNGraphEdgeI in _snap:
_snap.TUNGraphEdgeI_swigregister(TUNGraphEdgeI)

class TUndirNetEdgeI(object):
    r"""Proxy of C++ TUndirNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TUndirNetEdgeI self) -> TUndirNetEdgeI
        __init__(TUndirNetEdgeI self, TUndirNet::TEdgeI const & EdgeI) -> TUndirNetEdgeI

        Parameters
        ----------
        EdgeI: TUndirNet::TEdgeI const &

        """
        _snap.TUndirNetEdgeI_swiginit(self, _snap.new_TUndirNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TUndirNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TUndirNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TUndirNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TUndirNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TUndirNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TUndirNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TUndirNetEdgeI

# Register TUndirNetEdgeI in _snap:
_snap.TUndirNetEdgeI_swigregister(TUndirNetEdgeI)

class TNEANetNodeI(object):
    r"""Proxy of C++ TNEANetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetNodeI self) -> TNEANetNodeI
        __init__(TNEANetNodeI self, TNEANet::TNodeI const & NodeI) -> TNEANetNodeI

        Parameters
        ----------
        NodeI: TNEANet::TNodeI const &

        """
        _snap.TNEANetNodeI_swiginit(self, _snap.new_TNEANetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetNodeI___eq__)
    GetNI = _swig_new_instance_method(_snap.TNEANetNodeI_GetNI)
    GetId = _swig_new_instance_method(_snap.TNEANetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TNEANetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TNEANetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TNEANetNodeI_GetOutDeg)
    GetInNId = _swig_new_instance_method(_snap.TNEANetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TNEANetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TNEANetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TNEANetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TNEANetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TNEANetNodeI_IsNbrNId)
    GetInEId = _swig_new_instance_method(_snap.TNEANetNodeI_GetInEId)
    GetOutEId = _swig_new_instance_method(_snap.TNEANetNodeI_GetOutEId)
    GetNbrEId = _swig_new_instance_method(_snap.TNEANetNodeI_GetNbrEId)
    IsInEId = _swig_new_instance_method(_snap.TNEANetNodeI_IsInEId)
    IsOutEId = _swig_new_instance_method(_snap.TNEANetNodeI_IsOutEId)
    IsNbrEId = _swig_new_instance_method(_snap.TNEANetNodeI_IsNbrEId)
    GetAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetAttrNames)
    GetAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetAttrVal)
    GetIntAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntAttrNames)
    GetIntAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntAttrVal)
    GetIntVAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntVAttrNames)
    GetIntVAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetIntVAttrVal)
    GetStrAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetStrAttrNames)
    GetStrAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetStrAttrVal)
    GetFltAttrNames = _swig_new_instance_method(_snap.TNEANetNodeI_GetFltAttrNames)
    GetFltAttrVal = _swig_new_instance_method(_snap.TNEANetNodeI_GetFltAttrVal)
    __swig_destroy__ = _snap.delete_TNEANetNodeI

# Register TNEANetNodeI in _snap:
_snap.TNEANetNodeI_swigregister(TNEANetNodeI)

class TNEANetEdgeI(object):
    r"""Proxy of C++ TNEANetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetEdgeI self) -> TNEANetEdgeI
        __init__(TNEANetEdgeI self, TNEANet::TEdgeI const & EdgeI) -> TNEANetEdgeI

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        _snap.TNEANetEdgeI_swiginit(self, _snap.new_TNEANetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetEdgeI___eq__)
    GetEI = _swig_new_instance_method(_snap.TNEANetEdgeI_GetEI)
    GetId = _swig_new_instance_method(_snap.TNEANetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TNEANetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TNEANetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TNEANetEdgeI

# Register TNEANetEdgeI in _snap:
_snap.TNEANetEdgeI_swigregister(TNEANetEdgeI)

class TNEANetAIntI(object):
    r"""Proxy of C++ TNEANetAIntI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetAIntI self) -> TNEANetAIntI
        __init__(TNEANetAIntI self, TInt HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAIntI

        Parameters
        ----------
        HIter: TIntVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAIntI self, TNEANet::TAIntI const & I) -> TNEANetAIntI

        Parameters
        ----------
        I: TNEANet::TAIntI const &

        """
        _snap.TNEANetAIntI_swiginit(self, _snap.new_TNEANetAIntI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetAIntI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetAIntI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetAIntI___eq__)
    GetDat = _swig_new_instance_method(_snap.TNEANetAIntI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TNEANetAIntI_IsDeleted)
    __swig_destroy__ = _snap.delete_TNEANetAIntI

# Register TNEANetAIntI in _snap:
_snap.TNEANetAIntI_swigregister(TNEANetAIntI)

class TNEANetAStrI(object):
    r"""Proxy of C++ TNEANetAStrI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetAStrI self) -> TNEANetAStrI
        __init__(TNEANetAStrI self, TStr HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAStrI

        Parameters
        ----------
        HIter: TStrVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAStrI self, TNEANet::TAStrI const & I) -> TNEANetAStrI

        Parameters
        ----------
        I: TNEANet::TAStrI const &

        """
        _snap.TNEANetAStrI_swiginit(self, _snap.new_TNEANetAStrI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetAStrI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetAStrI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetAStrI___eq__)
    GetDat = _swig_new_instance_method(_snap.TNEANetAStrI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TNEANetAStrI_IsDeleted)
    __swig_destroy__ = _snap.delete_TNEANetAStrI

# Register TNEANetAStrI in _snap:
_snap.TNEANetAStrI_swigregister(TNEANetAStrI)

class TNEANetAFltI(object):
    r"""Proxy of C++ TNEANetAFltI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TNEANetAFltI self) -> TNEANetAFltI
        __init__(TNEANetAFltI self, TFlt HIter, TStr attribute, bool isEdgeIter, TNEANet GraphPt) -> TNEANetAFltI

        Parameters
        ----------
        HIter: TFltVecIter const &
        attribute: TStr
        isEdgeIter: bool
        GraphPt: TNEANet const *

        __init__(TNEANetAFltI self, TNEANet::TAFltI const & I) -> TNEANetAFltI

        Parameters
        ----------
        I: TNEANet::TAFltI const &

        """
        _snap.TNEANetAFltI_swiginit(self, _snap.new_TNEANetAFltI(*args))
    Next = _swig_new_instance_method(_snap.TNEANetAFltI_Next)
    __lt__ = _swig_new_instance_method(_snap.TNEANetAFltI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TNEANetAFltI___eq__)
    GetDat = _swig_new_instance_method(_snap.TNEANetAFltI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TNEANetAFltI_IsDeleted)
    __swig_destroy__ = _snap.delete_TNEANetAFltI

# Register TNEANetAFltI in _snap:
_snap.TNEANetAFltI_swigregister(TNEANetAFltI)

class TModeNetNodeI(object):
    r"""Proxy of C++ TModeNetNodeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TModeNetNodeI self) -> TModeNetNodeI
        __init__(TModeNetNodeI self, TModeNet::TNodeI const & NodeI) -> TModeNetNodeI

        Parameters
        ----------
        NodeI: TModeNet::TNodeI const &

        """
        _snap.TModeNetNodeI_swiginit(self, _snap.new_TModeNetNodeI(*args))
    Next = _swig_new_instance_method(_snap.TModeNetNodeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TModeNetNodeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TModeNetNodeI___eq__)
    GetId = _swig_new_instance_method(_snap.TModeNetNodeI_GetId)
    GetDeg = _swig_new_instance_method(_snap.TModeNetNodeI_GetDeg)
    GetInDeg = _swig_new_instance_method(_snap.TModeNetNodeI_GetInDeg)
    GetOutDeg = _swig_new_instance_method(_snap.TModeNetNodeI_GetOutDeg)
    GetInNId = _swig_new_instance_method(_snap.TModeNetNodeI_GetInNId)
    GetOutNId = _swig_new_instance_method(_snap.TModeNetNodeI_GetOutNId)
    GetNbrNId = _swig_new_instance_method(_snap.TModeNetNodeI_GetNbrNId)
    IsInNId = _swig_new_instance_method(_snap.TModeNetNodeI_IsInNId)
    IsOutNId = _swig_new_instance_method(_snap.TModeNetNodeI_IsOutNId)
    IsNbrNId = _swig_new_instance_method(_snap.TModeNetNodeI_IsNbrNId)
    GetInEId = _swig_new_instance_method(_snap.TModeNetNodeI_GetInEId)
    GetOutEId = _swig_new_instance_method(_snap.TModeNetNodeI_GetOutEId)
    GetNbrEId = _swig_new_instance_method(_snap.TModeNetNodeI_GetNbrEId)
    IsInEId = _swig_new_instance_method(_snap.TModeNetNodeI_IsInEId)
    IsOutEId = _swig_new_instance_method(_snap.TModeNetNodeI_IsOutEId)
    IsNbrEId = _swig_new_instance_method(_snap.TModeNetNodeI_IsNbrEId)
    GetAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetAttrNames)
    GetAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetAttrVal)
    GetIntAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntAttrNames)
    GetIntAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntAttrVal)
    GetIntVAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntVAttrNames)
    GetIntVAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetIntVAttrVal)
    GetStrAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetStrAttrNames)
    GetStrAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetStrAttrVal)
    GetFltAttrNames = _swig_new_instance_method(_snap.TModeNetNodeI_GetFltAttrNames)
    GetFltAttrVal = _swig_new_instance_method(_snap.TModeNetNodeI_GetFltAttrVal)
    __swig_destroy__ = _snap.delete_TModeNetNodeI

# Register TModeNetNodeI in _snap:
_snap.TModeNetNodeI_swigregister(TModeNetNodeI)

class TModeNetEdgeI(object):
    r"""Proxy of C++ TModeNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TModeNetEdgeI self) -> TModeNetEdgeI
        __init__(TModeNetEdgeI self, TNEANet::TEdgeI const & EdgeI) -> TModeNetEdgeI

        Parameters
        ----------
        EdgeI: TNEANet::TEdgeI const &

        """
        _snap.TModeNetEdgeI_swiginit(self, _snap.new_TModeNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TModeNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TModeNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TModeNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TModeNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TModeNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TModeNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TModeNetEdgeI

# Register TModeNetEdgeI in _snap:
_snap.TModeNetEdgeI_swigregister(TModeNetEdgeI)

class TCrossNetEdgeI(object):
    r"""Proxy of C++ TCrossNetEdgeI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetEdgeI self) -> TCrossNetEdgeI
        __init__(TCrossNetEdgeI self, TCrossNet::TCrossEdgeI const & EdgeI) -> TCrossNetEdgeI

        Parameters
        ----------
        EdgeI: TCrossNet::TCrossEdgeI const &

        """
        _snap.TCrossNetEdgeI_swiginit(self, _snap.new_TCrossNetEdgeI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetEdgeI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetEdgeI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetEdgeI___eq__)
    GetId = _swig_new_instance_method(_snap.TCrossNetEdgeI_GetId)
    GetSrcNId = _swig_new_instance_method(_snap.TCrossNetEdgeI_GetSrcNId)
    GetDstNId = _swig_new_instance_method(_snap.TCrossNetEdgeI_GetDstNId)
    __swig_destroy__ = _snap.delete_TCrossNetEdgeI

# Register TCrossNetEdgeI in _snap:
_snap.TCrossNetEdgeI_swigregister(TCrossNetEdgeI)

class TCrossNetAIntI(object):
    r"""Proxy of C++ TCrossNetAIntI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetAIntI self) -> TCrossNetAIntI
        __init__(TCrossNetAIntI self, TInt HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAIntI

        Parameters
        ----------
        HIter: TIntVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAIntI self, TCrossNet::TAIntI const & I) -> TCrossNetAIntI

        Parameters
        ----------
        I: TCrossNet::TAIntI const &

        """
        _snap.TCrossNetAIntI_swiginit(self, _snap.new_TCrossNetAIntI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetAIntI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetAIntI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetAIntI___eq__)
    GetDat = _swig_new_instance_method(_snap.TCrossNetAIntI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TCrossNetAIntI_IsDeleted)
    __swig_destroy__ = _snap.delete_TCrossNetAIntI

# Register TCrossNetAIntI in _snap:
_snap.TCrossNetAIntI_swigregister(TCrossNetAIntI)

class TCrossNetAStrI(object):
    r"""Proxy of C++ TCrossNetAStrI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetAStrI self) -> TCrossNetAStrI
        __init__(TCrossNetAStrI self, TStr HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAStrI

        Parameters
        ----------
        HIter: TStrVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAStrI self, TCrossNet::TAStrI const & I) -> TCrossNetAStrI

        Parameters
        ----------
        I: TCrossNet::TAStrI const &

        """
        _snap.TCrossNetAStrI_swiginit(self, _snap.new_TCrossNetAStrI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetAStrI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetAStrI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetAStrI___eq__)
    GetDat = _swig_new_instance_method(_snap.TCrossNetAStrI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TCrossNetAStrI_IsDeleted)
    __swig_destroy__ = _snap.delete_TCrossNetAStrI

# Register TCrossNetAStrI in _snap:
_snap.TCrossNetAStrI_swigregister(TCrossNetAStrI)

class TCrossNetAFltI(object):
    r"""Proxy of C++ TCrossNetAFltI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TCrossNetAFltI self) -> TCrossNetAFltI
        __init__(TCrossNetAFltI self, TFlt HIter, TStr attribute, TCrossNet GraphPt) -> TCrossNetAFltI

        Parameters
        ----------
        HIter: TFltVecIter const &
        attribute: TStr
        GraphPt: TCrossNet const *

        __init__(TCrossNetAFltI self, TCrossNet::TAFltI const & I) -> TCrossNetAFltI

        Parameters
        ----------
        I: TCrossNet::TAFltI const &

        """
        _snap.TCrossNetAFltI_swiginit(self, _snap.new_TCrossNetAFltI(*args))
    Next = _swig_new_instance_method(_snap.TCrossNetAFltI_Next)
    __lt__ = _swig_new_instance_method(_snap.TCrossNetAFltI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TCrossNetAFltI___eq__)
    GetDat = _swig_new_instance_method(_snap.TCrossNetAFltI_GetDat)
    IsDeleted = _swig_new_instance_method(_snap.TCrossNetAFltI_IsDeleted)
    __swig_destroy__ = _snap.delete_TCrossNetAFltI

# Register TCrossNetAFltI in _snap:
_snap.TCrossNetAFltI_swigregister(TCrossNetAFltI)

class TMMNetModeNetI(object):
    r"""Proxy of C++ TMMNetModeNetI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMMNetModeNetI self) -> TMMNetModeNetI
        __init__(TMMNetModeNetI self, TMMNet::TModeNetI const & NodeI) -> TMMNetModeNetI

        Parameters
        ----------
        NodeI: TMMNet::TModeNetI const &

        """
        _snap.TMMNetModeNetI_swiginit(self, _snap.new_TMMNetModeNetI(*args))
    Next = _swig_new_instance_method(_snap.TMMNetModeNetI_Next)
    __lt__ = _swig_new_instance_method(_snap.TMMNetModeNetI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TMMNetModeNetI___eq__)
    GetModeId = _swig_new_instance_method(_snap.TMMNetModeNetI_GetModeId)
    GetModeNet = _swig_new_instance_method(_snap.TMMNetModeNetI_GetModeNet)
    __swig_destroy__ = _snap.delete_TMMNetModeNetI

# Register TMMNetModeNetI in _snap:
_snap.TMMNetModeNetI_swigregister(TMMNetModeNetI)

class TMMNetCrossNetI(object):
    r"""Proxy of C++ TMMNetCrossNetI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMMNetCrossNetI self) -> TMMNetCrossNetI
        __init__(TMMNetCrossNetI self, TMMNet::TCrossNetI const & EdgeI) -> TMMNetCrossNetI

        Parameters
        ----------
        EdgeI: TMMNet::TCrossNetI const &

        """
        _snap.TMMNetCrossNetI_swiginit(self, _snap.new_TMMNetCrossNetI(*args))
    Next = _swig_new_instance_method(_snap.TMMNetCrossNetI_Next)
    __lt__ = _swig_new_instance_method(_snap.TMMNetCrossNetI___lt__)
    __eq__ = _swig_new_instance_method(_snap.TMMNetCrossNetI___eq__)
    GetCrossId = _swig_new_instance_method(_snap.TMMNetCrossNetI_GetCrossId)
    GetCrossNet = _swig_new_instance_method(_snap.TMMNetCrossNetI_GetCrossNet)
    __swig_destroy__ = _snap.delete_TMMNetCrossNetI

# Register TMMNetCrossNetI in _snap:
_snap.TMMNetCrossNetI_swigregister(TMMNetCrossNetI)

TPrGraph = _snap.TPrGraph
LoadModeNetToNet = _snap.LoadModeNetToNet
LoadCrossNetToNet = _snap.LoadCrossNetToNet
GetRndWalkRestart_PUNGraph = _snap.GetRndWalkRestart_PUNGraph
GetRndWalkRestart_PNGraph = _snap.GetRndWalkRestart_PNGraph
GetRndWalkRestart_PNEANet = _snap.GetRndWalkRestart_PNEANet


#
# define __getitem__ for [] addressing
#

def getitem_vec(self, i):
    return self.GetVal(i)

def setitem_vec(self, i, val):
    self.SetVal(i, val)

def len_vec(self):
    return self.Len()

def delitem_vec(self,  i):
    self.Del(i)

#
# define iterator for TVec
#

class IterVec:
    def __init__(self, vec):
        self.vec = vec
        self.count = -1

    def __iter__(self):
        return self

    def next(self):
        if self.count+1 < self.vec.Len():
            self.count += 1
            return self.vec[self.count]

        raise StopIteration

def itervec(self):
    return IterVec(self)

# expand TVec types with methods __iter__ and __getitem__

TIntV.__getitem__ = getitem_vec
TIntV.__setitem__ = setitem_vec
TIntV.__iter__ = itervec
TIntV.__len__ = len_vec
TIntV.__delitem__ = delitem_vec
TFltV.__getitem__ = getitem_vec
TFltV.__setitem__ = setitem_vec
TFltV.__iter__ = itervec
TFltV.__len__ = len_vec
TFltV.__delitem__ = delitem_vec
TStrV.__getitem__ = getitem_vec
TStrV.__setitem__ = setitem_vec
TStrV.__iter__ = itervec
TStrV.__len__ = len_vec
TStrV.__delitem__ = delitem_vec
TIntPrV.__getitem__ = getitem_vec
TIntPrV.__setitem__ = setitem_vec
TIntPrV.__iter__ = itervec
TIntPrV.__len__ = len_vec
TIntPrV.__delitem__ = delitem_vec
TFltPrV.__getitem__ = getitem_vec
TFltPrV.__setitem__ = setitem_vec
TFltPrV.__iter__ = itervec
TFltPrV.__len__ = len_vec
TFltPrV.__delitem__ = delitem_vec
TStrIntPrV.__getitem__ = getitem_vec
TStrIntPrV.__setitem__ = setitem_vec
TStrIntPrV.__iter__ = itervec
TStrIntPrV.__len__ = len_vec
TStrIntPrV.__delitem__ = delitem_vec
TIntTrV.__getitem__ = getitem_vec
TIntTrV.__setitem__ = setitem_vec
TIntTrV.__iter__ = itervec
TIntTrV.__len__ = len_vec
TIntTrV.__delitem__ = delitem_vec
TIntFltKdV.__getitem__ = getitem_vec
TIntFltKdV.__setitem__ = setitem_vec
TIntFltKdV.__iter__ = itervec
TIntFltKdV.__len__ = len_vec
TIntFltKdV.__delitem__ = delitem_vec
TIntIntVV.__getitem__ = getitem_vec
TIntIntVV.__setitem__ = setitem_vec
TIntIntVV.__iter__ = itervec
TIntIntVV.__len__ = len_vec
TIntIntVV.__delitem__ = delitem_vec
PNEANetV.__getitem__ = getitem_vec
PNEANetV.__setitem__ = setitem_vec
PNEANetV.__iter__ = itervec
PNEANetV.__len__ = len_vec
PNEANetV.__delitem__ = delitem_vec
TFltVFltV.__getitem__ = getitem_vec
TFltVFltV.__setitem__ = setitem_vec
TFltVFltV.__iter__ = itervec
TFltVFltV.__len__ = len_vec
TFltVFltV.__delitem__ = delitem_vec
TCnComV.__getitem__ = getitem_vec
TCnComV.__setitem__ = setitem_vec
TCnComV.__iter__ = itervec
TCnComV.__len__ = len_vec
TCnComV.__delitem__ = delitem_vec
TCnCom.__getitem__ = getitem_vec
TCnCom.__setitem__ = setitem_vec
TCnCom.__iter__ = itervec
TCnCom.__len__ = len_vec
TCnCom.__delitem__ = delitem_vec
Schema.__getitem__ = getitem_vec
Schema.__setitem__ = setitem_vec
Schema.__iter__ = itervec
Schema.__len__ = len_vec
Schema.__delitem__ = delitem_vec



#
# define __getitem__ for [] addressing
#
def getitem_hash(self, i):
    return self.GetDat(i)

def setitem_hash(self, key, value):
    self.AddDat(key, value)

def delitem_hash(self, key):
    self.DelKey(key)

def len_hash(self):
    return self.Len()

#
# define iterator for THash
#

class IterHash:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration

        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhash(self):
    return IterHash(self)

TIntH.__getitem__ = getitem_hash
TIntH.__setitem__ = setitem_hash
TIntH.__delitem__ = delitem_hash
TIntH.__len__ = len_hash
TIntH.__iter__ = iterhash
TIntIntH.__getitem__ = getitem_hash
TIntIntH.__setitem__ = setitem_hash
TIntIntH.__delitem__ = delitem_hash
TIntIntH.__len__ = len_hash
TIntIntH.__iter__ = iterhash
TIntFltH.__getitem__ = getitem_hash
TIntFltH.__setitem__ = setitem_hash
TIntFltH.__delitem__ = delitem_hash
TIntFltH.__len__ = len_hash
TIntFltH.__iter__ = iterhash
TIntStrH.__getitem__ = getitem_hash
TIntStrH.__setitem__ = setitem_hash
TIntStrH.__delitem__ = delitem_hash
TIntStrH.__len__ = len_hash
TIntStrH.__iter__ = iterhash
TIntPrFltH.__getitem__ = getitem_hash
TIntPrFltH.__setitem__ = setitem_hash
TIntPrFltH.__delitem__ = delitem_hash
TIntPrFltH.__len__ = len_hash
TIntPrFltH.__iter__ = iterhash
TStrIntH.__getitem__ = getitem_hash
TStrIntH.__setitem__ = setitem_hash
TStrIntH.__iter__ = iterhash
TStrIntH.__delitem__ = delitem_hash
TStrIntH.__len__ = len_hash



#
# define __getitem__ for [] addressing
#
def getitem_hashset(self, i):
    return self.GetSetKey(i)

def delitem_hashset(self, i):
    self.DelKey(i)

def contains_hashset(self, key):
    return self.IsKey(key)

#
# define iterator for THashSet
#

class IterHashSet:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration

        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhashset(self):
    return IterHashSet(self)


TIntSet.__iter__ = iterhashset
TIntSet.__contains__ = contains_hashset


PrintGraphStatTable_PNEANet = _snap.PrintGraphStatTable_PNEANet
class PNEANet(object):
    r"""Proxy of C++ TPt< TNEANet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PNEANet_New)
    __swig_destroy__ = _snap.delete_PNEANet
    Save = _swig_new_instance_method(_snap.PNEANet_Save)
    __deref__ = _swig_new_instance_method(_snap.PNEANet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PNEANet___ref__)
    __call__ = _swig_new_instance_method(_snap.PNEANet___call__)
    Empty = _swig_new_instance_method(_snap.PNEANet_Empty)
    Clr = _swig_new_instance_method(_snap.PNEANet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PNEANet_GetRefs)
    CRef = property(_snap.PNEANet_CRef_get, doc=r"""CRef : TCRef""")
    Save_V1 = _swig_new_instance_method(_snap.PNEANet_Save_V1)
    Save_V2 = _swig_new_instance_method(_snap.PNEANet_Save_V2)
    Load = _swig_new_instance_method(_snap.PNEANet_Load)
    Load_V1 = _swig_new_instance_method(_snap.PNEANet_Load_V1)
    Load_V2 = _swig_new_instance_method(_snap.PNEANet_Load_V2)
    LoadNetworkShM = _swig_new_instance_method(_snap.PNEANet_LoadNetworkShM)
    LoadShM = _swig_new_instance_method(_snap.PNEANet_LoadShM)
    ConvertToSparse = _swig_new_instance_method(_snap.PNEANet_ConvertToSparse)
    HasFlag = _swig_new_instance_method(_snap.PNEANet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PNEANet_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PNEANet_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PNEANet_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PNEANet_DelNode)
    IsNode = _swig_new_instance_method(_snap.PNEANet_IsNode)
    BegNI = _swig_new_instance_method(_snap.PNEANet_BegNI)
    EndNI = _swig_new_instance_method(_snap.PNEANet_EndNI)
    GetNI = _swig_new_instance_method(_snap.PNEANet_GetNI)
    BegNAIntI = _swig_new_instance_method(_snap.PNEANet_BegNAIntI)
    EndNAIntI = _swig_new_instance_method(_snap.PNEANet_EndNAIntI)
    GetNAIntI = _swig_new_instance_method(_snap.PNEANet_GetNAIntI)
    BegNAIntVI = _swig_new_instance_method(_snap.PNEANet_BegNAIntVI)
    EndNAIntVI = _swig_new_instance_method(_snap.PNEANet_EndNAIntVI)
    GetNAIntVI = _swig_new_instance_method(_snap.PNEANet_GetNAIntVI)
    BegNAStrI = _swig_new_instance_method(_snap.PNEANet_BegNAStrI)
    EndNAStrI = _swig_new_instance_method(_snap.PNEANet_EndNAStrI)
    GetNAStrI = _swig_new_instance_method(_snap.PNEANet_GetNAStrI)
    BegNAFltI = _swig_new_instance_method(_snap.PNEANet_BegNAFltI)
    EndNAFltI = _swig_new_instance_method(_snap.PNEANet_EndNAFltI)
    GetNAFltI = _swig_new_instance_method(_snap.PNEANet_GetNAFltI)
    AttrNameNI = _swig_new_instance_method(_snap.PNEANet_AttrNameNI)
    AttrValueNI = _swig_new_instance_method(_snap.PNEANet_AttrValueNI)
    IntAttrNameNI = _swig_new_instance_method(_snap.PNEANet_IntAttrNameNI)
    IntAttrValueNI = _swig_new_instance_method(_snap.PNEANet_IntAttrValueNI)
    IntVAttrNameNI = _swig_new_instance_method(_snap.PNEANet_IntVAttrNameNI)
    IntVAttrValueNI = _swig_new_instance_method(_snap.PNEANet_IntVAttrValueNI)
    StrAttrNameNI = _swig_new_instance_method(_snap.PNEANet_StrAttrNameNI)
    StrAttrValueNI = _swig_new_instance_method(_snap.PNEANet_StrAttrValueNI)
    FltAttrNameNI = _swig_new_instance_method(_snap.PNEANet_FltAttrNameNI)
    FltAttrValueNI = _swig_new_instance_method(_snap.PNEANet_FltAttrValueNI)
    AttrNameEI = _swig_new_instance_method(_snap.PNEANet_AttrNameEI)
    AttrValueEI = _swig_new_instance_method(_snap.PNEANet_AttrValueEI)
    IntAttrNameEI = _swig_new_instance_method(_snap.PNEANet_IntAttrNameEI)
    IntAttrValueEI = _swig_new_instance_method(_snap.PNEANet_IntAttrValueEI)
    IntVAttrNameEI = _swig_new_instance_method(_snap.PNEANet_IntVAttrNameEI)
    IntVAttrValueEI = _swig_new_instance_method(_snap.PNEANet_IntVAttrValueEI)
    StrAttrNameEI = _swig_new_instance_method(_snap.PNEANet_StrAttrNameEI)
    StrAttrValueEI = _swig_new_instance_method(_snap.PNEANet_StrAttrValueEI)
    FltAttrNameEI = _swig_new_instance_method(_snap.PNEANet_FltAttrNameEI)
    FltAttrValueEI = _swig_new_instance_method(_snap.PNEANet_FltAttrValueEI)
    BegEAIntI = _swig_new_instance_method(_snap.PNEANet_BegEAIntI)
    EndEAIntI = _swig_new_instance_method(_snap.PNEANet_EndEAIntI)
    GetEAIntI = _swig_new_instance_method(_snap.PNEANet_GetEAIntI)
    BegEAIntVI = _swig_new_instance_method(_snap.PNEANet_BegEAIntVI)
    EndEAIntVI = _swig_new_instance_method(_snap.PNEANet_EndEAIntVI)
    GetEAIntVI = _swig_new_instance_method(_snap.PNEANet_GetEAIntVI)
    BegEAStrI = _swig_new_instance_method(_snap.PNEANet_BegEAStrI)
    EndEAStrI = _swig_new_instance_method(_snap.PNEANet_EndEAStrI)
    GetEAStrI = _swig_new_instance_method(_snap.PNEANet_GetEAStrI)
    BegEAFltI = _swig_new_instance_method(_snap.PNEANet_BegEAFltI)
    EndEAFltI = _swig_new_instance_method(_snap.PNEANet_EndEAFltI)
    GetEAFltI = _swig_new_instance_method(_snap.PNEANet_GetEAFltI)
    GetMxNId = _swig_new_instance_method(_snap.PNEANet_GetMxNId)
    GetMxEId = _swig_new_instance_method(_snap.PNEANet_GetMxEId)
    GetEdges = _swig_new_instance_method(_snap.PNEANet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PNEANet_AddEdge)
    DelEdge = _swig_new_instance_method(_snap.PNEANet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PNEANet_IsEdge)
    GetEId = _swig_new_instance_method(_snap.PNEANet_GetEId)
    BegEI = _swig_new_instance_method(_snap.PNEANet_BegEI)
    EndEI = _swig_new_instance_method(_snap.PNEANet_EndEI)
    GetEI = _swig_new_instance_method(_snap.PNEANet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PNEANet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PNEANet_GetRndNI)
    GetRndEId = _swig_new_instance_method(_snap.PNEANet_GetRndEId)
    GetRndEI = _swig_new_instance_method(_snap.PNEANet_GetRndEI)
    GetNIdV = _swig_new_instance_method(_snap.PNEANet_GetNIdV)
    GetEIdV = _swig_new_instance_method(_snap.PNEANet_GetEIdV)
    Reserve = _swig_new_instance_method(_snap.PNEANet_Reserve)
    Defrag = _swig_new_instance_method(_snap.PNEANet_Defrag)
    IsOk = _swig_new_instance_method(_snap.PNEANet_IsOk)
    Dump = _swig_new_instance_method(_snap.PNEANet_Dump)
    AddIntAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddIntAttrDatN)
    AddStrAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddStrAttrDatN)
    AddFltAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddFltAttrDatN)
    AddIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrDatN)
    AppendIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_AppendIntVAttrDatN)
    DelFromIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_DelFromIntVAttrDatN)
    AddIntAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddIntAttrDatE)
    AddStrAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddStrAttrDatE)
    AddFltAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddFltAttrDatE)
    AddIntVAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrDatE)
    AppendIntVAttrDatE = _swig_new_instance_method(_snap.PNEANet_AppendIntVAttrDatE)
    GetIntAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetIntAttrDatN)
    GetStrAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetStrAttrDatN)
    GetFltAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetFltAttrDatN)
    GetIntVAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetIntVAttrDatN)
    GetIntAttrIndN = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndN)
    GetAttrIndN = _swig_new_instance_method(_snap.PNEANet_GetAttrIndN)
    GetIntAttrIndDatN = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndDatN)
    GetStrAttrIndDatN = _swig_new_instance_method(_snap.PNEANet_GetStrAttrIndDatN)
    GetFltAttrIndDatN = _swig_new_instance_method(_snap.PNEANet_GetFltAttrIndDatN)
    GetIntAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetIntAttrDatE)
    GetStrAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetStrAttrDatE)
    GetFltAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetFltAttrDatE)
    GetIntVAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetIntVAttrDatE)
    GetIntAttrIndE = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndE)
    GetAttrIndE = _swig_new_instance_method(_snap.PNEANet_GetAttrIndE)
    GetIntAttrIndDatE = _swig_new_instance_method(_snap.PNEANet_GetIntAttrIndDatE)
    GetFltAttrIndDatE = _swig_new_instance_method(_snap.PNEANet_GetFltAttrIndDatE)
    GetStrAttrIndDatE = _swig_new_instance_method(_snap.PNEANet_GetStrAttrIndDatE)
    DelAttrDatN = _swig_new_instance_method(_snap.PNEANet_DelAttrDatN)
    DelAttrDatE = _swig_new_instance_method(_snap.PNEANet_DelAttrDatE)
    AddIntAttrN = _swig_new_instance_method(_snap.PNEANet_AddIntAttrN)
    AddStrAttrN = _swig_new_instance_method(_snap.PNEANet_AddStrAttrN)
    AddFltAttrN = _swig_new_instance_method(_snap.PNEANet_AddFltAttrN)
    AddIntVAttrN = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrN)
    AddIntAttrE = _swig_new_instance_method(_snap.PNEANet_AddIntAttrE)
    AddStrAttrE = _swig_new_instance_method(_snap.PNEANet_AddStrAttrE)
    AddFltAttrE = _swig_new_instance_method(_snap.PNEANet_AddFltAttrE)
    AddIntVAttrE = _swig_new_instance_method(_snap.PNEANet_AddIntVAttrE)
    DelAttrN = _swig_new_instance_method(_snap.PNEANet_DelAttrN)
    DelAttrE = _swig_new_instance_method(_snap.PNEANet_DelAttrE)
    IsAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsAttrDeletedN)
    IsIntAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsIntAttrDeletedN)
    IsIntVAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsIntVAttrDeletedN)
    IsStrAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsStrAttrDeletedN)
    IsFltAttrDeletedN = _swig_new_instance_method(_snap.PNEANet_IsFltAttrDeletedN)
    NodeAttrIsDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsDeleted)
    NodeAttrIsIntDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsIntDeleted)
    NodeAttrIsIntVDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsIntVDeleted)
    NodeAttrIsStrDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsStrDeleted)
    NodeAttrIsFltDeleted = _swig_new_instance_method(_snap.PNEANet_NodeAttrIsFltDeleted)
    IsAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsAttrDeletedE)
    IsIntAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsIntAttrDeletedE)
    IsIntVAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsIntVAttrDeletedE)
    IsStrAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsStrAttrDeletedE)
    IsFltAttrDeletedE = _swig_new_instance_method(_snap.PNEANet_IsFltAttrDeletedE)
    EdgeAttrIsDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsDeleted)
    EdgeAttrIsIntDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsIntDeleted)
    EdgeAttrIsIntVDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsIntVDeleted)
    EdgeAttrIsStrDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsStrDeleted)
    EdgeAttrIsFltDeleted = _swig_new_instance_method(_snap.PNEANet_EdgeAttrIsFltDeleted)
    GetNodeAttrValue = _swig_new_instance_method(_snap.PNEANet_GetNodeAttrValue)
    GetEdgeAttrValue = _swig_new_instance_method(_snap.PNEANet_GetEdgeAttrValue)
    GetWeightOutEdges = _swig_new_instance_method(_snap.PNEANet_GetWeightOutEdges)
    IsFltAttrE = _swig_new_instance_method(_snap.PNEANet_IsFltAttrE)
    IsIntAttrE = _swig_new_instance_method(_snap.PNEANet_IsIntAttrE)
    IsStrAttrE = _swig_new_instance_method(_snap.PNEANet_IsStrAttrE)
    GetFltAttrVecE = _swig_new_instance_method(_snap.PNEANet_GetFltAttrVecE)
    GetFltKeyIdE = _swig_new_instance_method(_snap.PNEANet_GetFltKeyIdE)
    GetWeightOutEdgesV = _swig_new_instance_method(_snap.PNEANet_GetWeightOutEdgesV)
    GetAttrNNames = _swig_new_instance_method(_snap.PNEANet_GetAttrNNames)
    GetAttrENames = _swig_new_instance_method(_snap.PNEANet_GetAttrENames)
    AddSAttrDatN = _swig_new_instance_method(_snap.PNEANet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.PNEANet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.PNEANet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.PNEANet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.PNEANet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.PNEANet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.PNEANet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.PNEANet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.PNEANet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.PNEANet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.PNEANet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.PNEANet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.PNEANet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.PNEANet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.PNEANet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.PNEANet_GetSAttrNameE)

# Register PNEANet in _snap:
_snap.PNEANet_swigregister(PNEANet)
PNEANet_New = _snap.PNEANet_New

PrintInfo_PNEANet = _snap.PrintInfo_PNEANet
GetNodeWcc_PNEANet = _snap.GetNodeWcc_PNEANet
IsConnected_PNEANet = _snap.IsConnected_PNEANet
IsWeaklyConn_PNEANet = _snap.IsWeaklyConn_PNEANet
GetWccSzCnt_PNEANet = _snap.GetWccSzCnt_PNEANet
GetWccs_PNEANet = _snap.GetWccs_PNEANet
GetSccSzCnt_PNEANet = _snap.GetSccSzCnt_PNEANet
GetSccs_PNEANet = _snap.GetSccs_PNEANet
GetMxWccSz_PNEANet = _snap.GetMxWccSz_PNEANet
GetMxSccSz_PNEANet = _snap.GetMxSccSz_PNEANet
GetMxWcc_PNEANet = _snap.GetMxWcc_PNEANet
GetMxScc_PNEANet = _snap.GetMxScc_PNEANet
GetMxBiCon_PNEANet = _snap.GetMxBiCon_PNEANet
GetNodeEcc_PNEANet = _snap.GetNodeEcc_PNEANet
GetPageRank_PNEANet = _snap.GetPageRank_PNEANet
GetPageRank_v1_PNEANet = _snap.GetPageRank_v1_PNEANet
GetHits_PNEANet = _snap.GetHits_PNEANet
GetBetweennessCentr_PNEANet = _snap.GetBetweennessCentr_PNEANet
GetClosenessCentr_PNEANet = _snap.GetClosenessCentr_PNEANet
GetFarnessCentr_PNEANet = _snap.GetFarnessCentr_PNEANet
CntInDegNodes_PNEANet = _snap.CntInDegNodes_PNEANet
CntOutDegNodes_PNEANet = _snap.CntOutDegNodes_PNEANet
CntDegNodes_PNEANet = _snap.CntDegNodes_PNEANet
CntNonZNodes_PNEANet = _snap.CntNonZNodes_PNEANet
CntEdgesToSet_PNEANet = _snap.CntEdgesToSet_PNEANet
GetMxDegNId_PNEANet = _snap.GetMxDegNId_PNEANet
GetMxInDegNId_PNEANet = _snap.GetMxInDegNId_PNEANet
GetMxOutDegNId_PNEANet = _snap.GetMxOutDegNId_PNEANet
GetInDegCnt_PNEANet = _snap.GetInDegCnt_PNEANet
GetOutDegCnt_PNEANet = _snap.GetOutDegCnt_PNEANet
GetDegCnt_PNEANet = _snap.GetDegCnt_PNEANet
GetDegSeqV_PNEANet = _snap.GetDegSeqV_PNEANet
GetNodeInDegV_PNEANet = _snap.GetNodeInDegV_PNEANet
GetNodeOutDegV_PNEANet = _snap.GetNodeOutDegV_PNEANet
CntUniqUndirEdges_PNEANet = _snap.CntUniqUndirEdges_PNEANet
CntUniqDirEdges_PNEANet = _snap.CntUniqDirEdges_PNEANet
CntUniqBiDirEdges_PNEANet = _snap.CntUniqBiDirEdges_PNEANet
CntSelfEdges_PNEANet = _snap.CntSelfEdges_PNEANet
GetUnDir_PNEANet = _snap.GetUnDir_PNEANet
MakeUnDir_PNEANet = _snap.MakeUnDir_PNEANet
AddSelfEdges_PNEANet = _snap.AddSelfEdges_PNEANet
DelSelfEdges_PNEANet = _snap.DelSelfEdges_PNEANet
DelNodes_PNEANet = _snap.DelNodes_PNEANet
DelZeroDegNodes_PNEANet = _snap.DelZeroDegNodes_PNEANet
DelDegKNodes_PNEANet = _snap.DelDegKNodes_PNEANet
IsTree_PNEANet = _snap.IsTree_PNEANet
GetTreeRootNId_PNEANet = _snap.GetTreeRootNId_PNEANet
GetTreeSig_PNEANet = _snap.GetTreeSig_PNEANet
GetBfsTree_PNEANet = _snap.GetBfsTree_PNEANet
GetSubTreeSz_PNEANet = _snap.GetSubTreeSz_PNEANet
GetNodesAtHop_PNEANet = _snap.GetNodesAtHop_PNEANet
GetNodesAtHops_PNEANet = _snap.GetNodesAtHops_PNEANet
GetShortPath_PNEANet = _snap.GetShortPath_PNEANet
GetBfsFullDiam_PNEANet = _snap.GetBfsFullDiam_PNEANet
GetBfsEffDiam_PNEANet = _snap.GetBfsEffDiam_PNEANet
GetBfsEffDiamAll_PNEANet = _snap.GetBfsEffDiamAll_PNEANet
DrawGViz_PNEANet = _snap.DrawGViz_PNEANet
GenGrid_PNEANet = _snap.GenGrid_PNEANet
GenStar_PNEANet = _snap.GenStar_PNEANet
GenCircle_PNEANet = _snap.GenCircle_PNEANet
GenFull_PNEANet = _snap.GenFull_PNEANet
GenTree_PNEANet = _snap.GenTree_PNEANet
GenBaraHierar_PNEANet = _snap.GenBaraHierar_PNEANet
GenRndGnm_PNEANet = _snap.GenRndGnm_PNEANet
LoadEdgeList_PNEANet = _snap.LoadEdgeList_PNEANet
LoadEdgeListStr_PNEANet = _snap.LoadEdgeListStr_PNEANet
LoadConnList_PNEANet = _snap.LoadConnList_PNEANet
LoadConnListStr_PNEANet = _snap.LoadConnListStr_PNEANet
LoadPajek_PNEANet = _snap.LoadPajek_PNEANet
SaveEdgeList_PNEANet = _snap.SaveEdgeList_PNEANet
SavePajek_PNEANet = _snap.SavePajek_PNEANet
SaveMatlabSparseMtx_PNEANet = _snap.SaveMatlabSparseMtx_PNEANet
SaveGViz_PNEANet = _snap.SaveGViz_PNEANet
GetKCore_PNEANet = _snap.GetKCore_PNEANet
GetKCoreEdges_PNEANet = _snap.GetKCoreEdges_PNEANet
GetKCoreNodes_PNEANet = _snap.GetKCoreNodes_PNEANet
ConvertGraph_PNEANet_PNEANet = _snap.ConvertGraph_PNEANet_PNEANet
ConvertGraph_PNEANet_PNGraph = _snap.ConvertGraph_PNEANet_PNGraph
ConvertGraph_PNEANet_PUNGraph = _snap.ConvertGraph_PNEANet_PUNGraph
ConvertSubGraph_PNEANet_PNEANet = _snap.ConvertSubGraph_PNEANet_PNEANet
ConvertSubGraph_PNEANet_PNGraph = _snap.ConvertSubGraph_PNEANet_PNGraph
ConvertSubGraph_PNEANet_PUNGraph = _snap.ConvertSubGraph_PNEANet_PUNGraph
ConvertESubGraph_PNEANet_PNEANet = _snap.ConvertESubGraph_PNEANet_PNEANet
GetSubGraph_PNEANet = _snap.GetSubGraph_PNEANet
GetESubGraph_PNEANet = _snap.GetESubGraph_PNEANet
GetRndSubGraph_PNEANet = _snap.GetRndSubGraph_PNEANet
GetRndESubGraph_PNEANet = _snap.GetRndESubGraph_PNEANet
GetClustCf_PNEANet = _snap.GetClustCf_PNEANet
GetClustCfAll_PNEANet = _snap.GetClustCfAll_PNEANet
GetNodeClustCf_PNEANet = _snap.GetNodeClustCf_PNEANet
GetTriads_PNEANet = _snap.GetTriads_PNEANet
GetTriadsAll_PNEANet = _snap.GetTriadsAll_PNEANet
GetTriadEdges_PNEANet = _snap.GetTriadEdges_PNEANet
GetNodeTriads_PNEANet = _snap.GetNodeTriads_PNEANet
GetNodeTriadsAll_PNEANet = _snap.GetNodeTriadsAll_PNEANet
GetTriadParticip_PNEANet = _snap.GetTriadParticip_PNEANet
GetTriangleCnt_PNEANet = _snap.GetTriangleCnt_PNEANet
GetCmnNbrs_PNEANet = _snap.GetCmnNbrs_PNEANet
GetLen2Paths_PNEANet = _snap.GetLen2Paths_PNEANet
GetModularity_PNEANet = _snap.GetModularity_PNEANet
GetEdgesInOut_PNEANet = _snap.GetEdgesInOut_PNEANet
GetAnf_PNEANet = _snap.GetAnf_PNEANet
GetAnfEffDiam_PNEANet = _snap.GetAnfEffDiam_PNEANet
TestAnf_PNEANet = _snap.TestAnf_PNEANet
PlotKCoreEdges_PNEANet = _snap.PlotKCoreEdges_PNEANet
PlotKCoreNodes_PNEANet = _snap.PlotKCoreNodes_PNEANet
PlotShortPathDistr_PNEANet = _snap.PlotShortPathDistr_PNEANet
PlotHops_PNEANet = _snap.PlotHops_PNEANet
PlotClustCf_PNEANet = _snap.PlotClustCf_PNEANet
PlotSccDistr_PNEANet = _snap.PlotSccDistr_PNEANet
PlotWccDistr_PNEANet = _snap.PlotWccDistr_PNEANet
PlotOutDegDistr_PNEANet = _snap.PlotOutDegDistr_PNEANet
PlotInDegDistr_PNEANet = _snap.PlotInDegDistr_PNEANet
PercentDegree_PNEANet = _snap.PercentDegree_PNEANet
NodesGTEDegree_PNEANet = _snap.NodesGTEDegree_PNEANet
MxDegree_PNEANet = _snap.MxDegree_PNEANet
PercentMxWcc_PNEANet = _snap.PercentMxWcc_PNEANet
PercentMxScc_PNEANet = _snap.PercentMxScc_PNEANet
ToNetwork_PNEANet = _snap.ToNetwork_PNEANet
class PMMNet(object):
    r"""Proxy of C++ TPt< TMMNet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PMMNet_New)
    __swig_destroy__ = _snap.delete_PMMNet
    Save = _swig_new_instance_method(_snap.PMMNet_Save)
    __deref__ = _swig_new_instance_method(_snap.PMMNet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PMMNet___ref__)
    __call__ = _swig_new_instance_method(_snap.PMMNet___call__)
    Empty = _swig_new_instance_method(_snap.PMMNet_Empty)
    Clr = _swig_new_instance_method(_snap.PMMNet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PMMNet_GetRefs)
    CRef = property(_snap.PMMNet_CRef_get, doc=r"""CRef : TCRef""")
    AddModeNet = _swig_new_instance_method(_snap.PMMNet_AddModeNet)
    DelModeNet = _swig_new_instance_method(_snap.PMMNet_DelModeNet)
    AddCrossNet = _swig_new_instance_method(_snap.PMMNet_AddCrossNet)
    DelCrossNet = _swig_new_instance_method(_snap.PMMNet_DelCrossNet)
    Load = _swig_new_instance_method(_snap.PMMNet_Load)
    LoadShM = _swig_new_instance_method(_snap.PMMNet_LoadShM)
    ConvertToSparse = _swig_new_instance_method(_snap.PMMNet_ConvertToSparse)
    GetModeId = _swig_new_instance_method(_snap.PMMNet_GetModeId)
    GetModeName = _swig_new_instance_method(_snap.PMMNet_GetModeName)
    GetCrossId = _swig_new_instance_method(_snap.PMMNet_GetCrossId)
    GetCrossName = _swig_new_instance_method(_snap.PMMNet_GetCrossName)
    GetModeNetByName = _swig_new_instance_method(_snap.PMMNet_GetModeNetByName)
    GetModeNetById = _swig_new_instance_method(_snap.PMMNet_GetModeNetById)
    GetCrossNetByName = _swig_new_instance_method(_snap.PMMNet_GetCrossNetByName)
    GetCrossNetById = _swig_new_instance_method(_snap.PMMNet_GetCrossNetById)
    GetCrossNetI = _swig_new_instance_method(_snap.PMMNet_GetCrossNetI)
    BegCrossNetI = _swig_new_instance_method(_snap.PMMNet_BegCrossNetI)
    EndCrossNetI = _swig_new_instance_method(_snap.PMMNet_EndCrossNetI)
    GetModeNetI = _swig_new_instance_method(_snap.PMMNet_GetModeNetI)
    BegModeNetI = _swig_new_instance_method(_snap.PMMNet_BegModeNetI)
    EndModeNetI = _swig_new_instance_method(_snap.PMMNet_EndModeNetI)
    GetModeNets = _swig_new_instance_method(_snap.PMMNet_GetModeNets)
    GetCrossNets = _swig_new_instance_method(_snap.PMMNet_GetCrossNets)
    GetSubgraphByCrossNet = _swig_new_instance_method(_snap.PMMNet_GetSubgraphByCrossNet)
    GetSubgraphByModeNet = _swig_new_instance_method(_snap.PMMNet_GetSubgraphByModeNet)
    ToNetwork = _swig_new_instance_method(_snap.PMMNet_ToNetwork)
    ToNetwork2 = _swig_new_instance_method(_snap.PMMNet_ToNetwork2)

# Register PMMNet in _snap:
_snap.PMMNet_swigregister(PMMNet)
PMMNet_New = _snap.PMMNet_New


# redefine TNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNGraphEdgeI.GetId = GetId

PrintGraphStatTable_PNGraph = _snap.PrintGraphStatTable_PNGraph
class PNGraph(object):
    r"""Proxy of C++ TPt< TNGraph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PNGraph_New)
    __swig_destroy__ = _snap.delete_PNGraph
    Save = _swig_new_instance_method(_snap.PNGraph_Save)
    __deref__ = _swig_new_instance_method(_snap.PNGraph___deref__)
    __ref__ = _swig_new_instance_method(_snap.PNGraph___ref__)
    __call__ = _swig_new_instance_method(_snap.PNGraph___call__)
    Empty = _swig_new_instance_method(_snap.PNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.PNGraph_Clr)
    GetRefs = _swig_new_instance_method(_snap.PNGraph_GetRefs)
    Load = _swig_new_instance_method(_snap.PNGraph_Load)
    LoadShM = _swig_new_instance_method(_snap.PNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PNGraph_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PNGraph_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PNGraph_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.PNGraph_IsNode)
    BegNI = _swig_new_instance_method(_snap.PNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.PNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.PNGraph_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PNGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PNGraph_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.PNGraph_AddEdge2)
    DelEdge = _swig_new_instance_method(_snap.PNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PNGraph_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.PNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.PNGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PNGraph_GetNIdV)
    Reserve = _swig_new_instance_method(_snap.PNGraph_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.PNGraph_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.PNGraph_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.PNGraph_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.PNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.PNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.PNGraph_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PNGraph_GetSmallGraph)

# Register PNGraph in _snap:
_snap.PNGraph_swigregister(PNGraph)
PNGraph_New = _snap.PNGraph_New

PrintInfo_PNGraph = _snap.PrintInfo_PNGraph
GetNodeWcc_PNGraph = _snap.GetNodeWcc_PNGraph
IsConnected_PNGraph = _snap.IsConnected_PNGraph
IsWeaklyConn_PNGraph = _snap.IsWeaklyConn_PNGraph
GetWccSzCnt_PNGraph = _snap.GetWccSzCnt_PNGraph
GetWccs_PNGraph = _snap.GetWccs_PNGraph
GetSccSzCnt_PNGraph = _snap.GetSccSzCnt_PNGraph
GetSccs_PNGraph = _snap.GetSccs_PNGraph
GetMxWccSz_PNGraph = _snap.GetMxWccSz_PNGraph
GetMxSccSz_PNGraph = _snap.GetMxSccSz_PNGraph
GetMxWcc_PNGraph = _snap.GetMxWcc_PNGraph
GetMxScc_PNGraph = _snap.GetMxScc_PNGraph
GetMxBiCon_PNGraph = _snap.GetMxBiCon_PNGraph
GetNodeEcc_PNGraph = _snap.GetNodeEcc_PNGraph
GetPageRank_PNGraph = _snap.GetPageRank_PNGraph
GetPageRank_v1_PNGraph = _snap.GetPageRank_v1_PNGraph
GetHits_PNGraph = _snap.GetHits_PNGraph
GetBetweennessCentr_PNGraph = _snap.GetBetweennessCentr_PNGraph
GetClosenessCentr_PNGraph = _snap.GetClosenessCentr_PNGraph
GetFarnessCentr_PNGraph = _snap.GetFarnessCentr_PNGraph
CntInDegNodes_PNGraph = _snap.CntInDegNodes_PNGraph
CntOutDegNodes_PNGraph = _snap.CntOutDegNodes_PNGraph
CntDegNodes_PNGraph = _snap.CntDegNodes_PNGraph
CntNonZNodes_PNGraph = _snap.CntNonZNodes_PNGraph
CntEdgesToSet_PNGraph = _snap.CntEdgesToSet_PNGraph
GetMxDegNId_PNGraph = _snap.GetMxDegNId_PNGraph
GetMxInDegNId_PNGraph = _snap.GetMxInDegNId_PNGraph
GetMxOutDegNId_PNGraph = _snap.GetMxOutDegNId_PNGraph
GetInDegCnt_PNGraph = _snap.GetInDegCnt_PNGraph
GetOutDegCnt_PNGraph = _snap.GetOutDegCnt_PNGraph
GetDegCnt_PNGraph = _snap.GetDegCnt_PNGraph
GetDegSeqV_PNGraph = _snap.GetDegSeqV_PNGraph
GetNodeInDegV_PNGraph = _snap.GetNodeInDegV_PNGraph
GetNodeOutDegV_PNGraph = _snap.GetNodeOutDegV_PNGraph
CntUniqUndirEdges_PNGraph = _snap.CntUniqUndirEdges_PNGraph
CntUniqDirEdges_PNGraph = _snap.CntUniqDirEdges_PNGraph
CntUniqBiDirEdges_PNGraph = _snap.CntUniqBiDirEdges_PNGraph
CntSelfEdges_PNGraph = _snap.CntSelfEdges_PNGraph
GetUnDir_PNGraph = _snap.GetUnDir_PNGraph
MakeUnDir_PNGraph = _snap.MakeUnDir_PNGraph
AddSelfEdges_PNGraph = _snap.AddSelfEdges_PNGraph
DelSelfEdges_PNGraph = _snap.DelSelfEdges_PNGraph
DelNodes_PNGraph = _snap.DelNodes_PNGraph
DelZeroDegNodes_PNGraph = _snap.DelZeroDegNodes_PNGraph
DelDegKNodes_PNGraph = _snap.DelDegKNodes_PNGraph
IsTree_PNGraph = _snap.IsTree_PNGraph
GetTreeRootNId_PNGraph = _snap.GetTreeRootNId_PNGraph
GetTreeSig_PNGraph = _snap.GetTreeSig_PNGraph
GetBfsTree_PNGraph = _snap.GetBfsTree_PNGraph
GetSubTreeSz_PNGraph = _snap.GetSubTreeSz_PNGraph
GetNodesAtHop_PNGraph = _snap.GetNodesAtHop_PNGraph
GetNodesAtHops_PNGraph = _snap.GetNodesAtHops_PNGraph
GetShortPath_PNGraph = _snap.GetShortPath_PNGraph
GetBfsFullDiam_PNGraph = _snap.GetBfsFullDiam_PNGraph
GetBfsEffDiam_PNGraph = _snap.GetBfsEffDiam_PNGraph
GetBfsEffDiamAll_PNGraph = _snap.GetBfsEffDiamAll_PNGraph
DrawGViz_PNGraph = _snap.DrawGViz_PNGraph
GenGrid_PNGraph = _snap.GenGrid_PNGraph
GenStar_PNGraph = _snap.GenStar_PNGraph
GenCircle_PNGraph = _snap.GenCircle_PNGraph
GenFull_PNGraph = _snap.GenFull_PNGraph
GenTree_PNGraph = _snap.GenTree_PNGraph
GenBaraHierar_PNGraph = _snap.GenBaraHierar_PNGraph
GenRndGnm_PNGraph = _snap.GenRndGnm_PNGraph
LoadEdgeList_PNGraph = _snap.LoadEdgeList_PNGraph
LoadEdgeListStr_PNGraph = _snap.LoadEdgeListStr_PNGraph
LoadConnList_PNGraph = _snap.LoadConnList_PNGraph
LoadConnListStr_PNGraph = _snap.LoadConnListStr_PNGraph
LoadPajek_PNGraph = _snap.LoadPajek_PNGraph
SaveEdgeList_PNGraph = _snap.SaveEdgeList_PNGraph
SavePajek_PNGraph = _snap.SavePajek_PNGraph
SaveMatlabSparseMtx_PNGraph = _snap.SaveMatlabSparseMtx_PNGraph
SaveGViz_PNGraph = _snap.SaveGViz_PNGraph
GetKCore_PNGraph = _snap.GetKCore_PNGraph
GetKCoreEdges_PNGraph = _snap.GetKCoreEdges_PNGraph
GetKCoreNodes_PNGraph = _snap.GetKCoreNodes_PNGraph
ConvertGraph_PNGraph_PUNGraph = _snap.ConvertGraph_PNGraph_PUNGraph
ConvertGraph_PNGraph_PNGraph = _snap.ConvertGraph_PNGraph_PNGraph
ConvertGraph_PNGraph_PNEANet = _snap.ConvertGraph_PNGraph_PNEANet
ConvertSubGraph_PNGraph_PUNGraph = _snap.ConvertSubGraph_PNGraph_PUNGraph
ConvertSubGraph_PNGraph_PNGraph = _snap.ConvertSubGraph_PNGraph_PNGraph
ConvertSubGraph_PNGraph_PNEANet = _snap.ConvertSubGraph_PNGraph_PNEANet
ConvertESubGraph_PNGraph_PNEANet = _snap.ConvertESubGraph_PNGraph_PNEANet
GetSubGraph_PNGraph = _snap.GetSubGraph_PNGraph
GetSubGraphRenumber_PNGraph = _snap.GetSubGraphRenumber_PNGraph
GetRndSubGraph_PNGraph = _snap.GetRndSubGraph_PNGraph
GetRndESubGraph_PNGraph = _snap.GetRndESubGraph_PNGraph
GetClustCf_PNGraph = _snap.GetClustCf_PNGraph
GetClustCfAll_PNGraph = _snap.GetClustCfAll_PNGraph
GetNodeClustCf_PNGraph = _snap.GetNodeClustCf_PNGraph
GetTriads_PNGraph = _snap.GetTriads_PNGraph
GetTriadsAll_PNGraph = _snap.GetTriadsAll_PNGraph
GetTriadEdges_PNGraph = _snap.GetTriadEdges_PNGraph
GetNodeTriads_PNGraph = _snap.GetNodeTriads_PNGraph
GetNodeTriadsAll_PNGraph = _snap.GetNodeTriadsAll_PNGraph
GetTriadParticip_PNGraph = _snap.GetTriadParticip_PNGraph
GetTriangleCnt_PNGraph = _snap.GetTriangleCnt_PNGraph
GetCmnNbrs_PNGraph = _snap.GetCmnNbrs_PNGraph
GetLen2Paths_PNGraph = _snap.GetLen2Paths_PNGraph
GetModularity_PNGraph = _snap.GetModularity_PNGraph
GetEdgesInOut_PNGraph = _snap.GetEdgesInOut_PNGraph
GetAnf_PNGraph = _snap.GetAnf_PNGraph
GetAnfEffDiam_PNGraph = _snap.GetAnfEffDiam_PNGraph
TestAnf_PNGraph = _snap.TestAnf_PNGraph
PlotKCoreEdges_PNGraph = _snap.PlotKCoreEdges_PNGraph
PlotKCoreNodes_PNGraph = _snap.PlotKCoreNodes_PNGraph
PlotShortPathDistr_PNGraph = _snap.PlotShortPathDistr_PNGraph
PlotHops_PNGraph = _snap.PlotHops_PNGraph
PlotClustCf_PNGraph = _snap.PlotClustCf_PNGraph
PlotSccDistr_PNGraph = _snap.PlotSccDistr_PNGraph
PlotWccDistr_PNGraph = _snap.PlotWccDistr_PNGraph
PlotOutDegDistr_PNGraph = _snap.PlotOutDegDistr_PNGraph
PlotInDegDistr_PNGraph = _snap.PlotInDegDistr_PNGraph
PercentDegree_PNGraph = _snap.PercentDegree_PNGraph
NodesGTEDegree_PNGraph = _snap.NodesGTEDegree_PNGraph
MxDegree_PNGraph = _snap.MxDegree_PNGraph
PercentMxWcc_PNGraph = _snap.PercentMxWcc_PNGraph
PercentMxScc_PNGraph = _snap.PercentMxScc_PNGraph
ToGraph_PNGraph = _snap.ToGraph_PNGraph

# redefine TUNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUNGraphEdgeI.GetId = GetId

PrintGraphStatTable_PUNGraph = _snap.PrintGraphStatTable_PUNGraph
class PUNGraph(object):
    r"""Proxy of C++ TPt< TUNGraph > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PUNGraph_New)
    __swig_destroy__ = _snap.delete_PUNGraph
    Save = _swig_new_instance_method(_snap.PUNGraph_Save)
    __deref__ = _swig_new_instance_method(_snap.PUNGraph___deref__)
    __ref__ = _swig_new_instance_method(_snap.PUNGraph___ref__)
    __call__ = _swig_new_instance_method(_snap.PUNGraph___call__)
    Empty = _swig_new_instance_method(_snap.PUNGraph_Empty)
    Clr = _swig_new_instance_method(_snap.PUNGraph_Clr)
    GetRefs = _swig_new_instance_method(_snap.PUNGraph_GetRefs)
    Load = _swig_new_instance_method(_snap.PUNGraph_Load)
    LoadShM = _swig_new_instance_method(_snap.PUNGraph_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PUNGraph_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PUNGraph_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PUNGraph_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PUNGraph_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PUNGraph_DelNode)
    IsNode = _swig_new_instance_method(_snap.PUNGraph_IsNode)
    BegNI = _swig_new_instance_method(_snap.PUNGraph_BegNI)
    EndNI = _swig_new_instance_method(_snap.PUNGraph_EndNI)
    GetNI = _swig_new_instance_method(_snap.PUNGraph_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PUNGraph_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PUNGraph_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PUNGraph_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PUNGraph_AddEdgeUnchecked)
    AddEdge2 = _swig_new_instance_method(_snap.PUNGraph_AddEdge2)
    DelEdge = _swig_new_instance_method(_snap.PUNGraph_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PUNGraph_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PUNGraph_BegEI)
    EndEI = _swig_new_instance_method(_snap.PUNGraph_EndEI)
    GetEI = _swig_new_instance_method(_snap.PUNGraph_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PUNGraph_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PUNGraph_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PUNGraph_GetNIdV)
    SortNodeAdjV = _swig_new_instance_method(_snap.PUNGraph_SortNodeAdjV)
    Reserve = _swig_new_instance_method(_snap.PUNGraph_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.PUNGraph_ReserveNIdDeg)
    Defrag = _swig_new_instance_method(_snap.PUNGraph_Defrag)
    IsOk = _swig_new_instance_method(_snap.PUNGraph_IsOk)
    Dump = _swig_new_instance_method(_snap.PUNGraph_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PUNGraph_GetSmallGraph)

# Register PUNGraph in _snap:
_snap.PUNGraph_swigregister(PUNGraph)
PUNGraph_New = _snap.PUNGraph_New

PrintInfo_PUNGraph = _snap.PrintInfo_PUNGraph
GetNodeWcc_PUNGraph = _snap.GetNodeWcc_PUNGraph
IsConnected_PUNGraph = _snap.IsConnected_PUNGraph
IsWeaklyConn_PUNGraph = _snap.IsWeaklyConn_PUNGraph
GetWccSzCnt_PUNGraph = _snap.GetWccSzCnt_PUNGraph
GetWccs_PUNGraph = _snap.GetWccs_PUNGraph
GetSccSzCnt_PUNGraph = _snap.GetSccSzCnt_PUNGraph
GetSccs_PUNGraph = _snap.GetSccs_PUNGraph
GetMxWccSz_PUNGraph = _snap.GetMxWccSz_PUNGraph
GetMxSccSz_PUNGraph = _snap.GetMxSccSz_PUNGraph
GetMxWcc_PUNGraph = _snap.GetMxWcc_PUNGraph
GetMxScc_PUNGraph = _snap.GetMxScc_PUNGraph
GetMxBiCon_PUNGraph = _snap.GetMxBiCon_PUNGraph
GetNodeEcc_PUNGraph = _snap.GetNodeEcc_PUNGraph
GetPageRank_PUNGraph = _snap.GetPageRank_PUNGraph
GetPageRank_v1_PUNGraph = _snap.GetPageRank_v1_PUNGraph
GetHits_PUNGraph = _snap.GetHits_PUNGraph
GetBetweennessCentr_PUNGraph = _snap.GetBetweennessCentr_PUNGraph
GetClosenessCentr_PUNGraph = _snap.GetClosenessCentr_PUNGraph
GetFarnessCentr_PUNGraph = _snap.GetFarnessCentr_PUNGraph
CntInDegNodes_PUNGraph = _snap.CntInDegNodes_PUNGraph
CntOutDegNodes_PUNGraph = _snap.CntOutDegNodes_PUNGraph
CntDegNodes_PUNGraph = _snap.CntDegNodes_PUNGraph
CntNonZNodes_PUNGraph = _snap.CntNonZNodes_PUNGraph
CntEdgesToSet_PUNGraph = _snap.CntEdgesToSet_PUNGraph
GetMxDegNId_PUNGraph = _snap.GetMxDegNId_PUNGraph
GetMxInDegNId_PUNGraph = _snap.GetMxInDegNId_PUNGraph
GetMxOutDegNId_PUNGraph = _snap.GetMxOutDegNId_PUNGraph
GetInDegCnt_PUNGraph = _snap.GetInDegCnt_PUNGraph
GetOutDegCnt_PUNGraph = _snap.GetOutDegCnt_PUNGraph
GetDegCnt_PUNGraph = _snap.GetDegCnt_PUNGraph
GetDegSeqV_PUNGraph = _snap.GetDegSeqV_PUNGraph
GetNodeInDegV_PUNGraph = _snap.GetNodeInDegV_PUNGraph
GetNodeOutDegV_PUNGraph = _snap.GetNodeOutDegV_PUNGraph
CntUniqUndirEdges_PUNGraph = _snap.CntUniqUndirEdges_PUNGraph
CntUniqDirEdges_PUNGraph = _snap.CntUniqDirEdges_PUNGraph
CntUniqBiDirEdges_PUNGraph = _snap.CntUniqBiDirEdges_PUNGraph
CntSelfEdges_PUNGraph = _snap.CntSelfEdges_PUNGraph
GetUnDir_PUNGraph = _snap.GetUnDir_PUNGraph
MakeUnDir_PUNGraph = _snap.MakeUnDir_PUNGraph
AddSelfEdges_PUNGraph = _snap.AddSelfEdges_PUNGraph
DelSelfEdges_PUNGraph = _snap.DelSelfEdges_PUNGraph
DelNodes_PUNGraph = _snap.DelNodes_PUNGraph
DelZeroDegNodes_PUNGraph = _snap.DelZeroDegNodes_PUNGraph
DelDegKNodes_PUNGraph = _snap.DelDegKNodes_PUNGraph
IsTree_PUNGraph = _snap.IsTree_PUNGraph
GetTreeRootNId_PUNGraph = _snap.GetTreeRootNId_PUNGraph
GetTreeSig_PUNGraph = _snap.GetTreeSig_PUNGraph
GetBfsTree_PUNGraph = _snap.GetBfsTree_PUNGraph
GetSubTreeSz_PUNGraph = _snap.GetSubTreeSz_PUNGraph
GetNodesAtHop_PUNGraph = _snap.GetNodesAtHop_PUNGraph
GetNodesAtHops_PUNGraph = _snap.GetNodesAtHops_PUNGraph
GetShortPath_PUNGraph = _snap.GetShortPath_PUNGraph
GetBfsFullDiam_PUNGraph = _snap.GetBfsFullDiam_PUNGraph
GetBfsEffDiam_PUNGraph = _snap.GetBfsEffDiam_PUNGraph
GetBfsEffDiamAll_PUNGraph = _snap.GetBfsEffDiamAll_PUNGraph
DrawGViz_PUNGraph = _snap.DrawGViz_PUNGraph
GenGrid_PUNGraph = _snap.GenGrid_PUNGraph
GenStar_PUNGraph = _snap.GenStar_PUNGraph
GenCircle_PUNGraph = _snap.GenCircle_PUNGraph
GenFull_PUNGraph = _snap.GenFull_PUNGraph
GenTree_PUNGraph = _snap.GenTree_PUNGraph
GenBaraHierar_PUNGraph = _snap.GenBaraHierar_PUNGraph
GenRndGnm_PUNGraph = _snap.GenRndGnm_PUNGraph
LoadEdgeList_PUNGraph = _snap.LoadEdgeList_PUNGraph
LoadEdgeListStr_PUNGraph = _snap.LoadEdgeListStr_PUNGraph
LoadConnList_PUNGraph = _snap.LoadConnList_PUNGraph
LoadConnListStr_PUNGraph = _snap.LoadConnListStr_PUNGraph
LoadPajek_PUNGraph = _snap.LoadPajek_PUNGraph
SaveEdgeList_PUNGraph = _snap.SaveEdgeList_PUNGraph
SavePajek_PUNGraph = _snap.SavePajek_PUNGraph
SaveMatlabSparseMtx_PUNGraph = _snap.SaveMatlabSparseMtx_PUNGraph
SaveGViz_PUNGraph = _snap.SaveGViz_PUNGraph
GetKCore_PUNGraph = _snap.GetKCore_PUNGraph
GetKCoreEdges_PUNGraph = _snap.GetKCoreEdges_PUNGraph
GetKCoreNodes_PUNGraph = _snap.GetKCoreNodes_PUNGraph
ConvertGraph_PUNGraph_PUNGraph = _snap.ConvertGraph_PUNGraph_PUNGraph
ConvertGraph_PUNGraph_PNGraph = _snap.ConvertGraph_PUNGraph_PNGraph
ConvertGraph_PUNGraph_PNEANet = _snap.ConvertGraph_PUNGraph_PNEANet
ConvertSubGraph_PUNGraph_PUNGraph = _snap.ConvertSubGraph_PUNGraph_PUNGraph
ConvertSubGraph_PUNGraph_PNGraph = _snap.ConvertSubGraph_PUNGraph_PNGraph
ConvertSubGraph_PUNGraph_PNEANet = _snap.ConvertSubGraph_PUNGraph_PNEANet
ConvertESubGraph_PUNGraph_PNEANet = _snap.ConvertESubGraph_PUNGraph_PNEANet
GetSubGraph_PUNGraph = _snap.GetSubGraph_PUNGraph
GetSubGraphRenumber_PUNGraph = _snap.GetSubGraphRenumber_PUNGraph
GetRndSubGraph_PUNGraph = _snap.GetRndSubGraph_PUNGraph
GetRndESubGraph_PUNGraph = _snap.GetRndESubGraph_PUNGraph
GetClustCf_PUNGraph = _snap.GetClustCf_PUNGraph
GetClustCfAll_PUNGraph = _snap.GetClustCfAll_PUNGraph
GetNodeClustCf_PUNGraph = _snap.GetNodeClustCf_PUNGraph
GetTriads_PUNGraph = _snap.GetTriads_PUNGraph
GetTriadsAll_PUNGraph = _snap.GetTriadsAll_PUNGraph
GetTriadEdges_PUNGraph = _snap.GetTriadEdges_PUNGraph
GetNodeTriads_PUNGraph = _snap.GetNodeTriads_PUNGraph
GetNodeTriadsAll_PUNGraph = _snap.GetNodeTriadsAll_PUNGraph
GetTriadParticip_PUNGraph = _snap.GetTriadParticip_PUNGraph
GetTriangleCnt_PUNGraph = _snap.GetTriangleCnt_PUNGraph
GetCmnNbrs_PUNGraph = _snap.GetCmnNbrs_PUNGraph
GetLen2Paths_PUNGraph = _snap.GetLen2Paths_PUNGraph
GetModularity_PUNGraph = _snap.GetModularity_PUNGraph
GetEdgesInOut_PUNGraph = _snap.GetEdgesInOut_PUNGraph
GetAnf_PUNGraph = _snap.GetAnf_PUNGraph
GetAnfEffDiam_PUNGraph = _snap.GetAnfEffDiam_PUNGraph
TestAnf_PUNGraph = _snap.TestAnf_PUNGraph
PlotKCoreEdges_PUNGraph = _snap.PlotKCoreEdges_PUNGraph
PlotKCoreNodes_PUNGraph = _snap.PlotKCoreNodes_PUNGraph
PlotShortPathDistr_PUNGraph = _snap.PlotShortPathDistr_PUNGraph
PlotHops_PUNGraph = _snap.PlotHops_PUNGraph
PlotClustCf_PUNGraph = _snap.PlotClustCf_PUNGraph
PlotSccDistr_PUNGraph = _snap.PlotSccDistr_PUNGraph
PlotWccDistr_PUNGraph = _snap.PlotWccDistr_PUNGraph
PlotOutDegDistr_PUNGraph = _snap.PlotOutDegDistr_PUNGraph
PlotInDegDistr_PUNGraph = _snap.PlotInDegDistr_PUNGraph
PercentDegree_PUNGraph = _snap.PercentDegree_PUNGraph
NodesGTEDegree_PUNGraph = _snap.NodesGTEDegree_PUNGraph
MxDegree_PUNGraph = _snap.MxDegree_PUNGraph
PercentMxWcc_PUNGraph = _snap.PercentMxWcc_PUNGraph
PercentMxScc_PUNGraph = _snap.PercentMxScc_PUNGraph
ToGraph_PUNGraph = _snap.ToGraph_PUNGraph

# redefine TDirNetEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TDirNetEdgeI.GetId = GetId

PrintGraphStatTable_PDirNet = _snap.PrintGraphStatTable_PDirNet
class PDirNet(object):
    r"""Proxy of C++ TPt< TDirNet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PDirNet_New)
    __swig_destroy__ = _snap.delete_PDirNet
    Save = _swig_new_instance_method(_snap.PDirNet_Save)
    __deref__ = _swig_new_instance_method(_snap.PDirNet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PDirNet___ref__)
    __call__ = _swig_new_instance_method(_snap.PDirNet___call__)
    Empty = _swig_new_instance_method(_snap.PDirNet_Empty)
    Clr = _swig_new_instance_method(_snap.PDirNet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PDirNet_GetRefs)
    Save_V1 = _swig_new_instance_method(_snap.PDirNet_Save_V1)
    Load = _swig_new_instance_method(_snap.PDirNet_Load)
    Load_V1 = _swig_new_instance_method(_snap.PDirNet_Load_V1)
    LoadShM = _swig_new_instance_method(_snap.PDirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PDirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PDirNet_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PDirNet_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PDirNet_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PDirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.PDirNet_IsNode)
    BegNI = _swig_new_instance_method(_snap.PDirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.PDirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.PDirNet_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PDirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PDirNet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PDirNet_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PDirNet_AddEdgeUnchecked)
    DelEdge = _swig_new_instance_method(_snap.PDirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PDirNet_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PDirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.PDirNet_EndEI)
    GetEI = _swig_new_instance_method(_snap.PDirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PDirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PDirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PDirNet_GetNIdV)
    Reserve = _swig_new_instance_method(_snap.PDirNet_Reserve)
    ReserveNIdInDeg = _swig_new_instance_method(_snap.PDirNet_ReserveNIdInDeg)
    ReserveNIdOutDeg = _swig_new_instance_method(_snap.PDirNet_ReserveNIdOutDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.PDirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.PDirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.PDirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.PDirNet_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PDirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.PDirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.PDirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.PDirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.PDirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.PDirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.PDirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.PDirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.PDirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.PDirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.PDirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.PDirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.PDirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.PDirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.PDirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.PDirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.PDirNet_GetSAttrNameE)

# Register PDirNet in _snap:
_snap.PDirNet_swigregister(PDirNet)
PDirNet_New = _snap.PDirNet_New

PrintInfo_PDirNet = _snap.PrintInfo_PDirNet
GetNodeWcc_PDirNet = _snap.GetNodeWcc_PDirNet
IsConnected_PDirNet = _snap.IsConnected_PDirNet
IsWeaklyConn_PDirNet = _snap.IsWeaklyConn_PDirNet
GetWccSzCnt_PDirNet = _snap.GetWccSzCnt_PDirNet
GetWccs_PDirNet = _snap.GetWccs_PDirNet
GetSccSzCnt_PDirNet = _snap.GetSccSzCnt_PDirNet
GetSccs_PDirNet = _snap.GetSccs_PDirNet
GetMxWccSz_PDirNet = _snap.GetMxWccSz_PDirNet
GetMxSccSz_PDirNet = _snap.GetMxSccSz_PDirNet
GetMxWcc_PDirNet = _snap.GetMxWcc_PDirNet
GetMxScc_PDirNet = _snap.GetMxScc_PDirNet
GetMxBiCon_PDirNet = _snap.GetMxBiCon_PDirNet
GetNodeEcc_PDirNet = _snap.GetNodeEcc_PDirNet
GetPageRank_PDirNet = _snap.GetPageRank_PDirNet
GetPageRank_v1_PDirNet = _snap.GetPageRank_v1_PDirNet
GetHits_PDirNet = _snap.GetHits_PDirNet
CntInDegNodes_PDirNet = _snap.CntInDegNodes_PDirNet
CntOutDegNodes_PDirNet = _snap.CntOutDegNodes_PDirNet
CntDegNodes_PDirNet = _snap.CntDegNodes_PDirNet
CntNonZNodes_PDirNet = _snap.CntNonZNodes_PDirNet
CntEdgesToSet_PDirNet = _snap.CntEdgesToSet_PDirNet
GetMxDegNId_PDirNet = _snap.GetMxDegNId_PDirNet
GetMxInDegNId_PDirNet = _snap.GetMxInDegNId_PDirNet
GetMxOutDegNId_PDirNet = _snap.GetMxOutDegNId_PDirNet
GetInDegCnt_PDirNet = _snap.GetInDegCnt_PDirNet
GetOutDegCnt_PDirNet = _snap.GetOutDegCnt_PDirNet
GetDegCnt_PDirNet = _snap.GetDegCnt_PDirNet
GetDegSeqV_PDirNet = _snap.GetDegSeqV_PDirNet
GetNodeInDegV_PDirNet = _snap.GetNodeInDegV_PDirNet
GetNodeOutDegV_PDirNet = _snap.GetNodeOutDegV_PDirNet
CntUniqUndirEdges_PDirNet = _snap.CntUniqUndirEdges_PDirNet
CntUniqDirEdges_PDirNet = _snap.CntUniqDirEdges_PDirNet
CntUniqBiDirEdges_PDirNet = _snap.CntUniqBiDirEdges_PDirNet
CntSelfEdges_PDirNet = _snap.CntSelfEdges_PDirNet
GetUnDir_PDirNet = _snap.GetUnDir_PDirNet
MakeUnDir_PDirNet = _snap.MakeUnDir_PDirNet
AddSelfEdges_PDirNet = _snap.AddSelfEdges_PDirNet
DelSelfEdges_PDirNet = _snap.DelSelfEdges_PDirNet
DelNodes_PDirNet = _snap.DelNodes_PDirNet
DelZeroDegNodes_PDirNet = _snap.DelZeroDegNodes_PDirNet
DelDegKNodes_PDirNet = _snap.DelDegKNodes_PDirNet
IsTree_PDirNet = _snap.IsTree_PDirNet
GetTreeRootNId_PDirNet = _snap.GetTreeRootNId_PDirNet
GetTreeSig_PDirNet = _snap.GetTreeSig_PDirNet
GetBfsTree_PDirNet = _snap.GetBfsTree_PDirNet
GetSubTreeSz_PDirNet = _snap.GetSubTreeSz_PDirNet
GetNodesAtHop_PDirNet = _snap.GetNodesAtHop_PDirNet
GetNodesAtHops_PDirNet = _snap.GetNodesAtHops_PDirNet
GetShortPath_PDirNet = _snap.GetShortPath_PDirNet
GetBfsFullDiam_PDirNet = _snap.GetBfsFullDiam_PDirNet
GetBfsEffDiam_PDirNet = _snap.GetBfsEffDiam_PDirNet
GetBfsEffDiamAll_PDirNet = _snap.GetBfsEffDiamAll_PDirNet
DrawGViz_PDirNet = _snap.DrawGViz_PDirNet
GenGrid_PDirNet = _snap.GenGrid_PDirNet
GenStar_PDirNet = _snap.GenStar_PDirNet
GenCircle_PDirNet = _snap.GenCircle_PDirNet
GenFull_PDirNet = _snap.GenFull_PDirNet
GenTree_PDirNet = _snap.GenTree_PDirNet
GenBaraHierar_PDirNet = _snap.GenBaraHierar_PDirNet
GenRndGnm_PDirNet = _snap.GenRndGnm_PDirNet
LoadEdgeList_PDirNet = _snap.LoadEdgeList_PDirNet
LoadEdgeListStr_PDirNet = _snap.LoadEdgeListStr_PDirNet
LoadConnList_PDirNet = _snap.LoadConnList_PDirNet
LoadConnListStr_PDirNet = _snap.LoadConnListStr_PDirNet
LoadPajek_PDirNet = _snap.LoadPajek_PDirNet
SaveEdgeList_PDirNet = _snap.SaveEdgeList_PDirNet
SavePajek_PDirNet = _snap.SavePajek_PDirNet
SaveMatlabSparseMtx_PDirNet = _snap.SaveMatlabSparseMtx_PDirNet
SaveGViz_PDirNet = _snap.SaveGViz_PDirNet
GetKCore_PDirNet = _snap.GetKCore_PDirNet
GetKCoreEdges_PDirNet = _snap.GetKCoreEdges_PDirNet
GetKCoreNodes_PDirNet = _snap.GetKCoreNodes_PDirNet
ConvertGraph_PDirNet_PUNGraph = _snap.ConvertGraph_PDirNet_PUNGraph
ConvertGraph_PDirNet_PDirNet = _snap.ConvertGraph_PDirNet_PDirNet
ConvertGraph_PDirNet_PNEANet = _snap.ConvertGraph_PDirNet_PNEANet
ConvertSubGraph_PDirNet_PUNGraph = _snap.ConvertSubGraph_PDirNet_PUNGraph
ConvertSubGraph_PDirNet_PDirNet = _snap.ConvertSubGraph_PDirNet_PDirNet
ConvertSubGraph_PDirNet_PNEANet = _snap.ConvertSubGraph_PDirNet_PNEANet
ConvertESubGraph_PDirNet_PNEANet = _snap.ConvertESubGraph_PDirNet_PNEANet
GetSubGraph_PDirNet = _snap.GetSubGraph_PDirNet
GetRndSubGraph_PDirNet = _snap.GetRndSubGraph_PDirNet
GetRndESubGraph_PDirNet = _snap.GetRndESubGraph_PDirNet
GetClustCf_PDirNet = _snap.GetClustCf_PDirNet
GetClustCfAll_PDirNet = _snap.GetClustCfAll_PDirNet
GetNodeClustCf_PDirNet = _snap.GetNodeClustCf_PDirNet
GetTriads_PDirNet = _snap.GetTriads_PDirNet
GetTriadsAll_PDirNet = _snap.GetTriadsAll_PDirNet
GetTriadEdges_PDirNet = _snap.GetTriadEdges_PDirNet
GetNodeTriads_PDirNet = _snap.GetNodeTriads_PDirNet
GetNodeTriadsAll_PDirNet = _snap.GetNodeTriadsAll_PDirNet
GetTriadParticip_PDirNet = _snap.GetTriadParticip_PDirNet
GetTriangleCnt_PDirNet = _snap.GetTriangleCnt_PDirNet
GetCmnNbrs_PDirNet = _snap.GetCmnNbrs_PDirNet
GetLen2Paths_PDirNet = _snap.GetLen2Paths_PDirNet
GetModularity_PDirNet = _snap.GetModularity_PDirNet
GetEdgesInOut_PDirNet = _snap.GetEdgesInOut_PDirNet
GetAnf_PDirNet = _snap.GetAnf_PDirNet
GetAnfEffDiam_PDirNet = _snap.GetAnfEffDiam_PDirNet
TestAnf_PDirNet = _snap.TestAnf_PDirNet
PlotKCoreEdges_PDirNet = _snap.PlotKCoreEdges_PDirNet
PlotKCoreNodes_PDirNet = _snap.PlotKCoreNodes_PDirNet
PlotShortPathDistr_PDirNet = _snap.PlotShortPathDistr_PDirNet
PlotHops_PDirNet = _snap.PlotHops_PDirNet
PlotClustCf_PDirNet = _snap.PlotClustCf_PDirNet
PlotSccDistr_PDirNet = _snap.PlotSccDistr_PDirNet
PlotWccDistr_PDirNet = _snap.PlotWccDistr_PDirNet
PlotOutDegDistr_PDirNet = _snap.PlotOutDegDistr_PDirNet
PlotInDegDistr_PDirNet = _snap.PlotInDegDistr_PDirNet
PercentDegree_PDirNet = _snap.PercentDegree_PDirNet
NodesGTEDegree_PDirNet = _snap.NodesGTEDegree_PDirNet
MxDegree_PDirNet = _snap.MxDegree_PDirNet
PercentMxWcc_PDirNet = _snap.PercentMxWcc_PDirNet
PercentMxScc_PDirNet = _snap.PercentMxScc_PDirNet
ToGraph_PDirNet = _snap.ToGraph_PDirNet

# redefine TUndirNetEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUndirNetEdgeI.GetId = GetId

PrintGraphStatTable_PUndirNet = _snap.PrintGraphStatTable_PUndirNet
class PUndirNet(object):
    r"""Proxy of C++ TPt< TUndirNet > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PUndirNet_New)
    __swig_destroy__ = _snap.delete_PUndirNet
    Save = _swig_new_instance_method(_snap.PUndirNet_Save)
    __deref__ = _swig_new_instance_method(_snap.PUndirNet___deref__)
    __ref__ = _swig_new_instance_method(_snap.PUndirNet___ref__)
    __call__ = _swig_new_instance_method(_snap.PUndirNet___call__)
    Empty = _swig_new_instance_method(_snap.PUndirNet_Empty)
    Clr = _swig_new_instance_method(_snap.PUndirNet_Clr)
    GetRefs = _swig_new_instance_method(_snap.PUndirNet_GetRefs)
    Save_V1 = _swig_new_instance_method(_snap.PUndirNet_Save_V1)
    Load = _swig_new_instance_method(_snap.PUndirNet_Load)
    Load_V1 = _swig_new_instance_method(_snap.PUndirNet_Load_V1)
    LoadShM = _swig_new_instance_method(_snap.PUndirNet_LoadShM)
    HasFlag = _swig_new_instance_method(_snap.PUndirNet_HasFlag)
    GetNodes = _swig_new_instance_method(_snap.PUndirNet_GetNodes)
    AddNode = _swig_new_instance_method(_snap.PUndirNet_AddNode)
    AddNodeUnchecked = _swig_new_instance_method(_snap.PUndirNet_AddNodeUnchecked)
    DelNode = _swig_new_instance_method(_snap.PUndirNet_DelNode)
    IsNode = _swig_new_instance_method(_snap.PUndirNet_IsNode)
    BegNI = _swig_new_instance_method(_snap.PUndirNet_BegNI)
    EndNI = _swig_new_instance_method(_snap.PUndirNet_EndNI)
    GetNI = _swig_new_instance_method(_snap.PUndirNet_GetNI)
    GetMxNId = _swig_new_instance_method(_snap.PUndirNet_GetMxNId)
    GetEdges = _swig_new_instance_method(_snap.PUndirNet_GetEdges)
    AddEdge = _swig_new_instance_method(_snap.PUndirNet_AddEdge)
    AddEdgeUnchecked = _swig_new_instance_method(_snap.PUndirNet_AddEdgeUnchecked)
    DelEdge = _swig_new_instance_method(_snap.PUndirNet_DelEdge)
    IsEdge = _swig_new_instance_method(_snap.PUndirNet_IsEdge)
    BegEI = _swig_new_instance_method(_snap.PUndirNet_BegEI)
    EndEI = _swig_new_instance_method(_snap.PUndirNet_EndEI)
    GetEI = _swig_new_instance_method(_snap.PUndirNet_GetEI)
    GetRndNId = _swig_new_instance_method(_snap.PUndirNet_GetRndNId)
    GetRndNI = _swig_new_instance_method(_snap.PUndirNet_GetRndNI)
    GetNIdV = _swig_new_instance_method(_snap.PUndirNet_GetNIdV)
    Reserve = _swig_new_instance_method(_snap.PUndirNet_Reserve)
    ReserveNIdDeg = _swig_new_instance_method(_snap.PUndirNet_ReserveNIdDeg)
    SortNodeAdjV = _swig_new_instance_method(_snap.PUndirNet_SortNodeAdjV)
    Defrag = _swig_new_instance_method(_snap.PUndirNet_Defrag)
    IsOk = _swig_new_instance_method(_snap.PUndirNet_IsOk)
    Dump = _swig_new_instance_method(_snap.PUndirNet_Dump)
    GetSmallGraph = _swig_new_instance_method(_snap.PUndirNet_GetSmallGraph)
    AddSAttrDatN = _swig_new_instance_method(_snap.PUndirNet_AddSAttrDatN)
    GetSAttrDatN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrDatN)
    DelSAttrDatN = _swig_new_instance_method(_snap.PUndirNet_DelSAttrDatN)
    GetSAttrVN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrVN)
    GetIdVSAttrN = _swig_new_instance_method(_snap.PUndirNet_GetIdVSAttrN)
    AddSAttrN = _swig_new_instance_method(_snap.PUndirNet_AddSAttrN)
    GetSAttrIdN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrIdN)
    GetSAttrNameN = _swig_new_instance_method(_snap.PUndirNet_GetSAttrNameN)
    AddSAttrDatE = _swig_new_instance_method(_snap.PUndirNet_AddSAttrDatE)
    GetSAttrDatE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrDatE)
    DelSAttrDatE = _swig_new_instance_method(_snap.PUndirNet_DelSAttrDatE)
    GetSAttrVE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrVE)
    GetIdVSAttrE = _swig_new_instance_method(_snap.PUndirNet_GetIdVSAttrE)
    AddSAttrE = _swig_new_instance_method(_snap.PUndirNet_AddSAttrE)
    GetSAttrIdE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrIdE)
    GetSAttrNameE = _swig_new_instance_method(_snap.PUndirNet_GetSAttrNameE)

# Register PUndirNet in _snap:
_snap.PUndirNet_swigregister(PUndirNet)
PUndirNet_New = _snap.PUndirNet_New

PrintInfo_PUndirNet = _snap.PrintInfo_PUndirNet
GetNodeWcc_PUndirNet = _snap.GetNodeWcc_PUndirNet
IsConnected_PUndirNet = _snap.IsConnected_PUndirNet
IsWeaklyConn_PUndirNet = _snap.IsWeaklyConn_PUndirNet
GetWccSzCnt_PUndirNet = _snap.GetWccSzCnt_PUndirNet
GetWccs_PUndirNet = _snap.GetWccs_PUndirNet
GetSccSzCnt_PUndirNet = _snap.GetSccSzCnt_PUndirNet
GetSccs_PUndirNet = _snap.GetSccs_PUndirNet
GetMxWccSz_PUndirNet = _snap.GetMxWccSz_PUndirNet
GetMxSccSz_PUndirNet = _snap.GetMxSccSz_PUndirNet
GetMxWcc_PUndirNet = _snap.GetMxWcc_PUndirNet
GetMxScc_PUndirNet = _snap.GetMxScc_PUndirNet
GetMxBiCon_PUndirNet = _snap.GetMxBiCon_PUndirNet
GetNodeEcc_PUndirNet = _snap.GetNodeEcc_PUndirNet
GetPageRank_PUndirNet = _snap.GetPageRank_PUndirNet
GetPageRank_v1_PUndirNet = _snap.GetPageRank_v1_PUndirNet
GetHits_PUndirNet = _snap.GetHits_PUndirNet
CntInDegNodes_PUndirNet = _snap.CntInDegNodes_PUndirNet
CntOutDegNodes_PUndirNet = _snap.CntOutDegNodes_PUndirNet
CntDegNodes_PUndirNet = _snap.CntDegNodes_PUndirNet
CntNonZNodes_PUndirNet = _snap.CntNonZNodes_PUndirNet
CntEdgesToSet_PUndirNet = _snap.CntEdgesToSet_PUndirNet
GetMxDegNId_PUndirNet = _snap.GetMxDegNId_PUndirNet
GetMxInDegNId_PUndirNet = _snap.GetMxInDegNId_PUndirNet
GetMxOutDegNId_PUndirNet = _snap.GetMxOutDegNId_PUndirNet
GetInDegCnt_PUndirNet = _snap.GetInDegCnt_PUndirNet
GetOutDegCnt_PUndirNet = _snap.GetOutDegCnt_PUndirNet
GetDegCnt_PUndirNet = _snap.GetDegCnt_PUndirNet
GetDegSeqV_PUndirNet = _snap.GetDegSeqV_PUndirNet
GetNodeInDegV_PUndirNet = _snap.GetNodeInDegV_PUndirNet
GetNodeOutDegV_PUndirNet = _snap.GetNodeOutDegV_PUndirNet
CntUniqUndirEdges_PUndirNet = _snap.CntUniqUndirEdges_PUndirNet
CntUniqDirEdges_PUndirNet = _snap.CntUniqDirEdges_PUndirNet
CntUniqBiDirEdges_PUndirNet = _snap.CntUniqBiDirEdges_PUndirNet
CntSelfEdges_PUndirNet = _snap.CntSelfEdges_PUndirNet
GetUnDir_PUndirNet = _snap.GetUnDir_PUndirNet
MakeUnDir_PUndirNet = _snap.MakeUnDir_PUndirNet
AddSelfEdges_PUndirNet = _snap.AddSelfEdges_PUndirNet
DelSelfEdges_PUndirNet = _snap.DelSelfEdges_PUndirNet
DelNodes_PUndirNet = _snap.DelNodes_PUndirNet
DelZeroDegNodes_PUndirNet = _snap.DelZeroDegNodes_PUndirNet
DelDegKNodes_PUndirNet = _snap.DelDegKNodes_PUndirNet
IsTree_PUndirNet = _snap.IsTree_PUndirNet
GetTreeRootNId_PUndirNet = _snap.GetTreeRootNId_PUndirNet
GetTreeSig_PUndirNet = _snap.GetTreeSig_PUndirNet
GetBfsTree_PUndirNet = _snap.GetBfsTree_PUndirNet
GetSubTreeSz_PUndirNet = _snap.GetSubTreeSz_PUndirNet
GetNodesAtHop_PUndirNet = _snap.GetNodesAtHop_PUndirNet
GetNodesAtHops_PUndirNet = _snap.GetNodesAtHops_PUndirNet
GetShortPath_PUndirNet = _snap.GetShortPath_PUndirNet
GetBfsFullDiam_PUndirNet = _snap.GetBfsFullDiam_PUndirNet
GetBfsEffDiam_PUndirNet = _snap.GetBfsEffDiam_PUndirNet
GetBfsEffDiamAll_PUndirNet = _snap.GetBfsEffDiamAll_PUndirNet
DrawGViz_PUndirNet = _snap.DrawGViz_PUndirNet
GenGrid_PUndirNet = _snap.GenGrid_PUndirNet
GenStar_PUndirNet = _snap.GenStar_PUndirNet
GenCircle_PUndirNet = _snap.GenCircle_PUndirNet
GenFull_PUndirNet = _snap.GenFull_PUndirNet
GenTree_PUndirNet = _snap.GenTree_PUndirNet
GenBaraHierar_PUndirNet = _snap.GenBaraHierar_PUndirNet
GenRndGnm_PUndirNet = _snap.GenRndGnm_PUndirNet
LoadEdgeList_PUndirNet = _snap.LoadEdgeList_PUndirNet
LoadEdgeListStr_PUndirNet = _snap.LoadEdgeListStr_PUndirNet
LoadConnList_PUndirNet = _snap.LoadConnList_PUndirNet
LoadConnListStr_PUndirNet = _snap.LoadConnListStr_PUndirNet
LoadPajek_PUndirNet = _snap.LoadPajek_PUndirNet
SaveEdgeList_PUndirNet = _snap.SaveEdgeList_PUndirNet
SavePajek_PUndirNet = _snap.SavePajek_PUndirNet
SaveMatlabSparseMtx_PUndirNet = _snap.SaveMatlabSparseMtx_PUndirNet
SaveGViz_PUndirNet = _snap.SaveGViz_PUndirNet
GetKCore_PUndirNet = _snap.GetKCore_PUndirNet
GetKCoreEdges_PUndirNet = _snap.GetKCoreEdges_PUndirNet
GetKCoreNodes_PUndirNet = _snap.GetKCoreNodes_PUndirNet
ConvertGraph_PUndirNet_PUndirNet = _snap.ConvertGraph_PUndirNet_PUndirNet
ConvertGraph_PUndirNet_PNGraph = _snap.ConvertGraph_PUndirNet_PNGraph
ConvertGraph_PUndirNet_PNEANet = _snap.ConvertGraph_PUndirNet_PNEANet
ConvertSubGraph_PUndirNet_PUndirNet = _snap.ConvertSubGraph_PUndirNet_PUndirNet
ConvertSubGraph_PUndirNet_PNGraph = _snap.ConvertSubGraph_PUndirNet_PNGraph
ConvertSubGraph_PUndirNet_PNEANet = _snap.ConvertSubGraph_PUndirNet_PNEANet
ConvertESubGraph_PUndirNet_PNEANet = _snap.ConvertESubGraph_PUndirNet_PNEANet
GetSubGraph_PUndirNet = _snap.GetSubGraph_PUndirNet
GetRndSubGraph_PUndirNet = _snap.GetRndSubGraph_PUndirNet
GetRndESubGraph_PUndirNet = _snap.GetRndESubGraph_PUndirNet
GetClustCf_PUndirNet = _snap.GetClustCf_PUndirNet
GetClustCfAll_PUndirNet = _snap.GetClustCfAll_PUndirNet
GetNodeClustCf_PUndirNet = _snap.GetNodeClustCf_PUndirNet
GetTriads_PUndirNet = _snap.GetTriads_PUndirNet
GetTriadsAll_PUndirNet = _snap.GetTriadsAll_PUndirNet
GetTriadEdges_PUndirNet = _snap.GetTriadEdges_PUndirNet
GetNodeTriads_PUndirNet = _snap.GetNodeTriads_PUndirNet
GetNodeTriadsAll_PUndirNet = _snap.GetNodeTriadsAll_PUndirNet
GetTriadParticip_PUndirNet = _snap.GetTriadParticip_PUndirNet
GetTriangleCnt_PUndirNet = _snap.GetTriangleCnt_PUndirNet
GetCmnNbrs_PUndirNet = _snap.GetCmnNbrs_PUndirNet
GetLen2Paths_PUndirNet = _snap.GetLen2Paths_PUndirNet
GetModularity_PUndirNet = _snap.GetModularity_PUndirNet
GetEdgesInOut_PUndirNet = _snap.GetEdgesInOut_PUndirNet
GetAnf_PUndirNet = _snap.GetAnf_PUndirNet
GetAnfEffDiam_PUndirNet = _snap.GetAnfEffDiam_PUndirNet
TestAnf_PUndirNet = _snap.TestAnf_PUndirNet
PlotKCoreEdges_PUndirNet = _snap.PlotKCoreEdges_PUndirNet
PlotKCoreNodes_PUndirNet = _snap.PlotKCoreNodes_PUndirNet
PlotShortPathDistr_PUndirNet = _snap.PlotShortPathDistr_PUndirNet
PlotHops_PUndirNet = _snap.PlotHops_PUndirNet
PlotClustCf_PUndirNet = _snap.PlotClustCf_PUndirNet
PlotSccDistr_PUndirNet = _snap.PlotSccDistr_PUndirNet
PlotWccDistr_PUndirNet = _snap.PlotWccDistr_PUndirNet
PlotOutDegDistr_PUndirNet = _snap.PlotOutDegDistr_PUndirNet
PlotInDegDistr_PUndirNet = _snap.PlotInDegDistr_PUndirNet
PercentDegree_PUndirNet = _snap.PercentDegree_PUndirNet
NodesGTEDegree_PUndirNet = _snap.NodesGTEDegree_PUndirNet
MxDegree_PUndirNet = _snap.MxDegree_PUndirNet
PercentMxWcc_PUndirNet = _snap.PercentMxWcc_PUndirNet
PercentMxScc_PUndirNet = _snap.PercentMxScc_PUndirNet
ToGraph_PUndirNet = _snap.ToGraph_PUndirNet


#
# dispatch table for instantiated polymorphic SNAP templates
# BELOW INCLUDE out-*.txt
#

def LoadPajek(tspec, *args):
    if tspec == PUNGraph: return LoadPajek_PUNGraph(*args)
    if tspec == PUndirNet: return LoadPajek_PUndirNet(*args)
    if tspec == PDirNet: return LoadPajek_PDirNet(*args)
    if tspec == PNGraph : return LoadPajek_PNGraph(*args)
    if tspec == PNEANet : return LoadPajek_PNEANet(*args)
    if tspec == PNGraphMP: return LoadPajek_PNGraphMP(*args)
    if tspec == PNEANetMP: return LoadPajek_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def SaveGViz(tspec, *args):
    if type(tspec) == PUNGraph: return SaveGViz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveGViz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveGViz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveGViz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveGViz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveGViz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def TestAnf(tspec, *args):
    if type(tspec) == PUNGraph: return TestAnf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return TestAnf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return TestAnf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return TestAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return TestAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return TestAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return TestAnf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntEdgesToSet(tspec, *args):
    if type(tspec) == PUNGraph: return CntEdgesToSet_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntEdgesToSet_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntEdgesToSet_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntEdgesToSet_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntEdgesToSet_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntEdgesToSet_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntEdgesToSet_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetModularity(tspec, *args):
    if type(tspec) == PUNGraph: return GetModularity_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetModularity_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetModularity_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetModularity_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetModularity_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetModularity_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetModularity_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsEffDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsEffDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsEffDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsEffDiamAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsEffDiamAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsEffDiamAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsEffDiamAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsEffDiamAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsEffDiamAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsEffDiamAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsEffDiamAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentMxWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentMxWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubGraphRenumber(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubGraphRenumber_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubGraphRenumber_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubGraphRenumber_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubGraphRenumber_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubGraphRenumber_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubGraphRenumber_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubGraphRenumber_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsTree(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsTree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsTree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsTree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsTree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PrintGraphStatTable(tspec, *args):
    if type(tspec) == PUNGraph: return PrintGraphStatTable_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PrintGraphStatTable_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PrintGraphStatTable_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PrintGraphStatTable_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintGraphStatTable_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintGraphStatTable_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintGraphStatTable_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetDegSeqV(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegSeqV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetDegSeqV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetDegSeqV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetDegSeqV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegSeqV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegSeqV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegSeqV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenGrid(tspec, *args):
    if tspec == PUNGraph: return GenGrid_PUNGraph(*args)
    if tspec == PUndirNet: return GenGrid_PUndirNet(*args)
    if tspec == PDirNet: return GenGrid_PDirNet(*args)
    if tspec == PNGraph : return GenGrid_PNGraph(*args)
    if tspec == PNEANet : return GenGrid_PNEANet(*args)
    if tspec == PNGraphMP: return GenGrid_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenGrid_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def LoadEdgeList(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeList_PUNGraph(*args)
    if tspec == PUndirNet: return LoadEdgeList_PUndirNet(*args)
    if tspec == PDirNet: return LoadEdgeList_PDirNet(*args)
    if tspec == PNGraph : return LoadEdgeList_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeList_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return GetUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetUnDir_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetUnDir_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetUnDir_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DrawGViz(tspec, *args):
    if type(tspec) == PUNGraph: return DrawGViz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DrawGViz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DrawGViz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DrawGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DrawGViz_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return DrawGViz_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return DrawGViz_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotKCoreNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotKCoreNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotOutDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotOutDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotOutDegDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotOutDegDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotOutDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotOutDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotOutDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotOutDegDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntUniqBiDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqBiDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqBiDirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqBiDirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqBiDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqBiDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqBiDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqBiDirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCoreEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCoreEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBfsFullDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsFullDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBfsFullDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBfsFullDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsFullDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsFullDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsFullDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsFullDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadConnList(tspec, *args):
    if tspec == PUNGraph: return LoadConnList_PUNGraph(*args)
    if tspec == PUndirNet: return LoadConnList_PUndirNet(*args)
    if tspec == PDirNet: return LoadConnList_PDirNet(*args)
    if tspec == PNGraph : return LoadConnList_PNGraph(*args)
    if tspec == PNEANet : return LoadConnList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnList_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetHitsMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetHitsMP_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetHitsMP_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetHitsMP_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetHitsMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHitsMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHitsMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHitsMP_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRank(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRank_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRank_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRank_v1(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_v1_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRank_v1_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRank_v1_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_v1_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_v1_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_v1_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_v1_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntInDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntInDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntInDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntInDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntInDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntInDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntInDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntInDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxScc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxScc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxScc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def AddSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return AddSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return AddSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return AddSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return AddSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return AddSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return AddSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return AddSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelDegKNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelDegKNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelDegKNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelDegKNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelDegKNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelDegKNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelDegKNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelDegKNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotSccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotSccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotSccDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotSccDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotSccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotSccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotSccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotSccDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def IsWeaklyConn(tspec, *args):
    if type(tspec) == PUNGraph: return IsWeaklyConn_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsWeaklyConn_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsWeaklyConn_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsWeaklyConn_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsWeaklyConn_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsWeaklyConn_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsWeaklyConn_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxInDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxInDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxInDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxInDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxInDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxInDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxInDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxInDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSccSzCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSccSzCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccSzCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClosenessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetClosenessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClosenessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClosenessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClosenessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClosenessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClosenessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClosenessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxWccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxWccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxWccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetCmnNbrs(tspec, *args):
    if type(tspec) == PUNGraph: return GetCmnNbrs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetCmnNbrs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetCmnNbrs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetCmnNbrs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetCmnNbrs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetCmnNbrs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetCmnNbrs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadEdges_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadEdges_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadEdges_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadConnListStr(tspec, *args):
    if tspec == PUNGraph: return LoadConnListStr_PUNGraph(*args)
    if tspec == PUndirNet: return LoadConnListStr_PUndirNet(*args)
    if tspec == PDirNet: return LoadConnListStr_PDirNet(*args)
    if tspec == PNGraph : return LoadConnListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadConnListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnListStr_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetMxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxWccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxWccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxOutDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxOutDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxOutDegNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxOutDegNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxOutDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxOutDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxOutDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxOutDegNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetLen2Paths(tspec, *args):
    if type(tspec) == PUNGraph: return GetLen2Paths_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetLen2Paths_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetLen2Paths_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetLen2Paths_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetLen2Paths_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetLen2Paths_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetLen2Paths_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetPageRankMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRankMP_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetPageRankMP_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetPageRankMP_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRankMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRankMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRankMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRankMP_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PrintInfo(tspec, *args):
    if type(tspec) == PUNGraph: return PrintInfo_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PrintInfo_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PrintInfo_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PrintInfo_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintInfo_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintInfo_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintInfo_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetWccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetWccs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetWccs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetWccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxWcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxWcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxSccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxSccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxSccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def NodesGTEDegree(tspec, *args):
    if type(tspec) == PUNGraph: return NodesGTEDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return NodesGTEDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return NodesGTEDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return NodesGTEDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return NodesGTEDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return NodesGTEDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return NodesGTEDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotShortPathDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotShortPathDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotShortPathDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotShortPathDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotShortPathDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotShortPathDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotShortPathDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotShortPathDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodesAtHop(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHop_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodesAtHop_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodesAtHop_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHop_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHop_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHop_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHop_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotInDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotInDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotInDegDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotInDegDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotInDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotInDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotInDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotInDegDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetHits(tspec, *args):
    if type(tspec) == PUNGraph: return GetHits_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetHits_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetHits_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetHits_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHits_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHits_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHits_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetMxBiCon(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxBiCon_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetMxBiCon_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetMxBiCon_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetMxBiCon_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxBiCon_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxBiCon_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxBiCon_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelZeroDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelZeroDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelZeroDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelZeroDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelZeroDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelZeroDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelZeroDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelZeroDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetRndESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetRndESubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetRndESubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetRndESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndESubGraph_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndESubGraph_PNGraphMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccs_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSccs_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSccs_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccs_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentDegree(tspec, *args):
    if type(tspec) == PUNGraph: return PercentDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetSubTreeSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubTreeSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetSubTreeSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetSubTreeSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetSubTreeSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubTreeSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubTreeSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubTreeSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenFull(tspec, *args):
    if tspec == PUNGraph: return GenFull_PUNGraph(*args)
    if tspec == PUndirNet: return GenFull_PUndirNet(*args)
    if tspec == PDirNet: return GenFull_PDirNet(*args)
    if tspec == PNGraph : return GenFull_PNGraph(*args)
    if tspec == PNEANet : return GenFull_PNEANet(*args)
    if tspec == PNGraphMP: return GenFull_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenFull_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def IsConnected(tspec, *args):
    if type(tspec) == PUNGraph: return IsConnected_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsConnected_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsConnected_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsConnected_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsConnected_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsConnected_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsConnected_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxDegree(tspec, *args):
    if type(tspec) == PUNGraph: return MxDegree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxDegree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxDegree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxDegree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SavePajek(tspec, *args):
    if type(tspec) == PUNGraph: return SavePajek_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SavePajek_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SavePajek_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SavePajek_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SavePajek_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SavePajek_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SavePajek_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTreeRootNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeRootNId_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTreeRootNId_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTreeRootNId_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeRootNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeRootNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeRootNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeRootNId_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotHops(tspec, *args):
    if type(tspec) == PUNGraph: return PlotHops_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotHops_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotHops_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotHops_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def DelSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return DelSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return DelSelfEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return DelSelfEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return DelSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelSelfEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetClustCfAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetClustCfAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetClustCfAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetClustCfAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetClustCfAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClustCfAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClustCfAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClustCfAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodesAtHops(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHops_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodesAtHops_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodesAtHops_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHops_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeOutDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeOutDegV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeOutDegV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeOutDegV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeOutDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeOutDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeOutDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeOutDegV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetAnf(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetAnf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetAnf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return PlotClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotClustCf_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotClustCf_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotClustCf_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenCircle(tspec, *args):
    if tspec == PUNGraph: return GenCircle_PUNGraph(*args)
    if tspec == PUndirNet: return GenCircle_PUndirNet(*args)
    if tspec == PDirNet: return GenCircle_PDirNet(*args)
    if tspec == PNGraph : return GenCircle_PNGraph(*args)
    if tspec == PNEANet : return GenCircle_PNEANet(*args)
    if tspec == PNGraphMP: return GenCircle_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenCircle_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def MakeUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return MakeUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MakeUnDir_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MakeUnDir_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MakeUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MakeUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MakeUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MakeUnDir_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetESubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetESubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetESubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetESubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetBetweennessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetBetweennessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetBetweennessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetBetweennessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetBetweennessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBetweennessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBetweennessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBetweennessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadParticip(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadParticip_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadParticip_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadParticip_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadParticip_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadParticip_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadParticip_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadParticip_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PercentMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PercentMxScc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PercentMxScc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxScc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetWccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetWccSzCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetWccSzCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetWccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccSzCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def IsTree(tspec, *args):
    if type(tspec) == PUNGraph: return IsTree_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return IsTree_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return IsTree_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return IsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsTree_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenRndGnm(tspec, *args):
    if tspec == PUNGraph: return GenRndGnm_PUNGraph(*args)
    if tspec == PUndirNet: return GenRndGnm_PUndirNet(*args)
    if tspec == PDirNet: return GenRndGnm_PDirNet(*args)
    if tspec == PNGraph : return GenRndGnm_PNGraph(*args)
    if tspec == PNEANet : return GenRndGnm_PNEANet(*args)
    if tspec == PNGraphMP: return GenRndGnm_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenRndGnm_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetFarnessCentr(tspec, *args):
    if type(tspec) == PUNGraph: return GetFarnessCentr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetFarnessCentr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetFarnessCentr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetFarnessCentr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetFarnessCentr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetFarnessCentr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetFarnessCentr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SaveMatlabSparseMtx(tspec, *args):
    if type(tspec) == PUNGraph: return SaveMatlabSparseMtx_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveMatlabSparseMtx_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveMatlabSparseMtx_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveMatlabSparseMtx_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveMatlabSparseMtx_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveMatlabSparseMtx_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveMatlabSparseMtx_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def MxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return MxSccSz_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return MxSccSz_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return MxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxSccSz_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetAnfEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnfEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetAnfEffDiam_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetAnfEffDiam_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetAnfEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnfEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnfEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnfEffDiam_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTreeSig(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeSig_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTreeSig_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTreeSig_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeSig_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeSig_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeSig_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeSig_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntOutDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntOutDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntOutDegNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntOutDegNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntOutDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntOutDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntOutDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntOutDegNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriangleCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriangleCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriangleCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriangleCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriangleCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriangleCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriangleCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriangleCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetOutDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetOutDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetOutDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetOutDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetOutDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetOutDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetOutDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetOutDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenBaraHierar(tspec, *args):
    if tspec == PUNGraph: return GenBaraHierar_PUNGraph(*args)
    if tspec == PUndirNet: return GenBaraHierar_PUndirNet(*args)
    if tspec == PDirNet: return GenBaraHierar_PDirNet(*args)
    if tspec == PNGraph : return GenBaraHierar_PNGraph(*args)
    if tspec == PNEANet : return GenBaraHierar_PNEANet(*args)
    if tspec == PNGraphMP: return GenBaraHierar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenBaraHierar_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GenTree(tspec, *args):
    if tspec == PUNGraph: return GenTree_PUNGraph(*args)
    if tspec == PUndirNet: return GenTree_PUndirNet(*args)
    if tspec == PDirNet: return GenTree_PDirNet(*args)
    if tspec == PNGraph : return GenTree_PNGraph(*args)
    if tspec == PNEANet : return GenTree_PNEANet(*args)
    if tspec == PNGraphMP: return GenTree_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenTree_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def GetShortPath(tspec, *args):
    if type(tspec) == PUNGraph: return GetShortPath_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetShortPath_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetShortPath_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetShortPath_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetShortPath_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetShortPath_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetShortPath_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCoreNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCoreNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetInDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetInDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetInDegCnt_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetInDegCnt_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetInDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetInDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetInDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetInDegCnt_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntUniqDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqDirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqDirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqDirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeInDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeInDegV_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeInDegV_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeInDegV_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeInDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeInDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeInDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeInDegV_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetRndSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetRndSubGraph_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetRndSubGraph_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetRndSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndSubGraph_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def PlotWccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotWccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotWccDistr_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotWccDistr_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotWccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotWccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotWccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotWccDistr_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetEdgesInOut(tspec, *args):
    if type(tspec) == PUNGraph: return GetEdgesInOut_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetEdgesInOut_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetEdgesInOut_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetEdgesInOut_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetEdgesInOut_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetEdgesInOut_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetEdgesInOut_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetKCore(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCore_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetKCore_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetKCore_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetKCore_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCore_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCore_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCore_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def CntNonZNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntNonZNodes_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntNonZNodes_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntNonZNodes_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntNonZNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntNonZNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntNonZNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntNonZNodes_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GenStar(tspec, *args):
    if tspec == PUNGraph: return GenStar_PUNGraph(*args)
    if tspec == PUndirNet: return GenStar_PUndirNet(*args)
    if tspec == PDirNet: return GenStar_PDirNet(*args)
    if tspec == PNGraph : return GenStar_PNGraph(*args)
    if tspec == PNEANet : return GenStar_PNEANet(*args)
    if tspec == PNGraphMP: return GenStar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenStar_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def PlotKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return PlotKCoreEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return PlotKCoreEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def SaveEdgeList(tspec, *args):
    if type(tspec) == PUNGraph: return SaveEdgeList_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return SaveEdgeList_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return SaveEdgeList_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return SaveEdgeList_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveEdgeList_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveEdgeList_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveEdgeList_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeTriads_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeTriads_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeTriads_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeTriads_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeTriadsAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeTriadsAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeTriadsAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeTriadsAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeTriadsAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeTriadsAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeTriadsAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeTriadsAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetNodeEcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeEcc_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetNodeEcc_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetNodeEcc_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeEcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeEcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeEcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeEcc_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def LoadEdgeListStr(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeListStr_PUNGraph(*args)
    if tspec == PUndirNet: return LoadEdgeListStr_PUndirNet(*args)
    if tspec == PDirNet: return LoadEdgeListStr_PDirNet(*args)
    if tspec == PNGraph : return LoadEdgeListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeListStr_PNEANetMP(*args)
    raise TypeError('First argument has invalid type')
def CntUniqUndirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqUndirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return CntUniqUndirEdges_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return CntUniqUndirEdges_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqUndirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqUndirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqUndirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqUndirEdges_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriads_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriads_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriads_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriads_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')
def GetTriadsAll(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadsAll_PUNGraph(tspec, *args)
    if type(tspec) == PUndirNet: return GetTriadsAll_PUndirNet(tspec, *args)
    if type(tspec) == PDirNet: return GetTriadsAll_PDirNet(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadsAll_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadsAll_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadsAll_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadsAll_PNEANetMP(tspec, *args)
    raise TypeError('First argument has invalid type')

#
# BELOW INCLUDE disp-custom.py
#
def ConvertGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ConvertSubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertSubGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertSubGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ConvertESubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PUNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PUNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PUndirNet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUndirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PUndirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PUndirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUndirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUndirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PUndirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PUndirNet_PNEANetMP(tinspec, *args)
    if toutspec == PDirNet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PDirNet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PDirNet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PDirNet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PDirNet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PDirNet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PDirNet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PDirNet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNGraph_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNGraph_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNEANet_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNEANet_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNGraphMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNGraphMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PUndirNet:
            return ConvertESubGraph_PNEANetMP_PUndirNet(tinspec, *args)
        if type(tinspec) == PDirNet:
            return ConvertESubGraph_PNEANetMP_PDirNet(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    raise TypeError('First argument has invalid type')
def ToNetwork(tspec, *args):
    if tspec == PNEANet : return ToNetwork_PNEANet(*args)
    raise TypeError('First argument has invalid type')
def ToGraph(tspec, *args):
    if tspec == PUNGraph: return ToGraph_PUNGraph(*args)
    if tspec == PUndirNet: return ToGraph_PUndirNet(*args)
    if tspec == PDirNet: return ToGraph_PDirNet(*args)
    if tspec == PNGraph : return ToGraph_PNGraph(*args)
    raise TypeError('First argument has invalid type')

#
# generators for nodes and edges
#

# iterate through all the nodes
def Nodes(self):
    NI = self.BegNI()
    while NI < self.EndNI():
        yield NI
        NI.Next()

# iterate through all the edges
def Edges(self):
    EI = self.BegEI()
    while EI < self.EndEI():
        yield EI
        EI.Next()

# iterate through out edges of a node
def GetOutEdges(self):
    for e in range(0, self.GetOutDeg()):
        yield self.GetOutNId(e)

# iterate through in edges of a node
def GetInEdges(self):
    for e in range(0, self.GetInDeg()):
        yield self.GetInNId(e)

#
# generators for nodes and edges
#

# iterate through all the nodes
def MMNodes(self):
    NI = self.BegMMNI()
    while NI < self.EndMMNI():
        yield NI
        NI.Next()

#
# redefine some methods to use T... class not P... class
#

def Clr(self):
    self().Clr()

def Empty(self):
    return self().Empty()

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PNEANet.Nodes = Nodes
PNEANet.Edges = Edges
PNEANet.Clr = Clr
PNEANet.Empty = Empty
PNEANet.Save = Save

TModeNet.Nodes = MMNodes
TModeNet.Edges = Edges

PMMNet.Save = Save

PUNGraph.Nodes = Nodes
PUNGraph.Edges = Edges
PUNGraph.Clr = Clr
PUNGraph.Empty = Empty
PUNGraph.Save = Save


PUndirNet.Nodes = Nodes
PUndirNet.Edges = Edges
PUndirNet.Clr = Clr
PUndirNet.Empty = Empty
PUndirNet.Save = Save

PDirNet.Nodes = Nodes
PDirNet.Edges = Edges
PDirNet.Clr = Clr
PDirNet.Empty = Empty
PDirNet.Save = Save

PNGraph.Nodes = Nodes
PNGraph.Edges = Edges
PNGraph.Clr = Clr
PNGraph.Empty = Empty
PNGraph.Save = Save

TNGraphNodeI.GetOutEdges = GetOutEdges
TNGraphNodeI.GetInEdges = GetInEdges

TUNGraphNodeI.GetOutEdges = GetOutEdges
TUNGraphNodeI.GetInEdges = GetInEdges

TDirNetNodeI.GetOutEdges = GetOutEdges
TDirNetNodeI.GetInEdges = GetInEdges

TUndirNetNodeI.GetOutEdges = GetOutEdges
TUndirNetNodeI.GetInEdges = GetInEdges

TNEANetNodeI.GetOutEdges = GetOutEdges
TNEANetNodeI.GetInEdges = GetInEdges

TModeNetNodeI.GetOutEdges = GetOutEdges
TModeNetNodeI.GetInEdges = GetInEdges


class PTable(object):
    r"""Proxy of C++ TPt< TTable > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    New = _swig_new_static_method(_snap.PTable_New)
    __swig_destroy__ = _snap.delete_PTable
    Save = _swig_new_instance_method(_snap.PTable_Save)
    __deref__ = _swig_new_instance_method(_snap.PTable___deref__)
    __ref__ = _swig_new_instance_method(_snap.PTable___ref__)
    __call__ = _swig_new_instance_method(_snap.PTable___call__)
    Empty = _swig_new_instance_method(_snap.PTable_Empty)
    Clr = _swig_new_instance_method(_snap.PTable_Clr)
    GetRefs = _swig_new_instance_method(_snap.PTable_GetRefs)
    SetMP = _swig_new_instance_method(_snap.PTable_SetMP)
    GetMP = _swig_new_instance_method(_snap.PTable_GetMP)
    NormalizeColName = _swig_new_instance_method(_snap.PTable_NormalizeColName)
    NormalizeColNameV = _swig_new_instance_method(_snap.PTable_NormalizeColNameV)
    AddIntCol = _swig_new_instance_method(_snap.PTable_AddIntCol)
    AddFltCol = _swig_new_instance_method(_snap.PTable_AddFltCol)
    AddStrCol = _swig_new_instance_method(_snap.PTable_AddStrCol)
    GetSchema = _swig_new_instance_method(_snap.PTable_GetSchema)
    LoadSS = _swig_new_instance_method(_snap.PTable_LoadSS)
    SaveSS = _swig_new_instance_method(_snap.PTable_SaveSS)
    SaveBin = _swig_new_instance_method(_snap.PTable_SaveBin)
    Load = _swig_new_instance_method(_snap.PTable_Load)
    LoadShM = _swig_new_instance_method(_snap.PTable_LoadShM)
    Dump = _swig_new_instance_method(_snap.PTable_Dump)
    TableFromHashMap = _swig_new_instance_method(_snap.PTable_TableFromHashMap)
    GetContext = _swig_new_instance_method(_snap.PTable_GetContext)
    ChangeContext = _swig_new_instance_method(_snap.PTable_ChangeContext)
    GetColIdx = _swig_new_instance_method(_snap.PTable_GetColIdx)
    GetIntVal = _swig_new_instance_method(_snap.PTable_GetIntVal)
    GetFltVal = _swig_new_instance_method(_snap.PTable_GetFltVal)
    GetStrMapById = _swig_new_instance_method(_snap.PTable_GetStrMapById)
    GetStrMapByName = _swig_new_instance_method(_snap.PTable_GetStrMapByName)
    GetStrValById = _swig_new_instance_method(_snap.PTable_GetStrValById)
    GetStrValByName = _swig_new_instance_method(_snap.PTable_GetStrValByName)
    GetIntRowIdxByVal = _swig_new_instance_method(_snap.PTable_GetIntRowIdxByVal)
    GetStrRowIdxByMap = _swig_new_instance_method(_snap.PTable_GetStrRowIdxByMap)
    GetFltRowIdxByVal = _swig_new_instance_method(_snap.PTable_GetFltRowIdxByVal)
    RequestIndexInt = _swig_new_instance_method(_snap.PTable_RequestIndexInt)
    RequestIndexFlt = _swig_new_instance_method(_snap.PTable_RequestIndexFlt)
    RequestIndexStrMap = _swig_new_instance_method(_snap.PTable_RequestIndexStrMap)
    GetStr = _swig_new_instance_method(_snap.PTable_GetStr)
    GetIntValAtRowIdx = _swig_new_instance_method(_snap.PTable_GetIntValAtRowIdx)
    GetFltValAtRowIdx = _swig_new_instance_method(_snap.PTable_GetFltValAtRowIdx)
    ToGraphSequence = _swig_new_instance_method(_snap.PTable_ToGraphSequence)
    ToVarGraphSequence = _swig_new_instance_method(_snap.PTable_ToVarGraphSequence)
    ToGraphPerGroup = _swig_new_instance_method(_snap.PTable_ToGraphPerGroup)
    ToGraphSequenceIterator = _swig_new_instance_method(_snap.PTable_ToGraphSequenceIterator)
    ToVarGraphSequenceIterator = _swig_new_instance_method(_snap.PTable_ToVarGraphSequenceIterator)
    ToGraphPerGroupIterator = _swig_new_instance_method(_snap.PTable_ToGraphPerGroupIterator)
    NextGraphIterator = _swig_new_instance_method(_snap.PTable_NextGraphIterator)
    IsLastGraphOfSequence = _swig_new_instance_method(_snap.PTable_IsLastGraphOfSequence)
    GetSrcCol = _swig_new_instance_method(_snap.PTable_GetSrcCol)
    SetSrcCol = _swig_new_instance_method(_snap.PTable_SetSrcCol)
    GetDstCol = _swig_new_instance_method(_snap.PTable_GetDstCol)
    SetDstCol = _swig_new_instance_method(_snap.PTable_SetDstCol)
    AddEdgeAttr = _swig_new_instance_method(_snap.PTable_AddEdgeAttr)
    AddSrcNodeAttr = _swig_new_instance_method(_snap.PTable_AddSrcNodeAttr)
    AddDstNodeAttr = _swig_new_instance_method(_snap.PTable_AddDstNodeAttr)
    AddNodeAttr = _swig_new_instance_method(_snap.PTable_AddNodeAttr)
    SetCommonNodeAttrs = _swig_new_instance_method(_snap.PTable_SetCommonNodeAttrs)
    GetSrcNodeIntAttrV = _swig_new_instance_method(_snap.PTable_GetSrcNodeIntAttrV)
    GetDstNodeIntAttrV = _swig_new_instance_method(_snap.PTable_GetDstNodeIntAttrV)
    GetEdgeIntAttrV = _swig_new_instance_method(_snap.PTable_GetEdgeIntAttrV)
    GetSrcNodeFltAttrV = _swig_new_instance_method(_snap.PTable_GetSrcNodeFltAttrV)
    GetDstNodeFltAttrV = _swig_new_instance_method(_snap.PTable_GetDstNodeFltAttrV)
    GetEdgeFltAttrV = _swig_new_instance_method(_snap.PTable_GetEdgeFltAttrV)
    GetSrcNodeStrAttrV = _swig_new_instance_method(_snap.PTable_GetSrcNodeStrAttrV)
    GetDstNodeStrAttrV = _swig_new_instance_method(_snap.PTable_GetDstNodeStrAttrV)
    GetEdgeStrAttrV = _swig_new_instance_method(_snap.PTable_GetEdgeStrAttrV)
    GetNodeTable = _swig_new_instance_method(_snap.PTable_GetNodeTable)
    GetEdgeTable = _swig_new_instance_method(_snap.PTable_GetEdgeTable)
    GetFltNodePropertyTable = _swig_new_instance_method(_snap.PTable_GetFltNodePropertyTable)
    GetColType = _swig_new_instance_method(_snap.PTable_GetColType)
    GetNumRows = _swig_new_instance_method(_snap.PTable_GetNumRows)
    GetNumValidRows = _swig_new_instance_method(_snap.PTable_GetNumValidRows)
    GetRowIdMap = _swig_new_instance_method(_snap.PTable_GetRowIdMap)
    BegRI = _swig_new_instance_method(_snap.PTable_BegRI)
    EndRI = _swig_new_instance_method(_snap.PTable_EndRI)
    BegRIWR = _swig_new_instance_method(_snap.PTable_BegRIWR)
    EndRIWR = _swig_new_instance_method(_snap.PTable_EndRIWR)
    GetPartitionRanges = _swig_new_instance_method(_snap.PTable_GetPartitionRanges)
    Rename = _swig_new_instance_method(_snap.PTable_Rename)
    Unique = _swig_new_instance_method(_snap.PTable_Unique)
    Select = _swig_new_instance_method(_snap.PTable_Select)
    Classify = _swig_new_instance_method(_snap.PTable_Classify)
    SelectAtomic = _swig_new_instance_method(_snap.PTable_SelectAtomic)
    ClassifyAtomic = _swig_new_instance_method(_snap.PTable_ClassifyAtomic)
    SelectAtomicConst = _swig_new_instance_method(_snap.PTable_SelectAtomicConst)
    SelectAtomicIntConst = _swig_new_instance_method(_snap.PTable_SelectAtomicIntConst)
    SelectAtomicStrConst = _swig_new_instance_method(_snap.PTable_SelectAtomicStrConst)
    SelectAtomicFltConst = _swig_new_instance_method(_snap.PTable_SelectAtomicFltConst)
    Group = _swig_new_instance_method(_snap.PTable_Group)
    Count = _swig_new_instance_method(_snap.PTable_Count)
    Order = _swig_new_instance_method(_snap.PTable_Order)
    Aggregate = _swig_new_instance_method(_snap.PTable_Aggregate)
    AggregateCols = _swig_new_instance_method(_snap.PTable_AggregateCols)
    SpliceByGroup = _swig_new_instance_method(_snap.PTable_SpliceByGroup)
    Join = _swig_new_instance_method(_snap.PTable_Join)
    ThresholdJoin = _swig_new_instance_method(_snap.PTable_ThresholdJoin)
    SelfJoin = _swig_new_instance_method(_snap.PTable_SelfJoin)
    SelfSimJoin = _swig_new_instance_method(_snap.PTable_SelfSimJoin)
    SelfSimJoinPerGroup = _swig_new_instance_method(_snap.PTable_SelfSimJoinPerGroup)
    SimJoin = _swig_new_instance_method(_snap.PTable_SimJoin)
    SelectFirstNRows = _swig_new_instance_method(_snap.PTable_SelectFirstNRows)
    Defrag = _swig_new_instance_method(_snap.PTable_Defrag)
    StoreIntCol = _swig_new_instance_method(_snap.PTable_StoreIntCol)
    StoreFltCol = _swig_new_instance_method(_snap.PTable_StoreFltCol)
    StoreStrCol = _swig_new_instance_method(_snap.PTable_StoreStrCol)
    UpdateFltFromTable = _swig_new_instance_method(_snap.PTable_UpdateFltFromTable)
    Union = _swig_new_instance_method(_snap.PTable_Union)
    UnionAll = _swig_new_instance_method(_snap.PTable_UnionAll)
    UnionAllInPlace = _swig_new_instance_method(_snap.PTable_UnionAllInPlace)
    Intersection = _swig_new_instance_method(_snap.PTable_Intersection)
    Minus = _swig_new_instance_method(_snap.PTable_Minus)
    Project = _swig_new_instance_method(_snap.PTable_Project)
    ProjectInPlace = _swig_new_instance_method(_snap.PTable_ProjectInPlace)
    ColGenericOp = _swig_new_instance_method(_snap.PTable_ColGenericOp)
    ColAdd = _swig_new_instance_method(_snap.PTable_ColAdd)
    ColSub = _swig_new_instance_method(_snap.PTable_ColSub)
    ColMul = _swig_new_instance_method(_snap.PTable_ColMul)
    ColDiv = _swig_new_instance_method(_snap.PTable_ColDiv)
    ColMod = _swig_new_instance_method(_snap.PTable_ColMod)
    ColMin = _swig_new_instance_method(_snap.PTable_ColMin)
    ColMax = _swig_new_instance_method(_snap.PTable_ColMax)
    ColConcat = _swig_new_instance_method(_snap.PTable_ColConcat)
    ColConcatConst = _swig_new_instance_method(_snap.PTable_ColConcatConst)
    ReadIntCol = _swig_new_instance_method(_snap.PTable_ReadIntCol)
    ReadFltCol = _swig_new_instance_method(_snap.PTable_ReadFltCol)
    ReadStrCol = _swig_new_instance_method(_snap.PTable_ReadStrCol)
    InitIds = _swig_new_instance_method(_snap.PTable_InitIds)
    IsNextK = _swig_new_instance_method(_snap.PTable_IsNextK)
    PrintSize = _swig_new_instance_method(_snap.PTable_PrintSize)
    PrintContextSize = _swig_new_instance_method(_snap.PTable_PrintContextSize)
    GetMemUsedKB = _swig_new_instance_method(_snap.PTable_GetMemUsedKB)
    GetContextMemUsedKB = _swig_new_instance_method(_snap.PTable_GetContextMemUsedKB)

# Register PTable in _snap:
_snap.PTable_swigregister(PTable)
PTable_New = _snap.PTable_New




#
# redefine some methods to use T... class not P... class
#

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PTable.Save = Save




